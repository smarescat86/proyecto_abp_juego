%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1511.m10.i304.n020.S.c12.254619130 Cute monsters vector set in cartoon style.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Alex
%%CreationDate: 11/7/2015
%%BoundingBox: 0 0 378 388
%%HiResBoundingBox: 0 0 377.9849 387.8992
%%CropBox: 0 0 377.9849 387.8992
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">fast-food_2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-11-07T19:33:28+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-11-07T19:33:28+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-11-07T19:33:27+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9CX97q+s6nPpOjzmxsrM&#xA;hNT1ZVV5PUIDfV7YOCvMKQXdgQtaAcumVCMYREpCyeQ/Sf1MCSTQY7q9hp6XUmmaMuo6lq8VGub9&#xA;9SvEWFqUq7iZEr/k7L+rMiOQiPHkMYw/qx/U4ObOeLgxgyl79gho9d/NDQVha6jt9c02SQRRzqVa&#xA;YN2jZoitS32VbianbckVhA6XUAyxn5cvx3qZ6iAsgFm/lbzTp/mKwNza1jmiIS5tn+3Gx8fEHscx&#xA;c2EwNFytPqI5Y2E1uLiC2gkuLiRYYIlLyyuQqqo3JYnYAZWASaDeTTG4PP1teK02l6RqWp2Stx+u&#xA;28UQiNOpVZpYpWHuE37ZlHSEbSlGJ7v7A1jKDy3TvSNZ0/VrT6zZOWVWMcsbq0csUi/ajljYBkde&#xA;4IyjJjlA0WYNo3K0uxV2KuxV2KuxVBa3q9ro+lXOpXVfRtk5FR1Yk0VR7sxAyeOBnIAJjGzTx/zt&#xA;5vsNPja583ym6u+KyvpXrtbWNmriqJKVPKSWhFR9Gb3S6O48diGMfxHmf2Ou1vawwz8LFHjyMyX8&#xA;qdF9CO9sPV0HXeHL63p8soCuRXiySMwda7HpyGanJn9R6x83Y48szEcdWmPkjzLqN817o2uemNe0&#xA;oqJ5IqCO4hkFYriMbbMPtU6HwrQVZYAbjkykBzHIsqypg7FXYq7FXYq7FUv1TzFoelFRqN9Dau26&#xA;pI4DkeIX7VPoyyGKUuQtkIk8kGPPPk8wPN+mLUIn2qyKG+hT8R+gZL8vk7inw5dyRf8AK6PIMgZr&#xA;S7lu41JAlhgkCMR/I0gQOP8AKXb3yyGjySZDDItJ+cvk01LfWkAFamGv3BWY5I6HJ5J8CSaaR+Zf&#xA;kTVoGms9Zt+KVEiTk27qw6qyTCNgw/lpXKfy8+5h4cu5F2/njyjcTCGLVrYyNsoLhanwBagxOnyD&#xA;oVOOXcneUsHYq7FWP+WAbPyXa3IAa4ltTfTkb857hTPIferucyc/qykdLr4DZqvhhfk8k/NPzjfe&#xA;SvywXUtPRZL+6WOVpZNw1xduf3kg/a9Neg8c5ztq9Tro6cmscRdd7XoICOIHrLcoT8s/+cj/ACLr&#xA;fkfTfL/mC9lt/N0ojsBEbeRxPdO4SGeOSFPST4yr/EV4np0rm1hKGmx2BUIDl5Dm5JFs00vVZV/M&#xA;GzvNOsXCa3ZO91EaRI0icmLpzoesQ+Ljvv45m6WZy6USmRYPv61+O51xAhqNv4gxT81PzF02xt7T&#xA;WPMkVwdMM7GDSStUfgxjgBAbg/NlkkY12CU3rTI6vPkwR8PBw+Ka9R6A3Z+FUPf5M8UPFlxy+noP&#xA;x1Z1qVh5ZTT01zyhfQRaksX1qB7OVWiuIVUyEPGhKFGVTQ060yMNYBKOPIeLjNDvulzaURBnj9Mg&#xA;yDSXjvbrTfMdmojXVrb0dQjU/aZV9SJm8WiKvHXwb2FLZ7AwP8J2/HnzcjFPjAkOoZHmM3OxV2Ku&#xA;xV2Kpfe+YdAsZ/q97qdpaz7H0pp443oenwswOSEJHkEiJKS+fJYJdK0ubkJLFtTsmndSChhMm5JG&#xA;xXpl+mHqPfwlnj5n3PkP/nJlNXGvOZg/1cX1369a09QuPTr/ALCvH2zbdqX+XxcP0V9tD9rznZdf&#xA;mMvF9d/ZZ/Ynf5e/85PfmjfQ6f5WMFpcelGIpNXaOT60sEa05uefpl9qciu/hXfNb2fp/FzRiRY6&#xA;+52XaGo8LDKQNHp73vfkbmfOuk8v96B5XT6yTueJulMNffh0r2y3tCuOdcuNt7Pv8rC+4PRZNX0m&#xA;Kf6vJe26T1p6TSoHr4cSa5gCEiLouTwlF5BDsVdirsVY7598zN5d8uy3sNDdysILQMKj1HBPIj/J&#xA;VScyNNh8SddGzHDiL5t1LW5Z9SMbGXUtZuqyC2j/AHk71NObVICJ/luQo8c2Wr1uHSw4pkRAc+EC&#xA;TwxFlkPl/wAqOtxFfeYEhvSp5LpFC9mB4TV4mc/MBf8AJqOWee9oe12bJP8AdDhxjv6+922PssGP&#xA;rO/l0/Wi/O3l+y0+W11DTFKaZqKs0cJJJhljIEkVTuQKgqT2zuuyO0Rq8In1dVPHKEjCXMJHpenX&#xA;GpalbWFuP311IsSV6AsaVPsOpzZTkIgk9GBNC2V+aPKXluZEstLj+qXNnVBrMYH1iZxsTLWqvHX7&#xA;KEbfs0Jrnmuu9qsw1F464I7e/wDHR2un7MEocUyeI/YwHUJL7RZhDrkawxO3GDU46/VZCfshiamF&#xA;z/K+38rNnW9k+0ODVivpydx/Q4Wo088R9XLv6fset/k95wu2vP8AD15KZYXQvYMxqUKCrRiv7JWp&#xA;HhT3zN12AVxj4uBnh1euZq3FdiqVaAqx6f8AoqQD1NOH1VkP7UKjjC9PB4gD86jtl2XeXF/O3/Wx&#xA;A2pgvm3yfpGpaJN5V8xKv1FwYrK5lJSKWHl6ka+r/uuaFuleuaztXs7JqJx1GA1mjzHe4uDIMP7u&#xA;fLofx1eXaT+QfkXyRqEesy6g9xdBvT08XM8Eojd9jMscChnaNCW3+gcqZh4tN2jqZCGSAx4+cj3g&#xA;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&#xA;FND4qgIp2yHaErynyZdnxrEPNnWYTmuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:56813a27-0794-d641-95a3-c700d6b42836</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:56813a27-0794-d641-95a3-c700d6b42836</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:07f5ad1c-6b76-ff48-86da-364f5ee7924b</stRef:instanceID>
            <stRef:documentID>xmp.did:07f5ad1c-6b76-ff48-86da-364f5ee7924b</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:49f5aed3-9f57-c747-81d8-825062695e08</stEvt:instanceID>
                  <stEvt:when>2015-09-25T15:23:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2f17e0a3-50be-7c47-b9ca-27c49acbf287</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:27:40+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2a30ee13-b97c-fe48-9da0-a884076cf819</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:54:01+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b893f768-fe5c-ba45-8877-09ac362c0436</stEvt:instanceID>
                  <stEvt:when>2015-10-03T17:26:55+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6325c653-0cfe-7c48-8ed6-e72bbe216650</stEvt:instanceID>
                  <stEvt:when>2015-10-05T09:20:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:56813a27-0794-d641-95a3-c700d6b42836</stEvt:instanceID>
                  <stEvt:when>2015-11-07T19:33:28+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -387.899 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 387.899 li
377.985 387.899 li
377.985 0 li
cp
clp
307.698 347.24 mo
307.698 347.24 298.258 352.36 292.791 360.329 cv
287.324 368.298 285.833 371.827 289.476 370.049 cv
293.12 368.27 305.54 364.708 305.54 364.708 cv
305.54 364.708 317.963 352.531 307.698 347.24 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.164706 .447059 .67451 rgb
f
340.649 347.24 mo
340.649 347.24 350.089 352.36 355.556 360.329 cv
361.023 368.298 362.514 371.827 358.871 370.049 cv
355.228 368.27 342.808 364.708 342.808 364.708 cv
342.808 364.708 330.384 352.531 340.649 347.24 cv
cp
f
357.234 278.002 mo
377.985 303.446 li
353.049 289.277 li
357.234 278.002 li
cp
f
292.109 277.757 mo
271.358 303.2 li
296.294 289.032 li
292.109 277.757 li
cp
f
348.754 323.942 mo
355.975 321.877 361.266 315.242 361.266 307.357 cv
361.266 301.703 358.535 296.699 354.334 293.55 cv
354.721 291.439 li
355.411 287.682 359.521 275.647 356.91 278.434 cv
354.198 281.328 349.937 285.735 345.315 290.162 cv
344.881 290.129 344.447 290.095 344.005 290.095 cv
335.345 290.095 328.195 296.479 326.954 304.793 cv
325.862 305.298 324.908 305.581 324.143 305.578 cv
323.451 305.574 322.618 305.336 321.687 304.923 cv
320.502 296.545 313.322 290.095 304.617 290.095 cv
304.345 290.095 304.08 290.124 303.811 290.136 cv
299.441 285.733 295.401 281.345 292.745 278.434 cv
290.217 275.663 292.962 286.988 293.476 290.703 cv
293.909 293.833 li
289.921 296.995 287.355 301.872 287.355 307.357 cv
287.355 314.541 291.745 320.696 297.987 323.295 cv
299.568 334.719 li
297.068 336.96 295.626 339.591 295.626 342.407 cv
295.626 346.022 298.003 349.332 301.946 351.901 cv
306.472 384.598 li
306.734 386.49 308.351 387.899 310.261 387.899 cv
311.823 387.899 313.09 386.633 313.09 385.071 cv
313.09 377.483 li
313.09 375.085 315.052 373.122 317.45 373.122 cv
331.467 373.122 li
333.866 373.122 335.829 375.085 335.829 377.483 cv
335.829 385.236 li
335.829 386.707 337.021 387.899 338.492 387.899 cv
340.471 387.899 342.124 386.389 342.301 384.418 cv
342.888 377.903 344.214 363.36 345.507 350.396 cv
348.221 348.091 349.802 345.351 349.802 342.407 cv
349.802 340.066 348.802 337.854 347.03 335.886 cv
347.493 331.785 347.898 328.599 348.192 327 cv
348.754 323.942 li
cp
.172549 .509804 .788235 rgb
f
348.754 323.942 mo
355.975 321.877 361.266 315.242 361.266 307.357 cv
361.266 301.703 358.535 296.699 354.334 293.55 cv
354.721 291.439 li
355.411 287.682 359.521 275.647 356.91 278.434 cv
354.198 281.328 349.937 285.735 345.315 290.162 cv
344.881 290.129 344.447 290.095 344.005 290.095 cv
335.345 290.095 328.195 296.479 326.954 304.793 cv
325.862 305.298 324.908 305.581 324.143 305.578 cv
323.907 305.576 323.65 305.539 323.383 305.485 cv
323.383 373.122 li
331.467 373.122 li
333.866 373.122 335.829 375.085 335.829 377.483 cv
335.829 385.236 li
335.829 386.707 337.021 387.899 338.492 387.899 cv
340.471 387.899 342.124 386.389 342.301 384.418 cv
342.888 377.903 344.214 363.36 345.507 350.396 cv
348.221 348.091 349.802 345.351 349.802 342.407 cv
349.802 340.066 348.802 337.854 347.03 335.886 cv
347.493 331.785 347.898 328.599 348.192 327 cv
348.754 323.942 li
cp
.164706 .447059 .67451 rgb
f
44.8509 21.0916 mo
44.8509 30.3436 37.3507 37.8437 28.0988 37.8437 cv
18.8468 37.8437 11.3466 30.3436 11.3466 21.0916 cv
11.3466 11.8397 18.8468 4.33949 28.0988 4.33949 cv
37.3507 4.33949 44.8509 11.8397 44.8509 21.0916 cv
cp
.329412 .67451 .823529 rgb
f
59.1752 37.8437 mo
59.1752 44.9503 53.4142 50.7113 46.3076 50.7113 cv
39.201 50.7113 33.44 44.9503 33.44 37.8437 cv
33.44 30.7372 39.201 24.9762 46.3076 24.9762 cv
53.4142 24.9762 59.1752 30.7372 59.1752 37.8437 cv
cp
f
82.4825 58.8017 mo
82.4825 66.4281 79.5473 74.3484 76.6897 81.2972 cv
73.1938 89.7984 66.5717 97.527 69.7423 107.222 cv
70.3855 109.189 71.3184 111.492 70.0992 113.164 cv
69.4021 114.12 68.1901 114.531 67.0417 114.816 cv
53.2574 118.24 37.492 111.535 28.0342 101.481 cv
23.3592 96.5114 18.4616 90.372 15.6941 84.1591 cv
12.2524 76.4324 8.67601 67.4065 8.67599 58.8017 cv
8.67599 44.8134 25.1981 33.4736 45.5792 33.4736 cv
65.9603 33.4736 82.4825 44.8134 82.4825 58.8017 cv
cp
f
74.7134 24.4906 mo
74.7134 31.5972 68.9524 37.3582 61.8458 37.3582 cv
54.7392 37.3582 48.9782 31.5972 48.9782 24.4906 cv
48.9782 17.384 54.7392 11.623 61.8458 11.623 cv
68.9524 11.623 74.7134 17.384 74.7134 24.4906 cv
cp
f
61.8458 11.623 mo
61.8343 11.623 61.8229 11.6238 61.8114 11.6239 cv
61.8114 37.3573 li
61.8229 37.3573 61.8343 37.3582 61.8458 37.3582 cv
68.9523 37.3582 74.7134 31.5972 74.7134 24.4906 cv
74.7134 17.384 68.9523 11.623 61.8458 11.623 cv
cp
.290196 .592157 .721569 rgb
f
28.0987 4.33949 mo
27.9331 4.33949 27.7694 4.34718 27.605 4.35197 cv
27.605 37.8313 li
27.7694 37.8361 27.9331 37.8438 28.0987 37.8438 cv
37.3507 37.8438 44.8508 30.3436 44.8508 21.0916 cv
44.8508 11.8397 37.3507 4.33949 28.0987 4.33949 cv
cp
f
179.902 241.395 mo
193.778 241.395 li
200.209 213.222 li
179.902 213.222 li
179.902 241.395 li
cp
.980392 .772549 .109804 rgb
f
203.781 241.395 mo
203.35 236.899 198.177 233.345 191.842 233.345 cv
185.507 233.345 180.333 236.899 179.902 241.395 cv
203.781 241.395 li
cp
f
122.142 214.944 mo
121.674 214.638 121.208 214.386 120.767 214.186 cv
120.735 213.998 120.687 213.813 120.61 213.635 cv
120.282 212.879 119.587 212.356 118.696 212.098 cv
118.545 211.319 118.455 210.52 118.455 209.7 cv
118.455 202.443 124.456 196.51 132.07 195.969 cv
131.918 195.572 131.77 195.175 131.621 194.782 cv
131.388 194.166 131.166 193.546 130.875 192.954 cv
130.796 192.792 130.126 191.762 130.366 191.944 cv
129.656 191.404 129.157 190.659 129.077 189.847 cv
119.102 191.647 111.567 199.849 111.567 209.7 cv
111.567 211.292 111.77 212.838 112.143 214.323 cv
111.268 215.383 110.932 216.609 111.378 217.638 cv
111.389 217.663 111.404 217.685 111.416 217.71 cv
111.323 218.237 111.265 218.826 111.265 219.46 cv
111.265 221.572 111.851 223.284 112.573 223.284 cv
113.295 223.284 113.881 221.572 113.881 219.46 cv
113.881 219.404 113.876 219.353 113.875 219.298 cv
114.059 219.325 114.248 219.344 114.443 219.352 cv
114.467 219.483 114.486 219.611 114.516 219.744 cv
114.975 221.805 115.918 223.349 116.624 223.192 cv
117.329 223.035 117.528 221.237 117.069 219.176 cv
117.049 219.085 117.024 219.002 117.002 218.914 cv
117.119 218.87 117.237 218.826 117.355 218.775 cv
117.43 218.743 117.501 218.706 117.574 218.671 cv
117.66 218.864 117.749 219.058 117.85 219.255 cv
118.818 221.131 120.123 222.385 120.765 222.053 cv
121.407 221.722 121.143 219.932 120.175 218.056 cv
120.011 217.737 119.836 217.446 119.657 217.168 cv
119.805 217.007 119.938 216.841 120.059 216.673 cv
120.265 216.829 120.482 216.984 120.713 217.134 cv
122.481 218.288 124.235 218.733 124.629 218.128 cv
125.024 217.523 123.911 216.097 122.142 214.944 cv
cp
1 .592157 0 rgb
f
234.004 214.944 mo
234.472 214.638 234.938 214.386 235.379 214.186 cv
235.411 213.998 235.459 213.813 235.536 213.635 cv
235.864 212.879 236.559 212.356 237.45 212.098 cv
237.602 211.319 237.691 210.52 237.691 209.7 cv
237.691 202.443 231.69 196.51 224.076 195.969 cv
224.228 195.572 224.376 195.175 224.525 194.782 cv
224.759 194.166 224.981 193.546 225.271 192.954 cv
225.35 192.792 226.02 191.762 225.78 191.944 cv
226.49 191.404 226.989 190.659 227.069 189.847 cv
237.044 191.647 244.579 199.849 244.579 209.7 cv
244.579 211.292 244.376 212.838 244.003 214.323 cv
244.878 215.383 245.214 216.609 244.768 217.638 cv
244.757 217.663 244.742 217.685 244.73 217.71 cv
244.823 218.237 244.881 218.826 244.881 219.46 cv
244.881 221.572 244.296 223.284 243.573 223.284 cv
242.851 223.284 242.265 221.572 242.265 219.46 cv
242.265 219.404 242.27 219.353 242.271 219.298 cv
242.087 219.325 241.898 219.344 241.703 219.352 cv
241.679 219.483 241.66 219.611 241.63 219.744 cv
241.171 221.805 240.228 223.349 239.523 223.192 cv
238.817 223.035 238.618 221.237 239.077 219.176 cv
239.097 219.085 239.122 219.002 239.144 218.914 cv
239.027 218.87 238.909 218.826 238.791 218.775 cv
238.716 218.743 238.645 218.706 238.572 218.671 cv
238.486 218.864 238.397 219.058 238.296 219.255 cv
237.328 221.131 236.023 222.385 235.381 222.053 cv
234.739 221.722 235.003 219.932 235.971 218.056 cv
236.135 217.737 236.31 217.446 236.489 217.168 cv
236.341 217.007 236.208 216.841 236.087 216.673 cv
235.881 216.829 235.664 216.984 235.434 217.134 cv
233.665 218.288 231.911 218.733 231.517 218.128 cv
231.122 217.523 232.235 216.097 234.004 214.944 cv
cp
f
228.2 189.848 mo
228.2 208.13 205.667 219.795 177.871 219.795 cv
150.076 219.795 127.543 208.13 127.543 189.848 cv
127.543 171.567 150.076 156.747 177.871 156.747 cv
205.667 156.747 228.2 171.567 228.2 189.848 cv
cp
.980392 .772549 .109804 rgb
f
201.621 162.28 mo
201.621 175.397 190.988 186.03 177.871 186.03 cv
164.755 186.03 154.122 175.397 154.122 162.28 cv
154.122 149.164 164.755 138.531 177.871 138.531 cv
190.988 138.531 201.621 149.164 201.621 162.28 cv
cp
f
150.905 175.072 mo
150.905 175.774 150.336 176.342 149.635 176.342 cv
148.933 176.342 148.364 175.774 148.364 175.072 cv
148.364 174.37 148.933 173.802 149.635 173.802 cv
150.336 173.802 150.905 174.37 150.905 175.072 cv
cp
.294118 .686275 .309804 rgb
f
155.732 176.596 mo
155.732 177.649 154.879 178.502 153.827 178.502 cv
152.774 178.502 151.921 177.649 151.921 176.596 cv
151.921 175.544 152.774 174.691 153.827 174.691 cv
154.879 174.691 155.732 175.544 155.732 176.596 cv
cp
f
154.144 172.531 mo
154.144 173.058 153.718 173.484 153.192 173.484 cv
152.665 173.484 152.239 173.058 152.239 172.531 cv
152.239 172.005 152.665 171.579 153.192 171.579 cv
153.718 171.579 154.144 172.005 154.144 172.531 cv
cp
f
208.023 173.779 mo
208.023 174.481 207.454 175.049 206.752 175.049 cv
206.051 175.049 205.482 174.481 205.482 173.779 cv
205.482 173.077 206.051 172.509 206.752 172.509 cv
207.454 172.509 208.023 173.077 208.023 173.779 cv
cp
f
196.35 222.905 mo
196.35 223.606 195.781 224.175 195.08 224.175 cv
194.378 224.175 193.809 223.606 193.809 222.905 cv
193.809 222.203 194.378 221.634 195.08 221.634 cv
195.781 221.634 196.35 222.203 196.35 222.905 cv
cp
f
182.87 221.976 mo
182.87 222.414 182.515 222.77 182.076 222.77 cv
181.638 222.77 181.282 222.414 181.282 221.976 cv
181.282 221.537 181.638 221.182 182.076 221.182 cv
182.515 221.182 182.87 221.537 182.87 221.976 cv
cp
f
216.305 182.633 mo
216.305 183.686 215.452 184.539 214.399 184.539 cv
213.347 184.539 212.494 183.686 212.494 182.633 cv
212.494 181.581 213.347 180.728 214.399 180.728 cv
215.452 180.728 216.305 181.581 216.305 182.633 cv
cp
f
133.039 174.813 mo
131.451 176.856 130.173 179.021 129.254 181.283 cv
129.828 181.638 130.499 181.853 131.225 181.853 cv
133.303 181.853 134.988 180.168 134.988 178.09 cv
134.988 176.674 134.196 175.455 133.039 174.813 cv
cp
f
217.566 175.134 mo
217.566 175.66 217.139 176.087 216.613 176.087 cv
216.087 176.087 215.66 175.66 215.66 175.134 cv
215.66 174.608 216.087 174.181 216.613 174.181 cv
217.139 174.181 217.566 174.608 217.566 175.134 cv
cp
f
133.277 183.726 mo
133.277 184.252 132.851 184.678 132.325 184.678 cv
131.799 184.678 131.372 184.252 131.372 183.726 cv
131.372 183.199 131.799 182.773 132.325 182.773 cv
132.851 182.773 133.277 183.199 133.277 183.726 cv
cp
f
137.054 201.775 mo
137.054 202.301 136.627 202.727 136.101 202.727 cv
135.575 202.727 135.148 202.301 135.148 201.775 cv
135.148 201.248 135.575 200.822 136.101 200.822 cv
136.627 200.822 137.054 201.248 137.054 201.775 cv
cp
f
218.142 197.943 mo
218.142 198.305 217.849 198.598 217.487 198.598 cv
217.125 198.598 216.832 198.305 216.832 197.943 cv
216.832 197.582 217.125 197.288 217.487 197.288 cv
217.849 197.288 218.142 197.582 218.142 197.943 cv
cp
f
183.494 232.889 mo
183.494 233.415 183.067 233.842 182.541 233.842 cv
182.015 233.842 181.588 233.415 181.588 232.889 cv
181.588 232.363 182.015 231.937 182.541 231.937 cv
183.067 231.937 183.494 232.363 183.494 232.889 cv
cp
f
170.258 225.923 mo
170.258 226.449 169.832 226.876 169.305 226.876 cv
168.779 226.876 168.353 226.449 168.353 225.923 cv
168.353 225.397 168.779 224.971 169.305 224.971 cv
169.832 224.971 170.258 225.397 170.258 225.923 cv
cp
f
196.977 162.28 mo
196.977 172.832 188.423 181.386 177.871 181.386 cv
167.32 181.386 158.766 172.832 158.766 162.28 cv
158.766 151.729 167.32 143.175 177.871 143.175 cv
188.423 143.175 196.977 151.729 196.977 162.28 cv
cp
1 1 1 rgb
f
193.802 162.28 mo
193.802 171.079 186.67 178.211 177.871 178.211 cv
169.073 178.211 161.941 171.079 161.941 162.28 cv
161.941 153.482 169.073 146.35 177.871 146.35 cv
186.67 146.35 193.802 153.482 193.802 162.28 cv
cp
.294118 .686275 .309804 rgb
f
187.993 162.28 mo
187.993 167.87 183.461 172.402 177.871 172.402 cv
172.282 172.402 167.75 167.87 167.75 162.28 cv
167.75 156.691 172.282 152.159 177.871 152.159 cv
183.461 152.159 187.993 156.691 187.993 162.28 cv
cp
0 0 0 rgb
f
191.372 153.296 mo
191.372 157.544 187.929 160.987 183.681 160.987 cv
179.433 160.987 175.99 157.544 175.99 153.296 cv
175.99 149.048 179.433 145.605 183.681 145.605 cv
187.929 145.605 191.372 149.048 191.372 153.296 cv
cp
1 1 1 rgb
f
214.738 194.386 mo
214.974 202.996 198.126 210.161 177.109 210.39 cv
156.091 210.619 138.861 203.824 138.625 195.214 cv
138.524 191.525 143.212 187.081 148.416 185.367 cv
153.017 183.852 158.132 184.911 162.881 185.452 cv
170.1 186.273 175.832 186.401 182.797 185.24 cv
189.417 184.137 198.697 181.785 205.217 183.828 cv
211.044 185.654 214.631 190.462 214.738 194.386 cv
cp
1 .592157 0 rgb
f
215.23 197.015 mo
215.229 205.626 198.188 212.607 177.167 212.607 cv
156.147 212.607 139.106 205.627 139.105 197.015 cv
139.105 193.325 143.914 188.933 149.164 187.276 cv
153.805 185.811 158.891 186.926 163.624 187.518 cv
170.82 188.418 176.548 188.608 183.543 187.523 cv
190.193 186.492 199.535 184.242 205.998 186.355 cv
211.775 188.244 215.23 193.091 215.23 197.015 cv
cp
.458824 .439216 .419608 rgb
f
180.983 211.762 mo
171.488 212.195 160.714 211.176 157.98 208.745 cv
155.703 206.719 160.684 205.133 165.783 205.142 cv
169.79 205.149 173.174 205.865 177.108 205.8 cv
179.744 205.756 182.297 205.455 184.751 205.101 cv
187.128 204.758 189.69 204.356 192.147 204.611 cv
194.722 204.879 196.433 205.847 196.679 206.821 cv
197.414 209.726 189.743 211.362 180.983 211.762 cv
cp
.294118 .686275 .309804 rgb
f
149.746 196.785 mo
156.379 194.731 163.756 196.965 170.566 196.721 cv
179.354 196.407 186.96 192.588 195.707 192.384 cv
199.319 192.299 203.064 192.287 206.425 193.659 cv
207.634 194.151 214.078 198.164 212.586 199.896 cv
213.529 198.801 213.911 197.38 213.859 196.003 cv
213.735 192.775 211.283 189.833 208.085 188.286 cv
202.577 185.622 193.869 186.561 187.933 187.541 cv
178.557 189.089 169.998 189.355 160.604 187.929 cv
154.737 187.038 149.271 187.506 144.465 190.775 cv
140.244 193.648 138.227 199.243 143.368 202.561 cv
143.499 201.824 143.817 201.113 144.293 200.497 cv
145.775 198.58 147.648 197.435 149.746 196.785 cv
cp
1 1 1 rgb
f
175.841 241.395 mo
161.964 241.395 li
155.534 213.222 li
175.841 213.222 li
175.841 241.395 li
cp
.980392 .772549 .109804 rgb
f
175.841 241.395 mo
161.964 241.395 li
155.534 213.222 li
175.841 213.222 li
175.841 241.395 li
cp
f
177.871 216.54 mo
150.524 216.54 128.287 205.826 127.577 188.969 cv
127.565 189.262 127.543 189.553 127.543 189.848 cv
127.543 208.13 150.076 219.795 177.871 219.795 cv
205.667 219.795 228.2 208.13 228.2 189.848 cv
228.2 189.553 228.178 189.262 228.166 188.969 cv
227.455 205.826 205.219 216.54 177.871 216.54 cv
cp
1 .592157 0 rgb
f
177.167 215.862 mo
165.181 215.862 154.379 213.989 146.736 210.99 cv
153.682 214.772 164.726 217.217 177.167 217.217 cv
189.608 217.217 200.653 214.772 207.599 210.99 cv
199.956 213.989 189.154 215.862 177.167 215.862 cv
cp
.992157 .337255 .129412 rgb
f
175.841 241.395 mo
175.41 236.899 170.236 233.345 163.901 233.345 cv
157.566 233.345 152.392 236.899 151.962 241.395 cv
175.841 241.395 li
cp
.980392 .772549 .109804 rgb
f
191.412 230.103 mo
191.412 231.155 190.559 232.008 189.507 232.008 cv
188.454 232.008 187.601 231.155 187.601 230.103 cv
187.601 229.05 188.454 228.197 189.507 228.197 cv
190.559 228.197 191.412 229.05 191.412 230.103 cv
cp
.294118 .686275 .309804 rgb
f
161.923 222.208 mo
161.923 222.876 161.382 223.417 160.714 223.417 cv
160.046 223.417 159.505 222.876 159.505 222.208 cv
159.505 221.54 160.046 220.999 160.714 220.999 cv
161.382 220.999 161.923 221.54 161.923 222.208 cv
cp
f
165.87 233.586 mo
165.87 234.638 165.017 235.491 163.965 235.491 cv
162.913 235.491 162.059 234.638 162.059 233.586 cv
162.059 232.533 162.913 231.68 163.965 231.68 cv
165.017 231.68 165.87 232.533 165.87 233.586 cv
cp
f
175.841 224.091 mo
175.604 224.045 175.361 224.018 175.11 224.018 cv
173.032 224.018 171.347 225.703 171.347 227.781 cv
171.347 229.859 173.032 231.544 175.11 231.544 cv
175.361 231.544 175.604 231.517 175.841 231.47 cv
175.841 224.091 li
cp
f
173.161 49.5898 mo
165.776 56.9753 li
150.876 42.0757 li
158.261 34.6902 li
173.161 49.5898 li
cp
.333333 .223529 .509804 rgb
f
168.27 37.4009 mo
168.27 45.2227 161.929 51.5635 154.107 51.5635 cv
146.286 51.5635 139.945 45.2227 139.945 37.4009 cv
139.945 29.5791 146.286 23.2382 154.107 23.2382 cv
161.929 23.2382 168.27 29.5791 168.27 37.4009 cv
cp
.576471 .396078 .721569 rgb
f
164.136 47.3994 mo
166.69 44.8376 168.27 41.304 168.27 37.4009 cv
168.27 29.579 161.929 23.2382 154.107 23.2382 cv
150.162 23.2382 146.596 24.8548 144.028 27.4581 cv
164.136 47.3994 li
cp
.443137 .301961 .517647 rgb
f
201.44 56.9753 mo
194.055 49.5898 li
208.954 34.6902 li
216.34 42.0757 li
201.44 56.9753 li
cp
.333333 .223529 .509804 rgb
f
227.189 37.4009 mo
227.189 45.2227 220.849 51.5635 213.027 51.5635 cv
205.205 51.5635 198.864 45.2227 198.864 37.4009 cv
198.864 29.5791 205.205 23.2382 213.027 23.2382 cv
220.849 23.2382 227.189 29.5791 227.189 37.4009 cv
cp
.576471 .396078 .721569 rgb
f
223.262 27.629 mo
202.471 46.8203 li
205.065 49.7246 208.827 51.5635 213.027 51.5635 cv
220.849 51.5635 227.189 45.2227 227.189 37.4009 cv
227.189 33.6079 225.69 30.1713 223.262 27.629 cv
cp
.443137 .301961 .517647 rgb
f
192.376 51.1869 mo
174.759 51.1869 li
174.759 30.1157 li
192.376 30.1157 li
192.376 51.1869 li
cp
.333333 .223529 .509804 rgb
f
201.529 17.9624 mo
201.529 27.8827 193.487 35.9248 183.567 35.9248 cv
173.647 35.9248 165.605 27.8827 165.605 17.9624 cv
165.605 8.04204 173.647 0 183.567 0 cv
193.487 0 201.529 8.04204 201.529 17.9624 cv
cp
.576471 .396078 .721569 rgb
f
183.743 .00888498 mo
183.743 35.9159 li
193.582 35.8203 201.529 27.8233 201.529 17.9624 cv
201.529 8.10148 193.582 .104438 183.743 .00888498 cv
cp
.443137 .301961 .517647 rgb
f
208.002 79.3009 mo
208.002 100.021 196.944 116.819 183.303 116.819 cv
169.663 116.819 158.605 100.021 158.605 79.3009 cv
158.605 58.5804 169.663 41.7831 183.303 41.7831 cv
196.944 41.7831 208.002 58.5804 208.002 79.3009 cv
cp
.576471 .396078 .721569 rgb
f
183.303 100.923 mo
171.459 100.923 161.566 88.2545 159.166 71.3529 cv
158.802 73.9155 158.605 76.5729 158.605 79.3009 cv
158.605 100.021 169.663 116.819 183.303 116.819 cv
196.944 116.819 208.002 100.021 208.002 79.3009 cv
208.002 76.5729 207.805 73.9155 207.441 71.3529 cv
205.04 88.2545 195.148 100.923 183.303 100.923 cv
cp
.443137 .301961 .517647 rgb
f
198.736 17.9624 mo
198.736 26.34 191.945 33.1315 183.567 33.1315 cv
175.189 33.1315 168.398 26.34 168.398 17.9624 cv
168.398 9.58475 175.189 2.79333 183.567 2.79333 cv
191.945 2.79333 198.736 9.58475 198.736 17.9624 cv
cp
1 1 1 rgb
f
196.215 17.9624 mo
196.215 24.9477 190.552 30.6105 183.567 30.6105 cv
176.582 30.6105 170.919 24.9477 170.919 17.9624 cv
170.919 10.977 176.582 5.3143 183.567 5.3143 cv
190.552 5.3143 196.215 10.977 196.215 17.9624 cv
cp
.12549 .584314 .94902 rgb
f
191.603 17.9624 mo
191.603 22.4004 188.005 25.9981 183.567 25.9981 cv
179.129 25.9981 175.531 22.4004 175.531 17.9624 cv
175.531 13.5244 179.129 9.92665 183.567 9.92665 cv
188.005 9.92665 191.603 13.5244 191.603 17.9624 cv
cp
0 0 0 rgb
f
194.286 10.8291 mo
194.286 14.2016 191.552 16.9355 188.179 16.9355 cv
184.807 16.9355 182.073 14.2016 182.073 10.8291 cv
182.073 7.45659 184.807 4.72264 188.179 4.72264 cv
191.552 4.72264 194.286 7.45659 194.286 10.8291 cv
cp
1 1 1 rgb
f
165.388 37.4009 mo
165.388 43.6309 160.337 48.6814 154.107 48.6814 cv
147.877 48.6814 142.827 43.6309 142.827 37.4009 cv
142.827 31.1708 147.877 26.1204 154.107 26.1204 cv
160.337 26.1204 165.388 31.1708 165.388 37.4009 cv
cp
f
163.513 37.4009 mo
163.513 42.5956 159.302 46.8067 154.107 46.8067 cv
148.913 46.8067 144.702 42.5956 144.702 37.4009 cv
144.702 32.2062 148.913 27.9951 154.107 27.9951 cv
159.302 27.9951 163.513 32.2062 163.513 37.4009 cv
cp
.12549 .584314 .94902 rgb
f
160.083 37.4009 mo
160.083 40.7012 157.408 43.3767 154.107 43.3767 cv
150.807 43.3767 148.132 40.7012 148.132 37.4009 cv
148.132 34.1005 150.807 31.4251 154.107 31.4251 cv
157.408 31.4251 160.083 34.1005 160.083 37.4009 cv
cp
0 0 0 rgb
f
162.078 32.0962 mo
162.078 34.6041 160.045 36.6373 157.537 36.6373 cv
155.029 36.6373 152.996 34.6041 152.996 32.0962 cv
152.996 29.5882 155.029 27.5551 157.537 27.5551 cv
160.045 27.5551 162.078 29.5882 162.078 32.0962 cv
cp
1 1 1 rgb
f
203.999 64.6888 mo
203.999 80.6412 194.733 93.5731 183.303 93.5731 cv
171.874 93.5731 162.608 80.6414 162.608 64.6873 cv
162.608 60.7861 163.228 56.8284 164.584 53.1512 cv
166.094 49.0558 168.426 46.1752 172.131 43.7398 cv
175.221 41.7081 178.258 41.2116 181.912 40.9089 cv
183.322 40.7921 184.735 40.6753 186.149 40.7205 cv
188.498 40.7956 190.815 41.3185 193.03 42.0815 cv
202.772 45.4367 203.999 55.5339 203.999 64.6888 cv
cp
.576471 .396078 .721569 rgb
f
203.64 66.596 mo
203.64 82.6929 194.535 95.7419 183.303 95.7419 cv
172.072 95.7419 162.967 82.693 162.967 66.5945 cv
162.967 62.658 163.576 58.6645 164.909 54.954 cv
166.393 50.8215 168.684 47.9148 172.324 45.4574 cv
175.361 43.4073 178.346 42.9063 181.936 42.6009 cv
183.321 42.483 184.71 42.3651 186.1 42.4107 cv
188.408 42.4865 190.685 43.0142 192.862 43.7841 cv
202.434 47.1696 203.64 57.3583 203.64 66.596 cv
cp
.156863 .196078 .305882 rgb
f
169.678 80.9451 mo
170.5 74.4518 176.405 69.0439 182.934 68.5815 cv
189.462 68.1191 195.974 72.4914 198.223 78.6377 cv
198.528 79.4706 198.765 80.3488 198.71 81.234 cv
198.661 82.0372 198.376 82.8055 198.07 83.5499 cv
197.061 86.0072 195.76 88.4043 193.817 90.2156 cv
188.829 94.8646 180.671 94.4763 174.721 91.1459 cv
173.089 90.2326 171.514 89.075 170.609 87.4389 cv
169.502 85.4364 169.547 83.021 169.622 80.7337 cv
169.678 80.9451 li
cp
0 0 0 rgb
f
183.336 43.824 mo
183.325 43.824 183.314 43.824 183.304 43.824 cv
179.447 43.824 175.682 45.0374 172.47 47.1529 cv
170.674 48.3351 168.995 49.838 167.738 51.5887 cv
166.989 52.6324 165.11 55.4432 166.432 56.6117 cv
167.273 57.3551 169.081 56.4259 170.026 56.2754 cv
171.55 56.033 171.498 54.6556 171.658 53.255 cv
171.429 55.2682 173.546 55.6013 174.92 55.49 cv
176.66 55.3491 178.41 55.7024 180.149 55.722 cv
180.952 55.731 182.012 55.9732 182.665 55.5111 cv
183.358 55.0199 183.813 53.6532 184.014 52.8733 cv
184.018 53.763 184.136 54.6521 184.362 55.5125 cv
184.382 55.5881 184.405 55.667 184.46 55.7227 cv
184.538 55.8019 184.659 55.8142 184.77 55.822 cv
185.805 55.8938 186.84 55.9401 187.875 56.006 cv
189.593 56.1152 191.679 56.674 193.377 56.4628 cv
195.114 56.2468 194.706 53.9961 194.522 52.5195 cv
194.963 53.5882 195.403 54.6568 195.844 55.7255 cv
196.463 57.2276 198.149 57.6348 199.64 56.7949 cv
202.747 55.0451 197.263 48.5597 195.837 47.3039 cv
192.218 44.1167 187.906 43.8319 183.336 43.824 cv
cp
1 1 1 rgb
f
183.303 100.348 mo
178.257 100.348 173.708 98.4299 170.491 95.359 cv
173.415 99.2319 178.065 101.737 183.303 101.737 cv
188.541 101.737 193.192 99.2319 196.116 95.359 cv
192.898 98.4299 188.35 100.348 183.303 100.348 cv
cp
.333333 .223529 .509804 rgb
f
185.024 92.8307 mo
181.409 93.24 177.307 92.2774 176.266 89.9811 cv
175.399 88.0677 177.296 86.5699 179.237 86.5783 cv
180.762 86.585 182.051 87.2611 183.549 87.1996 cv
184.552 87.1584 185.524 86.874 186.458 86.5395 cv
187.363 86.2157 188.339 85.8358 189.274 86.0769 cv
190.254 86.3295 190.906 87.2437 190.999 88.1643 cv
191.279 90.9076 188.359 92.453 185.024 92.8307 cv
cp
.721569 .192157 .184314 rgb
f
185.895 68.2198 mo
185.959 67.9474 185.764 67.6666 185.513 67.5429 cv
185.262 67.4191 184.971 67.4169 184.691 67.4271 cv
184.144 67.447 182.998 67.4273 182.663 67.9788 cv
182.146 68.83 183.346 69.5807 183.497 70.2975 cv
183.566 70.6234 183.388 70.9458 183.209 71.2273 cv
182.915 71.6919 182.597 72.1632 182.502 72.705 cv
182.359 73.526 183.04 74.4909 183.891 74.5775 cv
184.339 74.6231 184.793 74.4494 185.139 74.1614 cv
186.658 72.8997 185.193 72.1166 184.984 70.7663 cv
184.871 70.0387 185.068 69.2504 185.564 68.6981 cv
185.696 68.5522 185.85 68.4108 185.895 68.2198 cv
cp
.156863 .196078 .305882 rgb
f
183.291 90.1011 mo
182.179 90.1488 180.7 90.3998 181.343 91.4818 cv
180.936 90.7966 180.377 89.9072 179.625 89.59 cv
179.185 89.4044 177.753 89.1729 177.317 89.4223 cv
177.06 89.5698 176.533 90.5464 176.708 90.7608 cv
175.814 89.6649 175.463 89.0145 174.132 88.6384 cv
174 88.6014 172.194 88.25 172.388 87.9385 cv
171.557 89.2765 172.632 89.8127 173.708 90.6984 cv
174.628 91.4558 175.619 92.1301 176.675 92.6836 cv
178.719 93.7547 180.991 94.3617 183.304 94.3617 cv
185.52 94.3616 187.702 93.805 189.68 92.8129 cv
190.593 92.3547 194.856 90.2889 194.442 89.0618 cv
193.938 87.568 190.689 89.0029 189.857 89.2998 cv
189.023 89.5977 186.824 90.3232 187.365 91.6147 cv
186.684 89.9896 185.786 90.1536 184.284 90.1012 cv
184.111 90.0951 183.73 90.0823 183.291 90.1011 cv
cp
1 1 1 rgb
f
184.1 73.3458 mo
183.966 73.2136 183.771 73.16 183.595 73.0794 cv
183.429 73.0031 183.242 72.9033 183.203 72.7243 cv
183.19 72.6668 183.191 72.5993 183.147 72.561 cv
183.106 72.5262 183.042 72.5328 182.998 72.5636 cv
182.955 72.5943 182.928 72.6436 182.908 72.6929 cv
182.73 73.1198 182.904 73.7633 183.32 73.9896 cv
183.725 74.2099 184.566 74.0506 184.173 73.4349 cv
184.151 73.4015 184.127 73.3721 184.1 73.3458 cv
cp
.431373 .427451 .509804 rgb
f
224.307 37.4009 mo
224.307 43.6309 219.257 48.6814 213.027 48.6814 cv
206.797 48.6814 201.746 43.6309 201.746 37.4009 cv
201.746 31.1708 206.797 26.1204 213.027 26.1204 cv
219.257 26.1204 224.307 31.1708 224.307 37.4009 cv
cp
1 1 1 rgb
f
222.433 37.4009 mo
222.433 42.5956 218.221 46.8067 213.027 46.8067 cv
207.832 46.8067 203.621 42.5956 203.621 37.4009 cv
203.621 32.2062 207.832 27.9951 213.027 27.9951 cv
218.221 27.9951 222.433 32.2062 222.433 37.4009 cv
cp
.12549 .584314 .94902 rgb
f
219.003 37.4009 mo
219.003 40.7012 216.327 43.3767 213.027 43.3767 cv
209.726 43.3767 207.051 40.7012 207.051 37.4009 cv
207.051 34.1005 209.726 31.4251 213.027 31.4251 cv
216.327 31.4251 219.003 34.1005 219.003 37.4009 cv
cp
0 0 0 rgb
f
220.998 32.0962 mo
220.998 34.6041 218.965 36.6373 216.457 36.6373 cv
213.949 36.6373 211.916 34.6041 211.916 32.0962 cv
211.916 29.5882 213.949 27.5551 216.457 27.5551 cv
218.965 27.5551 220.998 29.5882 220.998 32.0962 cv
cp
1 1 1 rgb
f
334.114 98.4228 mo
336.016 98.9273 338.435 98.4705 339.283 96.9441 cv
340.234 95.2324 339.128 90.9772 337.025 90.5024 cv
335.247 90.1008 332.188 93.4692 331.744 94.8522 cv
331.132 96.7567 332.417 97.9725 334.114 98.4228 cv
cp
.333333 .223529 .509804 rgb
f
299.831 98.4228 mo
297.93 98.9273 295.51 98.4705 294.662 96.9441 cv
293.711 95.2324 294.818 90.9772 296.92 90.5024 cv
298.698 90.1008 301.757 93.4692 302.202 94.8522 cv
302.813 96.7567 301.529 97.9725 299.831 98.4228 cv
cp
f
303.424 95.1183 mo
301.423 93.4028 291.423 84.5935 291.066 79.5933 cv
290.691 74.3437 301.148 67.0938 303.249 65.6936 cv
305.013 68.3401 li
299.706 71.8813 294.077 77.1044 294.239 79.3665 cv
294.432 82.0744 300.936 88.7955 305.494 92.7032 cv
303.424 95.1183 li
cp
.137255 .121569 .12549 rgb
f
332.709 95.1183 mo
330.638 92.7032 li
335.196 88.7955 341.701 82.0744 341.895 79.3665 cv
342.073 76.8637 335.571 71.3074 331.12 68.3401 cv
332.884 65.6936 li
334.985 67.0938 345.442 74.3437 345.068 79.5933 cv
344.71 84.5943 334.71 93.4028 332.709 95.1183 cv
cp
f
339.665 49.1384 mo
339.665 61.2157 330.044 71.0063 318.177 71.0063 cv
306.309 71.0063 296.689 61.2157 296.689 49.1384 cv
296.689 37.0611 306.309 27.2705 318.177 27.2705 cv
330.044 27.2705 339.665 37.0611 339.665 49.1384 cv
cp
.576471 .396078 .721569 rgb
f
336.268 107.1 mo
334.241 107.1 332.54 108.049 331.92 109.361 cv
333.838 100.941 334.971 90.7839 334.971 79.8162 cv
334.971 50.8306 327.138 27.3331 317.476 27.3331 cv
307.814 27.3331 299.982 50.8306 299.982 79.8162 cv
299.982 90.8477 301.127 101.061 303.065 109.51 cv
302.509 108.121 300.746 107.102 298.643 107.102 cv
296.202 107.102 294.208 108.471 294.042 110.204 cv
303.243 110.204 li
303.242 110.192 303.236 110.181 303.235 110.169 cv
306.408 104.313 311.601 100.491 317.476 100.491 cv
323.333 100.491 328.512 104.291 331.687 110.115 cv
331.683 110.145 331.67 110.172 331.667 110.201 cv
340.868 110.201 li
340.702 108.469 338.708 107.1 336.268 107.1 cv
cp
f
360.542 36.7457 mo
360.542 52.509 341.261 65.2877 317.476 65.2877 cv
293.692 65.2877 274.411 52.509 274.411 36.7457 cv
274.411 20.9824 293.692 8.2037 317.476 8.2037 cv
341.261 8.2037 360.542 20.9824 360.542 36.7457 cv
cp
f
330.007 64.0819 mo
327.519 68.2222 322.997 71.0014 317.815 71.0014 cv
312.244 71.0014 307.433 67.792 305.097 63.1281 cv
304.246 67.9039 303.769 73.2483 303.769 78.8922 cv
303.769 84.6515 302.541 93.5619 309.741 95.2621 cv
311.686 95.7214 315.152 93.3361 317.472 93.3361 cv
320.858 93.336 324.574 96.6127 327.817 95.0526 cv
328.199 94.8685 328.541 94.6279 328.846 94.3393 cv
332.119 91.2436 331.175 82.6223 331.175 78.8922 cv
331.175 73.6199 330.756 68.6122 330.007 64.0819 cv
cp
.698039 .576471 .768627 rgb
f
360.73 27.2413 mo
360.73 36.8247 352.961 44.5935 343.378 44.5935 cv
333.795 44.5935 326.026 36.8247 326.026 27.2413 cv
326.026 17.658 333.795 9.88921 343.378 9.88921 cv
352.961 9.88921 360.73 17.658 360.73 27.2413 cv
cp
.576471 .396078 .721569 rgb
f
308.629 27.2413 mo
308.629 36.8247 300.86 44.5935 291.277 44.5935 cv
281.693 44.5935 273.925 36.8247 273.925 27.2413 cv
273.925 17.658 281.693 9.88921 291.277 9.88921 cv
300.86 9.88921 308.629 17.658 308.629 27.2413 cv
cp
f
320.757 59.8143 mo
320.757 61.1715 319.44 62.2717 317.815 62.2717 cv
316.191 62.2717 314.874 61.1715 314.874 59.8143 cv
314.874 58.4572 316.191 57.357 317.815 57.357 cv
319.44 57.357 320.757 58.4572 320.757 59.8143 cv
cp
.698039 .576471 .768627 rgb
f
320.273 60.6095 mo
320.273 61.9667 319.172 63.0669 317.815 63.0669 cv
316.458 63.0669 315.358 61.9667 315.358 60.6095 cv
315.358 59.2524 316.458 58.1522 317.815 58.1522 cv
319.172 58.1522 320.273 59.2524 320.273 60.6095 cv
cp
.156863 .196078 .305882 rgb
f
301.07 13.3951 mo
277.97 28.5209 li
278.444 36.9023 285.371 43.558 293.871 43.558 cv
302.678 43.558 309.818 36.4183 309.818 27.611 cv
309.818 21.3972 306.256 16.0269 301.07 13.3951 cv
cp
1 1 1 rgb
f
298.42 15.13 mo
280.616 26.7884 li
280.599 27.0619 280.574 27.3333 280.574 27.611 cv
280.574 34.9546 286.527 40.9078 293.871 40.9078 cv
301.214 40.9078 307.168 34.9546 307.168 27.611 cv
307.168 21.868 303.52 16.99 298.42 15.13 cv
cp
.984314 .627451 .14902 rgb
f
293.871 40.9078 mo
297.006 40.9078 299.882 39.8162 302.155 38.0014 cv
301.387 34.1264 297.971 31.2042 293.871 31.2042 cv
289.77 31.2042 286.355 34.1264 285.587 38.0014 cv
287.86 39.8162 290.736 40.9078 293.871 40.9078 cv
cp
0 0 0 rgb
f
274.214 30.4647 mo
307.804 8.98559 li
274.214 30.4647 li
cp
f
273.785 29.7948 mo
307.804 8.98557 li
274.642 31.1346 li
273.785 29.7948 li
cp
f
301.21 32.1186 mo
301.21 33.6394 299.977 34.8722 298.457 34.8722 cv
296.936 34.8722 295.703 33.6394 295.703 32.1186 cv
295.703 30.5979 296.936 29.3651 298.457 29.3651 cv
299.977 29.3651 301.21 30.5979 301.21 32.1186 cv
cp
1 1 1 rgb
f
333.444 13.3951 mo
328.257 16.0269 324.696 21.3972 324.696 27.611 cv
324.696 36.4183 331.835 43.558 340.643 43.558 cv
349.143 43.558 356.07 36.9023 356.544 28.5209 cv
333.444 13.3951 li
cp
f
336.093 15.13 mo
330.994 16.99 327.346 21.868 327.346 27.611 cv
327.346 34.9546 333.299 40.9078 340.643 40.9078 cv
347.986 40.9078 353.939 34.9546 353.939 27.611 cv
353.939 27.3333 353.915 27.0619 353.898 26.7884 cv
336.093 15.13 li
cp
.984314 .627451 .14902 rgb
f
340.643 40.9078 mo
337.508 40.9078 334.632 39.8162 332.359 38.0014 cv
333.127 34.1264 336.542 31.2042 340.643 31.2042 cv
344.743 31.2042 348.159 34.1264 348.927 38.0014 cv
346.654 39.8162 343.778 40.9078 340.643 40.9078 cv
cp
0 0 0 rgb
f
360.3 30.4647 mo
326.71 8.98559 li
360.3 30.4647 li
cp
f
360.728 29.7948 mo
326.71 8.98557 li
359.872 31.1346 li
360.728 29.7948 li
cp
f
348.883 32.1186 mo
348.883 33.6394 347.65 34.8722 346.129 34.8722 cv
344.608 34.8722 343.376 33.6394 343.376 32.1186 cv
343.376 30.5979 344.608 29.3651 346.129 29.3651 cv
347.65 29.3651 348.883 30.5979 348.883 32.1186 cv
cp
1 1 1 rgb
f
314.247 213.105 mo
314.352 203.615 306.017 198.904 298.226 203.855 cv
293.878 206.617 291.456 211.726 290.818 217.149 cv
290.2 222.397 293.023 227.693 295.257 232.206 cv
297.701 237.145 301.512 244.703 305.847 247.802 cv
311.069 251.535 309.652 244.243 309.476 241.261 cv
309.174 236.151 309.719 230.976 311.093 226.091 cv
312.097 222.519 313.541 219.077 314.069 215.378 cv
314.181 214.594 314.239 213.835 314.247 213.105 cv
cp
0 .658824 .521569 rgb
f
327.831 213.105 mo
327.727 203.615 336.062 198.904 343.853 203.855 cv
348.201 206.617 350.623 211.726 351.261 217.149 cv
351.879 222.397 349.055 227.693 346.822 232.206 cv
344.378 237.145 340.567 244.703 336.231 247.802 cv
331.009 251.535 332.426 244.243 332.603 241.261 cv
332.904 236.151 332.36 230.976 330.986 226.091 cv
329.981 222.519 328.538 219.077 328.009 215.378 cv
327.897 214.594 327.839 213.835 327.831 213.105 cv
cp
f
316.27 145.041 mo
314.866 145.303 313.591 146.152 312.16 146.304 cv
310.952 146.432 309.467 146.417 308.267 146.302 cv
307.839 146.261 307.328 146.115 307.225 145.698 cv
307.178 145.51 307.231 145.315 307.246 145.122 cv
307.37 143.497 305.501 143.549 304.415 143.379 cv
304.072 143.325 303.625 143.115 303.724 142.782 cv
303.76 142.662 303.864 142.576 303.965 142.501 cv
305.001 141.728 306.168 141.283 307.436 141.103 cv
308.195 140.996 310.118 140.555 310.797 140.836 cv
310.087 140.542 309.426 140.133 308.847 139.629 cv
308.614 139.425 308.376 139.161 308.406 138.853 cv
308.43 138.612 308.614 138.42 308.799 138.262 cv
310.664 136.676 313.423 136.656 315.789 137.281 cv
318.156 137.907 320.356 139.079 322.739 139.64 cv
322.708 139.633 324.013 138.242 324.179 138.125 cv
324.81 137.68 325.568 137.339 326.329 137.194 cv
327.126 137.043 328.926 137.093 329.341 137.977 cv
329.685 138.712 327.586 140.551 328.693 140.941 cv
328.865 141.002 329.055 140.955 329.231 140.908 cv
330.46 140.579 331.768 140.041 333.058 140.041 cv
333.852 139.938 334.652 139.834 335.452 139.875 cv
336.309 139.919 341.461 140.732 340.889 142.365 cv
340.768 142.708 340.388 142.872 340.047 142.998 cv
339.366 143.25 337.908 143.477 337.462 144.081 cv
337.066 144.616 337.603 145.715 337.084 146.132 cv
336.977 146.217 336.829 146.22 336.692 146.219 cv
332.702 146.202 328.696 146.183 324.747 145.612 cv
321.929 145.205 319.069 144.519 316.27 145.041 cv
cp
.156863 .196078 .305882 rgb
f
300.786 163.377 mo
301.193 162.777 301.618 162.189 302.062 161.616 cv
304.823 158.042 307.758 155.103 309.704 150.923 cv
310.369 149.495 311.981 143.457 314.326 143.887 cv
310.159 143.123 305.794 144.146 301.87 145.54 cv
299.798 146.277 297.78 147.165 295.815 148.152 cv
294.778 148.672 293.139 149.31 292.477 150.303 cv
291.145 152.299 295.384 151.839 296.479 151.92 cv
295.807 151.87 293.924 153.951 293.416 154.409 cv
292.601 155.144 291.566 155.946 290.896 156.806 cv
288.985 159.262 293.178 158.576 294.454 158.417 cv
294.583 158.401 292.949 161.232 292.872 161.359 cv
292.086 162.653 291.444 164.035 290.964 165.471 cv
290.805 165.949 290.776 166.652 291.265 166.773 cv
291.48 166.827 291.699 166.725 291.897 166.626 cv
292.879 166.134 293.86 165.641 294.841 165.149 cv
294.116 168.111 295.008 171.202 295.893 174.119 cv
296.902 170.297 298.568 166.65 300.786 163.377 cv
cp
f
340.032 163.377 mo
339.625 162.777 339.2 162.189 338.757 161.616 cv
335.996 158.042 333.061 155.103 331.115 150.923 cv
330.45 149.495 328.838 143.457 326.492 143.887 cv
330.66 143.123 335.025 144.146 338.948 145.54 cv
341.021 146.277 343.039 147.165 345.004 148.152 cv
346.04 148.672 347.679 149.31 348.342 150.303 cv
349.674 152.299 345.435 151.839 344.34 151.92 cv
345.011 151.87 346.895 153.951 347.402 154.409 cv
348.217 155.144 349.252 155.946 349.922 156.806 cv
351.834 159.262 347.641 158.576 346.365 158.417 cv
346.235 158.401 347.869 161.232 347.946 161.359 cv
348.733 162.653 349.375 164.035 349.854 165.471 cv
350.014 165.949 350.042 166.652 349.554 166.773 cv
349.339 166.827 349.119 166.725 348.921 166.626 cv
347.94 166.134 346.958 165.641 345.977 165.149 cv
346.702 168.111 345.81 171.202 344.925 174.119 cv
343.916 170.297 342.25 166.65 340.032 163.377 cv
cp
f
338.976 171.623 mo
338.382 172.888 337.784 174.153 337.287 175.457 cv
336.135 178.478 335.548 181.937 336.844 184.899 cv
337.395 186.159 338.263 187.272 338.718 188.57 cv
340.273 193.007 336.874 198.863 333.5 201.564 cv
329.752 204.563 325.142 206.406 320.311 206.406 cv
314.825 206.406 310.41 203.837 305.884 201.081 cv
301.82 198.606 302.36 193.567 303.388 189.358 cv
304.367 185.351 305.69 180.994 303.949 177.254 cv
303.353 175.974 302.436 174.877 301.659 173.7 cv
292.75 160.2 305.221 142.675 320.311 142.675 cv
331.777 142.675 344.822 154.411 341.079 166.538 cv
340.538 168.294 339.759 169.959 338.976 171.623 cv
cp
.101961 .737255 .611765 rgb
f
321.039 230.595 mo
299.798 230.595 282.579 219.54 282.579 205.903 cv
282.579 192.267 299.798 181.212 321.039 181.212 cv
342.28 181.212 359.499 192.267 359.499 205.903 cv
359.499 219.54 342.28 230.595 321.039 230.595 cv
cp
f
292.185 197.757 mo
292.185 198.417 291.65 198.952 290.99 198.952 cv
290.33 198.952 289.796 198.417 289.796 197.757 cv
289.796 197.097 290.33 196.563 290.99 196.563 cv
291.65 196.563 292.185 197.097 292.185 197.757 cv
cp
0 .658824 .521569 rgb
f
296.725 199.191 mo
296.725 200.181 295.922 200.983 294.933 200.983 cv
293.943 200.983 293.141 200.181 293.141 199.191 cv
293.141 198.201 293.943 197.399 294.933 197.399 cv
295.922 197.399 296.725 198.201 296.725 199.191 cv
cp
f
295.231 195.368 mo
295.231 195.863 294.83 196.264 294.335 196.264 cv
293.84 196.264 293.439 195.863 293.439 195.368 cv
293.439 194.873 293.84 194.472 294.335 194.472 cv
294.83 194.472 295.231 194.873 295.231 195.368 cv
cp
f
337.825 162.18 mo
337.825 171.822 330.009 179.638 320.367 179.638 cv
310.725 179.638 302.909 171.822 302.909 162.18 cv
302.909 152.538 310.725 144.722 320.367 144.722 cv
330.009 144.722 337.825 152.538 337.825 162.18 cv
cp
f
335.24 162.18 mo
335.24 170.394 328.581 177.053 320.367 177.053 cv
312.153 177.053 305.494 170.394 305.494 162.18 cv
305.494 153.966 312.153 147.307 320.367 147.307 cv
328.581 147.307 335.24 153.966 335.24 162.18 cv
cp
1 1 1 rgb
f
332.768 162.18 mo
332.768 169.029 327.216 174.581 320.367 174.581 cv
313.518 174.581 307.966 169.029 307.966 162.18 cv
307.966 155.331 313.518 149.779 320.367 149.779 cv
327.216 149.779 332.768 155.331 332.768 162.18 cv
cp
.980392 .772549 .109804 rgb
f
328.246 162.18 mo
328.246 166.531 324.718 170.059 320.367 170.059 cv
316.016 170.059 312.488 166.531 312.488 162.18 cv
312.488 157.828 316.016 154.301 320.367 154.301 cv
324.718 154.301 328.246 157.828 328.246 162.18 cv
cp
0 0 0 rgb
f
330.877 155.186 mo
330.877 158.492 328.196 161.173 324.889 161.173 cv
321.583 161.173 318.902 158.492 318.902 155.186 cv
318.902 151.879 321.583 149.198 324.889 149.198 cv
328.196 149.198 330.877 151.879 330.877 155.186 cv
cp
1 1 1 rgb
f
334.165 191.233 mo
334.165 198.372 328.378 204.16 321.239 204.16 cv
314.1 204.16 308.313 198.372 308.313 191.233 cv
308.313 184.094 314.1 178.307 321.239 178.307 cv
328.378 178.307 334.165 184.094 334.165 191.233 cv
cp
0 .658824 .521569 rgb
f
332.299 191.233 mo
332.299 197.342 327.347 202.294 321.239 202.294 cv
315.131 202.294 310.179 197.342 310.179 191.233 cv
310.179 185.125 315.131 180.173 321.239 180.173 cv
327.347 180.173 332.299 185.125 332.299 191.233 cv
cp
1 1 1 rgb
f
330.461 191.233 mo
330.461 196.327 326.332 200.455 321.239 200.455 cv
316.146 200.455 312.017 196.327 312.017 191.233 cv
312.017 186.14 316.146 182.011 321.239 182.011 cv
326.332 182.011 330.461 186.14 330.461 191.233 cv
cp
.980392 .772549 .109804 rgb
f
327.098 191.233 mo
327.098 194.469 324.475 197.092 321.239 197.092 cv
318.003 197.092 315.38 194.469 315.38 191.233 cv
315.38 187.997 318.003 185.374 321.239 185.374 cv
324.475 185.374 327.098 187.997 327.098 191.233 cv
cp
0 0 0 rgb
f
329.054 186.032 mo
329.054 188.491 327.061 190.485 324.602 190.485 cv
322.143 190.485 320.15 188.491 320.15 186.032 cv
320.15 183.573 322.143 181.58 324.602 181.58 cv
327.061 181.58 329.054 183.573 329.054 186.032 cv
cp
1 1 1 rgb
f
300.716 216.495 mo
300.742 216.401 300.783 216.304 300.84 216.202 cv
302.015 214.124 306.254 214.621 308.185 214.687 cv
311.811 214.81 314.882 214.826 318.508 214.063 cv
323.882 212.932 329.074 211.079 334.138 208.978 cv
336.461 208.015 343.242 203.126 344.084 208.135 cv
345.705 217.77 330.945 220.671 324.333 220.914 cv
319.414 221.095 314.512 220.422 309.644 219.751 cv
307.792 219.496 305.934 219.24 304.137 218.759 cv
303.188 218.505 300.32 217.9 300.716 216.495 cv
cp
0 .658824 .521569 rgb
f
298.767 213.277 mo
298.795 213.183 298.839 213.086 298.901 212.984 cv
300.162 210.906 304.713 211.404 306.787 211.469 cv
310.681 211.592 313.978 211.609 317.871 210.845 cv
323.641 209.714 329.216 207.862 334.653 205.761 cv
337.147 204.797 344.428 199.908 345.333 204.917 cv
347.073 214.553 331.225 217.453 324.125 217.696 cv
318.844 217.877 313.58 217.204 308.353 216.534 cv
306.365 216.278 304.37 216.022 302.441 215.541 cv
301.422 215.287 298.342 214.683 298.767 213.277 cv
cp
.968627 .854902 .392157 rgb
f
300.716 215.012 mo
300.742 214.918 300.783 214.821 300.84 214.719 cv
302.015 212.64 306.254 213.138 308.185 213.204 cv
311.811 213.326 314.882 213.343 318.508 212.58 cv
323.882 211.449 329.074 209.596 334.138 207.495 cv
336.461 206.531 343.242 201.643 344.084 206.651 cv
345.705 216.287 330.945 219.188 324.333 219.431 cv
319.414 219.612 314.512 218.939 309.644 218.268 cv
307.792 218.013 305.934 217.756 304.137 217.275 cv
303.188 217.021 300.32 216.417 300.716 215.012 cv
cp
.156863 .196078 .305882 rgb
f
348.16 200.436 mo
348.873 201.1 349.464 201.869 349.893 202.675 cv
350.252 203.349 350.542 204.08 350.681 204.822 cv
350.774 205.317 351.044 206.655 350.75 207.084 cv
351.271 206.323 351.491 205.42 351.494 204.536 cv
351.5 202.523 350.612 200.509 348.866 199.244 cv
346.966 197.867 344.212 197.495 341.891 198.301 cv
344.296 197.951 346.542 198.925 348.16 200.436 cv
cp
.101961 .737255 .611765 rgb
f
348.049 201.763 mo
348.689 202.584 349.196 203.507 349.539 204.451 cv
349.826 205.241 350.039 206.087 350.1 206.928 cv
350.141 207.488 350.27 209.006 349.934 209.448 cv
350.531 208.663 350.844 207.686 350.938 206.704 cv
351.153 204.469 350.48 202.13 348.875 200.522 cv
347.128 198.772 344.428 198.039 342.036 198.664 cv
344.464 198.555 346.596 199.898 348.049 201.763 cv
cp
.156863 .196078 .305882 rgb
f
314.899 216.963 mo
315.183 219.099 320.314 218.728 321.693 218.697 cv
324.406 218.637 328.373 218.695 330.637 216.996 cv
330.876 216.817 331.109 216.607 331.212 216.327 cv
331.285 216.13 331.286 215.911 331.245 215.705 cv
331.139 215.172 330.757 214.723 330.295 214.438 cv
329.832 214.152 329.293 214.015 328.756 213.933 cv
326.795 213.631 325.215 214.264 323.355 214.694 cv
321.449 215.135 319.516 215.454 317.571 215.661 cv
316.349 215.791 314.79 216.126 314.899 216.963 cv
cp
.721569 .192157 .184314 rgb
f
355.715 311.593 mo
355.715 317.977 350.605 323.152 344.301 323.152 cv
337.997 323.152 332.887 317.977 332.887 311.593 cv
332.887 305.209 337.997 300.033 344.301 300.033 cv
350.605 300.033 355.715 305.209 355.715 311.593 cv
cp
.160784 .411765 .690196 rgb
f
357.991 307.357 mo
357.991 314.918 351.862 321.047 344.301 321.047 cv
336.74 321.047 330.611 314.918 330.611 307.357 cv
330.611 299.797 336.74 293.668 344.301 293.668 cv
351.862 293.668 357.991 299.797 357.991 307.357 cv
cp
1 1 1 rgb
f
349.197 307.205 mo
349.197 309.909 347.005 312.101 344.301 312.101 cv
341.597 312.101 339.405 309.909 339.405 307.205 cv
339.405 304.501 341.597 302.309 344.301 302.309 cv
347.005 302.309 349.197 304.501 349.197 307.205 cv
cp
.12549 .584314 .94902 rgb
f
347.412 307.205 mo
347.412 308.923 346.019 310.315 344.301 310.315 cv
342.583 310.315 341.19 308.923 341.19 307.205 cv
341.19 305.487 342.583 304.094 344.301 304.094 cv
346.019 304.094 347.412 305.487 347.412 307.205 cv
cp
0 0 0 rgb
f
348.45 304.444 mo
348.45 305.749 347.392 306.807 346.086 306.807 cv
344.781 306.807 343.723 305.749 343.723 304.444 cv
343.723 303.138 344.781 302.08 346.086 302.08 cv
347.392 302.08 348.45 303.138 348.45 304.444 cv
cp
1 1 1 rgb
f
316.031 311.593 mo
316.031 317.977 310.921 323.152 304.617 323.152 cv
298.313 323.152 293.203 317.977 293.203 311.593 cv
293.203 305.209 298.313 300.033 304.617 300.033 cv
310.921 300.033 316.031 305.209 316.031 311.593 cv
cp
.160784 .411765 .690196 rgb
f
318.307 307.357 mo
318.307 314.918 312.178 321.047 304.617 321.047 cv
297.056 321.047 290.927 314.918 290.927 307.357 cv
290.927 299.797 297.056 293.668 304.617 293.668 cv
312.178 293.668 318.307 299.797 318.307 307.357 cv
cp
1 1 1 rgb
f
309.513 307.205 mo
309.513 309.909 307.321 312.101 304.617 312.101 cv
301.913 312.101 299.721 309.909 299.721 307.205 cv
299.721 304.501 301.913 302.309 304.617 302.309 cv
307.321 302.309 309.513 304.501 309.513 307.205 cv
cp
.12549 .584314 .94902 rgb
f
307.728 307.205 mo
307.728 308.923 306.335 310.315 304.617 310.315 cv
302.899 310.315 301.506 308.923 301.506 307.205 cv
301.506 305.487 302.899 304.094 304.617 304.094 cv
306.335 304.094 307.728 305.487 307.728 307.205 cv
cp
0 0 0 rgb
f
308.766 304.444 mo
308.766 305.749 307.708 306.807 306.402 306.807 cv
305.097 306.807 304.039 305.749 304.039 304.444 cv
304.039 303.138 305.097 302.08 306.402 302.08 cv
307.708 302.08 308.766 303.138 308.766 304.444 cv
cp
1 1 1 rgb
f
346.75 339.342 mo
346.037 337.281 344.517 336.06 342.966 335.246 cv
344.291 336.167 345.509 337.487 346.105 339.609 cv
346.863 342.31 346.395 344.157 345.81 345.289 cv
345.972 345.115 346.121 344.941 346.242 344.771 cv
346.974 343.743 347.657 341.967 346.75 339.342 cv
cp
.160784 .411765 .690196 rgb
f
331.27 337.773 mo
326.676 335.999 321.879 336.033 316.834 337.162 cv
314.378 337.712 305.673 344.316 305.17 338.994 cv
304.932 336.477 307.964 335.243 309.871 334.524 cv
314.946 332.611 321.79 331.508 327.23 332.106 cv
330.502 332.466 333.927 333.198 336.98 334.436 cv
338.53 335.064 340.446 335.805 341.002 337.579 cv
342.369 341.944 337.073 340.967 335.094 339.711 cv
333.835 338.912 332.56 338.271 331.27 337.773 cv
cp
f
331.27 338.823 mo
326.676 337.049 321.879 337.082 316.834 338.212 cv
314.378 338.762 305.673 345.366 305.17 340.044 cv
304.932 337.527 307.964 336.293 309.871 335.574 cv
314.946 333.661 321.79 332.558 327.23 333.156 cv
330.502 333.516 333.927 334.248 336.98 335.485 cv
338.53 336.114 340.446 336.855 341.002 338.629 cv
342.369 342.994 337.073 342.017 335.094 340.761 cv
333.835 339.962 332.56 339.321 331.27 338.823 cv
cp
1 1 1 rgb
f
299.91 342.796 mo
299.593 339.044 301.567 336.777 304.004 335.25 cv
301.574 336.43 298.845 338.517 299.232 342.226 cv
299.369 343.547 299.854 344.667 300.603 345.521 cv
300.237 344.746 299.998 343.831 299.91 342.796 cv
cp
.164706 .447059 .67451 rgb
f
332.104 342.188 mo
327.036 340.414 321.744 340.448 316.177 341.578 cv
313.468 342.127 303.864 348.731 303.309 343.409 cv
303.047 340.892 306.392 339.659 308.496 338.94 cv
314.095 337.026 321.645 335.923 327.647 336.521 cv
331.257 336.881 335.036 337.614 338.404 338.851 cv
340.114 339.479 342.229 340.22 342.842 341.994 cv
344.35 346.36 338.507 345.383 336.323 344.127 cv
334.934 343.327 333.528 342.686 332.104 342.188 cv
cp
.529412 .670588 .854902 rgb
f
332.104 340.651 mo
327.036 338.878 321.744 338.911 316.177 340.041 cv
313.468 340.59 303.864 347.194 303.309 341.872 cv
303.047 339.355 306.392 338.122 308.496 337.403 cv
314.095 335.489 321.645 334.387 327.647 334.985 cv
331.257 335.344 335.036 336.077 338.404 337.314 cv
340.114 337.942 342.229 338.684 342.842 340.458 cv
344.35 344.823 338.507 343.846 336.323 342.59 cv
334.934 341.79 333.528 341.149 332.104 340.651 cv
cp
0 0 0 rgb
f
319.517 342.516 mo
319.642 342.798 319.76 343.085 319.865 343.38 cv
319.992 343.737 320.106 344.103 320.306 344.424 cv
320.507 344.746 320.811 345.023 321.183 345.097 cv
321.692 345.197 322.22 344.879 322.477 344.428 cv
322.837 343.795 322.625 343.212 322.619 342.551 cv
322.602 340.659 322.766 338.767 322.706 336.872 cv
322.68 336.061 322.866 334.703 322.223 334.076 cv
321.857 333.72 321.01 333.794 320.556 333.813 cv
318.891 333.883 317.241 333.891 317.132 335.994 cv
317.088 336.859 317.374 337.703 317.656 338.521 cv
318.145 339.941 318.921 341.175 319.517 342.516 cv
cp
1 1 1 rgb
f
326.585 342.516 mo
326.46 342.798 326.342 343.085 326.237 343.38 cv
326.11 343.737 325.996 344.103 325.796 344.424 cv
325.595 344.746 325.29 345.023 324.919 345.097 cv
324.41 345.197 323.882 344.879 323.625 344.428 cv
323.265 343.795 323.477 343.212 323.483 342.551 cv
323.5 340.659 323.336 338.767 323.396 336.872 cv
323.422 336.061 323.236 334.703 323.879 334.076 cv
324.245 333.72 325.092 333.794 325.546 333.813 cv
327.211 333.883 328.861 333.891 328.97 335.994 cv
329.014 336.859 328.728 337.703 328.446 338.521 cv
327.957 339.941 327.181 341.175 326.585 342.516 cv
cp
f
331 370.183 mo
317.918 370.183 li
313.008 370.183 308.992 366.167 308.992 361.258 cv
308.992 357.323 li
308.992 352.414 313.008 348.397 317.918 348.397 cv
331 348.397 li
335.91 348.397 339.926 352.414 339.926 357.323 cv
339.926 361.258 li
339.926 366.167 335.91 370.183 331 370.183 cv
cp
.352941 .568627 .803922 rgb
f
45.7179 286.219 mo
45.6133 280.534 43.282 274.92 39.329 270.833 cv
45.9234 273.409 51.5549 278.375 54.9376 284.594 cv
56.919 281.417 60.2274 279.098 63.8894 278.318 cv
61.0662 281.564 59.9845 286.243 61.0959 290.399 cv
57.4028 292 54.1734 294.655 51.8876 297.969 cv
50.3616 294.035 48.7347 289.952 45.6093 287.119 cv
45.6756 286.417 45.7419 285.715 45.8082 285.013 cv
45.7179 286.219 li
cp
.156863 .196078 .305882 rgb
f
110.546 365.135 mo
114.344 363.662 117.472 360.73 119.623 357.271 cv
119.869 356.875 120.122 356.453 120.528 356.224 cv
121.34 355.766 122.431 356.327 122.84 357.165 cv
123.249 358.003 123.149 358.994 122.964 359.908 cv
121.666 366.318 116.629 371.546 110.689 374.283 cv
104.75 377.019 98.0076 377.537 91.4826 377.106 cv
89.6142 376.983 87.7183 376.777 85.9924 376.051 cv
81.2399 374.051 78.8893 368.616 78.1905 363.507 cv
77.2563 356.678 78.4901 349.568 81.6709 343.453 cv
83.1922 340.528 86.7303 337.204 89.7148 340.595 cv
90.8938 341.934 91.1168 343.834 91.3703 345.601 cv
91.9822 349.863 93.0765 354.056 94.6256 358.074 cv
97.2656 364.921 103.587 367.834 110.546 365.135 cv
cp
f
92.2571 320.714 mo
92.2574 320.55 92.2622 320.383 92.2622 320.219 cv
92.2622 319.69 92.204 319.173 92.0977 318.674 cv
91.1585 312.086 85.9812 306.237 78.2226 302.128 cv
78.3129 301.543 78.3632 300.947 78.3632 300.34 cv
78.3632 293.135 71.7928 287.295 63.6877 287.295 cv
59.3888 287.295 55.5222 288.938 52.8382 291.556 cv
49.6126 286.421 43.442 282.947 36.3555 282.947 cv
25.9347 282.947 17.487 290.456 17.487 299.719 cv
17.487 301.835 17.9321 303.857 18.7365 305.721 cv
14.1103 309.372 11.123 313.821 10.4307 318.671 cv
10.3241 319.171 10.2657 319.688 10.2657 320.218 cv
10.2655 330.888 8.98464 341.534 9.83574 352.204 cv
10.2522 357.425 11.1307 362.718 13.2074 367.558 cv
14.7801 371.223 18.1609 378.068 22.6554 378.78 cv
24.1197 379.012 25.5494 378.295 26.8588 377.6 cv
28.3341 376.816 29.5522 375.17 31.1737 374.762 cv
33.3001 374.227 34.6218 375.927 36.2747 376.927 cv
38.4561 378.246 41.3377 378.064 43.5838 376.858 cv
46.109 375.501 48.1359 372.927 50.9936 372.703 cv
53.5576 372.502 55.7902 374.281 57.885 375.773 cv
59.9797 377.265 62.7095 378.595 65.022 377.469 cv
66.9051 376.553 67.888 374.245 69.8638 373.551 cv
72.3443 372.68 74.7699 374.73 77.0392 376.057 cv
79.0862 377.254 80.7973 377.721 82.2303 377.633 cv
89.8093 377.167 89.6084 361.175 90.1474 355.532 cv
91.2149 344.355 92.2069 332.321 92.2534 321.049 cv
92.2544 320.979 92.2622 320.909 92.2622 320.839 cv
92.2622 320.797 92.2574 320.756 92.2571 320.714 cv
cp
.278431 .333333 .466667 rgb
f
92.2622 320.219 mo
92.2622 319.69 92.204 319.173 92.0977 318.674 cv
91.1585 312.086 85.9812 306.237 78.2226 302.128 cv
78.3129 301.543 78.3632 300.947 78.3632 300.34 cv
78.3632 293.135 71.7928 287.295 63.6877 287.295 cv
60.1486 287.295 56.9044 288.41 54.3699 290.265 cv
54.3699 373.479 li
55.6007 374.095 56.763 374.973 57.885 375.773 cv
59.9797 377.265 62.7095 378.595 65.022 377.469 cv
66.9051 376.553 67.888 374.245 69.8638 373.551 cv
72.3443 372.68 74.7699 374.73 77.0392 376.057 cv
79.0862 377.254 80.7973 377.721 82.2303 377.633 cv
89.8093 377.167 89.6084 361.175 90.1474 355.532 cv
91.2149 344.355 92.2069 332.321 92.2534 321.049 cv
92.2544 320.979 92.2622 320.909 92.2622 320.839 cv
92.2622 320.797 92.2574 320.756 92.2571 320.714 cv
92.2574 320.55 92.2622 320.383 92.2622 320.219 cv
cp
.235294 .282353 .4 rgb
f
50.2487 300.507 mo
50.2487 308.006 44.1689 314.086 36.669 314.086 cv
29.1692 314.086 23.0893 308.006 23.0893 300.507 cv
23.0893 293.007 29.1692 286.927 36.669 286.927 cv
44.1689 286.927 50.2487 293.007 50.2487 300.507 cv
cp
1 1 1 rgb
f
47.9919 300.507 mo
47.9919 306.76 42.9225 311.829 36.669 311.829 cv
30.4156 311.829 25.3462 306.76 25.3462 300.507 cv
25.3462 294.253 30.4156 289.184 36.669 289.184 cv
42.9225 289.184 47.9919 294.253 47.9919 300.507 cv
cp
.329412 .67451 .823529 rgb
f
71.0578 300.887 mo
71.0578 305.377 67.4182 309.016 62.9285 309.016 cv
58.4388 309.016 54.7991 305.377 54.7991 300.887 cv
54.7991 296.397 58.4388 292.758 62.9285 292.758 cv
67.4182 292.758 71.0578 296.397 71.0578 300.887 cv
cp
1 1 1 rgb
f
69.7068 300.887 mo
69.7068 304.63 66.672 307.665 62.9285 307.665 cv
59.1849 307.665 56.1502 304.63 56.1502 300.887 cv
56.1502 297.143 59.1849 294.109 62.9285 294.109 cv
66.672 294.109 69.7068 297.143 69.7068 300.887 cv
cp
.329412 .67451 .823529 rgb
f
67.9154 297.621 mo
67.9154 299.473 66.4139 300.974 64.5616 300.974 cv
62.7093 300.974 61.2077 299.473 61.2077 297.621 cv
61.2077 295.768 62.7093 294.267 64.5616 294.267 cv
66.4139 294.267 67.9154 295.768 67.9154 297.621 cv
cp
0 0 0 rgb
f
67.7686 296.366 mo
67.7686 297.322 66.9943 298.096 66.0391 298.096 cv
65.0839 298.096 64.3096 297.322 64.3096 296.366 cv
64.3096 295.411 65.0839 294.637 66.0391 294.637 cv
66.9943 294.637 67.7686 295.411 67.7686 296.366 cv
cp
1 1 1 rgb
f
39.4676 305.66 mo
39.4676 308.755 36.9592 311.263 33.8651 311.263 cv
30.7709 311.263 28.2626 308.755 28.2626 305.66 cv
28.2626 302.566 30.7709 300.058 33.8651 300.058 cv
36.9592 300.058 39.4676 302.566 39.4676 305.66 cv
cp
0 0 0 rgb
f
39.2222 303.565 mo
39.2222 305.161 37.9288 306.454 36.3332 306.454 cv
34.7377 306.454 33.4442 305.161 33.4442 303.565 cv
33.4442 301.97 34.7377 300.676 36.3332 300.676 cv
37.9288 300.676 39.2222 301.97 39.2222 303.565 cv
cp
1 1 1 rgb
f
73.7667 331.651 mo
66.8311 338.69 57.339 343.875 48.1018 341.475 cv
38.2594 338.918 28.6479 332.378 22.2282 324.56 cv
20.4944 322.448 18.8757 320.192 17.9101 317.636 cv
17.6348 316.907 17.4656 315.959 18.0593 315.455 cv
18.5135 315.069 19.1904 315.153 19.7726 315.28 cv
24.6742 316.353 29.1032 318.884 33.9196 320.203 cv
51.8835 325.125 65.6156 321.173 81.9554 313.365 cv
82.2991 313.201 82.6851 313.033 83.0482 313.148 cv
83.6749 313.346 83.7707 314.188 83.6953 314.841 cv
83.408 317.328 82.3595 319.664 81.1508 321.857 cv
79.3316 325.157 76.7924 328.581 73.7667 331.651 cv
cp
.321569 .384314 .533333 rgb
f
73.7667 332.894 mo
66.8311 339.932 57.339 345.117 48.1018 342.717 cv
38.2594 340.16 28.6479 333.621 22.2282 325.802 cv
20.4944 323.69 18.8757 321.434 17.9101 318.879 cv
17.6348 318.15 17.4656 317.202 18.0593 316.697 cv
18.5135 316.311 19.1904 316.395 19.7726 316.522 cv
24.6742 317.595 29.1032 320.126 33.9196 321.446 cv
51.8835 326.368 65.6156 322.416 81.9554 314.608 cv
82.2991 314.443 82.6851 314.276 83.0482 314.39 cv
83.6749 314.589 83.7707 315.43 83.6953 316.083 cv
83.408 318.571 82.3595 320.906 81.1508 323.099 cv
79.3316 326.4 76.7924 329.823 73.7667 332.894 cv
cp
.156863 .196078 .305882 rgb
f
54.2998 338.165 mo
56.9663 338.597 59.5251 339.676 61.6355 341.366 cv
62.2104 341.826 62.7616 342.337 63.1329 342.973 cv
64.2857 344.947 62.9532 347.778 61.9437 349.601 cv
60.8482 351.58 59.1836 353.115 57.0745 353.956 cv
54.797 354.863 52.2665 354.953 49.8863 354.446 cv
47.7738 353.997 46.4653 352.897 44.9124 351.434 cv
42.5552 349.215 39.2168 345.246 41.5247 342.011 cv
42.2893 340.939 43.4153 340.176 44.5911 339.583 cv
47.566 338.084 51.0146 337.633 54.2998 338.165 cv
cp
f
54.7451 334.245 mo
54.9667 334.089 55.1445 333.978 55.2367 333.936 cv
56.4578 333.384 58.0133 333.235 59.3394 333.263 cv
62.497 333.329 65.7088 334.72 67.9865 336.896 cv
67.159 337.332 66.3608 337.824 65.5991 338.368 cv
65.2899 338.588 64.9807 338.823 64.7693 339.138 cv
64.4896 339.556 64.4082 340.07 64.3273 340.566 cv
63.5202 345.509 62.2959 350.561 57.1366 352.593 cv
54.8306 353.5 52.2683 353.59 49.8583 353.083 cv
47.7193 352.634 46.3945 351.534 44.8221 350.071 cv
42.31 347.735 40.3633 344.418 39.7269 341.032 cv
39.5188 339.925 39.6126 339.267 38.7517 338.41 cv
38.1477 337.809 37.1578 336.996 36.2549 337.115 cv
37.3094 336.676 38.422 336.35 39.4645 335.864 cv
40.0234 335.603 40.5599 335.293 41.1338 335.068 cv
44.2379 333.847 50.75 333.026 52.6143 336.651 cv
52.3516 336.141 53.8816 334.853 54.7451 334.245 cv
cp
.576471 .396078 .721569 rgb
f
52.417 338.577 mo
52.8096 347.804 li
52.8096 347.804 53.8894 335.73 52.417 338.577 cv
cp
.333333 .223529 .509804 rgb
f
22.2402 318.692 mo
22.2402 318.692 19.5231 317.497 19.4144 318.366 cv
19.3058 319.236 24.7399 325.322 28.8698 327.169 cv
32.9998 329.017 48.324 331.517 60.6052 329.126 cv
72.8863 326.735 77.451 324.67 79.0812 323.039 cv
80.7115 321.409 83.8633 314.888 82.5591 315.432 cv
81.2549 315.975 76.6902 318.366 68.3217 321.192 cv
59.9531 324.018 47.3459 327.713 22.2402 318.692 cv
cp
1 1 1 rgb
f
69.2921 178.086 mo
69.3427 178.017 69.3871 177.947 69.4336 177.877 cv
66.3796 174.892 li
64.9268 175.221 63.458 173.325 64.8226 172.121 cv
66.1571 170.942 67.3755 169.638 68.8822 168.67 cv
69.6985 168.146 70.5992 167.803 71.5166 167.494 cv
71.3418 161.169 70.3302 155.111 66.8966 155.049 cv
65.1858 155.018 63.6339 156.553 62.0699 157.905 cv
57.1521 162.156 51.9024 165.052 46.6036 164.867 cv
46.604 164.841 li
46.5384 164.844 46.4728 164.846 46.4072 164.85 cv
46.3419 164.844 46.2764 164.839 46.2109 164.834 cv
46.2109 164.834 46.2105 164.86 46.2051 164.86 cv
40.9084 164.857 35.7646 161.776 31.0009 157.353 cv
29.4858 155.947 27.9894 154.358 26.2787 154.328 cv
22.931 154.27 21.6815 159.989 21.2508 166.127 cv
30.441 172.847 li
23.4354 179.005 li
21.088 178.825 li
21.088 179.028 21.0919 179.231 21.0916 179.434 cv
20.9761 179.879 20.9049 180.341 20.8964 180.819 cv
19.9171 235.994 li
19.8587 239.281 22.5003 242.018 25.7871 242.076 cv
30.6658 242.163 li
32.6266 242.278 34.5876 242.396 36.5495 242.478 cv
37.0474 242.499 37.4487 242.504 37.7772 242.483 cv
37.9192 234.482 li
37.9776 231.195 40.7145 228.554 44.0014 228.612 cv
46.5486 228.657 li
49.8356 228.715 52.477 231.452 52.4187 234.739 cv
52.2801 242.547 li
63.7774 242.751 li
67.0642 242.809 69.8013 240.167 69.8596 236.881 cv
70.6958 189.77 li
70.894 186.663 71.0202 183.588 71.1597 180.466 cv
69.8466 180.785 68.3021 179.445 69.2921 178.086 cv
cp
.819608 .282353 .254902 rgb
f
68.8822 168.67 mo
69.6985 168.146 70.5992 167.803 71.5167 167.494 cv
71.3418 161.169 70.3303 155.111 66.8966 155.049 cv
65.1858 155.018 63.6338 156.553 62.0699 157.905 cv
57.2647 162.059 52.1424 164.91 46.9672 164.866 cv
46.9672 228.686 li
50.056 228.959 52.4746 231.594 52.4186 234.739 cv
52.2801 242.547 li
63.7774 242.751 li
67.0643 242.809 69.8013 240.167 69.8596 236.881 cv
70.6958 189.77 li
70.894 186.663 71.0201 183.588 71.1597 180.466 cv
69.8465 180.785 68.3022 179.445 69.292 178.086 cv
69.3426 178.017 69.387 177.947 69.4335 177.877 cv
66.3796 174.892 li
64.9268 175.221 63.458 173.325 64.8226 172.121 cv
66.157 170.942 67.3755 169.638 68.8822 168.67 cv
cp
.733333 .25098 .223529 rgb
f
52.9829 162.617 mo
50.4106 164.445 47.2695 164.198 44.4756 164.101 cv
41.3706 163.993 34.4676 160.787 36.1776 154.69 cv
36.6358 153.056 37.7572 151.968 38.5827 150.624 cv
39.4082 149.28 39.9106 147.153 39.0412 145.887 cv
40.3614 146.945 41.837 147.667 43.035 148.965 cv
44.2331 150.263 45.1325 152.392 44.7068 154.411 cv
46.3065 153.848 47.1273 151.328 47.143 149.087 cv
47.1588 146.846 46.6139 144.668 46.5516 142.429 cv
46.4719 139.566 47.2209 136.662 48.603 134.475 cv
47.8209 137.386 48.5936 140.576 49.3633 143.469 cv
49.5807 144.287 49.8045 145.12 50.2013 145.8 cv
50.6707 146.604 51.3487 147.135 51.8564 147.895 cv
52.8454 149.376 53.0682 151.505 53.2471 153.498 cv
53.9421 152.804 54.4216 151.722 54.5459 150.566 cv
55.458 151.459 56.1252 152.812 56.3591 154.312 cv
56.8746 157.616 55.1992 161.042 52.9829 162.617 cv
cp
.976471 .611765 .196078 rgb
f
51.0149 159.875 mo
49.1931 161.136 46.9675 160.965 44.988 160.897 cv
42.788 160.821 37.8962 158.606 39.1058 154.397 cv
39.4299 153.27 40.2241 152.519 40.8085 151.591 cv
41.393 150.664 41.7482 149.195 41.1319 148.321 cv
42.0675 149.052 43.1133 149.551 43.9625 150.448 cv
44.8117 151.344 45.4497 152.814 45.1487 154.208 cv
46.2819 153.82 46.8626 152.08 46.873 150.533 cv
46.8835 148.986 46.4967 147.482 46.4518 145.937 cv
46.3945 143.96 46.9242 141.955 47.9027 140.447 cv
47.3496 142.456 47.898 144.658 48.4442 146.656 cv
48.5986 147.22 48.7574 147.796 49.0388 148.265 cv
49.3716 148.82 49.8521 149.187 50.212 149.712 cv
50.9133 150.734 51.0718 152.204 51.1992 153.58 cv
51.6913 153.102 52.0307 152.354 52.1185 151.557 cv
52.765 152.173 53.2381 153.108 53.4043 154.143 cv
53.7706 156.424 52.5847 158.788 51.0149 159.875 cv
cp
.992157 .752941 .0235294 rgb
f
26.3551 170.345 mo
23.2064 171.98 21.0297 175.243 20.9623 179.039 cv
20.8644 184.555 25.2565 189.105 30.7723 189.203 cv
36.288 189.301 40.8388 184.909 40.9367 179.393 cv
40.9374 179.353 40.9325 179.313 40.9327 179.272 cv
26.3551 170.345 li
cp
1 1 1 rgb
f
28.0827 171.403 mo
24.9489 172.554 22.685 175.53 22.6221 179.068 cv
22.5405 183.667 26.2027 187.462 30.8017 187.544 cv
35.4008 187.625 39.1952 183.963 39.2769 179.364 cv
39.2838 178.974 39.2545 178.593 39.2094 178.217 cv
28.0827 171.403 li
cp
.992157 .752941 .0235294 rgb
f
33.8215 177.561 mo
33.7697 180.483 31.3589 182.81 28.437 182.758 cv
25.515 182.706 23.1883 180.295 23.2402 177.373 cv
23.2921 174.451 25.7028 172.125 28.6248 172.177 cv
31.5467 172.229 33.8734 174.639 33.8215 177.561 cv
cp
0 0 0 rgb
f
32.7818 174.198 mo
32.6327 174.511 32.5444 174.859 32.5379 175.228 cv
32.5133 176.611 33.6141 177.751 34.9965 177.776 cv
35.8209 177.79 36.5572 177.403 37.0241 176.796 cv
32.7818 174.198 li
cp
1 1 1 rgb
f
21.6862 166.269 mo
42.3746 180.27 li
21.1375 167.101 li
21.6862 166.269 li
cp
0 0 0 rgb
f
66.248 171.053 mo
51.3627 179.457 li
51.3615 179.498 51.3551 179.537 51.3544 179.578 cv
51.2565 185.094 55.6485 189.645 61.1643 189.743 cv
66.68 189.841 71.2308 185.449 71.3287 179.933 cv
71.3961 176.137 69.3365 172.798 66.248 171.053 cv
cp
1 1 1 rgb
f
64.4839 172.049 mo
53.1224 178.464 li
53.0639 178.838 53.021 179.218 53.0141 179.608 cv
52.9325 184.207 56.5947 188.001 61.1938 188.083 cv
65.7928 188.165 69.5873 184.503 69.6689 179.903 cv
69.7317 176.365 67.5748 173.311 64.4839 172.049 cv
cp
.992157 .752941 .0235294 rgb
f
60.999 173.721 mo
53.9439 177.736 li
54.1754 179.929 56.0073 181.657 58.2687 181.697 cv
60.7159 181.741 62.7349 179.792 62.7784 177.345 cv
62.8047 175.865 62.0994 174.545 60.999 173.721 cv
cp
0 0 0 rgb
f
64.0505 172.123 mo
60.857 173.926 li
60.8256 174.075 60.8065 174.229 60.8037 174.387 cv
60.7798 175.737 61.8546 176.851 63.2045 176.875 cv
64.5543 176.899 65.668 175.824 65.692 174.474 cv
65.7112 173.39 65.0215 172.46 64.0505 172.123 cv
cp
1 1 1 rgb
f
71.5783 168.161 mo
49.9301 180.285 li
71.0593 167.311 li
71.5783 168.161 li
cp
0 0 0 rgb
f
41.6612 204.398 mo
41.6612 204.398 41.8005 204.354 42.0437 204.303 cv
42.2868 204.262 42.6346 204.173 43.051 204.121 cv
43.4676 204.061 43.9531 204.013 44.473 203.985 cv
44.7328 203.975 45.0014 203.964 45.2742 203.953 cv
45.5469 203.952 45.8239 203.951 46.1009 203.95 cv
46.3777 203.961 46.6545 203.972 46.927 203.982 cv
47.1995 203.987 47.4672 204.023 47.7266 204.041 cv
48.2451 204.087 48.7287 204.153 49.1428 204.228 cv
49.5571 204.294 49.9015 204.397 50.143 204.446 cv
50.3843 204.506 50.5219 204.556 50.5219 204.556 cv
50.5219 204.556 50.3826 204.6 50.1394 204.652 cv
49.8963 204.692 49.5484 204.782 49.132 204.834 cv
48.7155 204.895 48.2299 204.943 47.7101 204.97 cv
47.4502 204.979 47.1814 205.006 46.9089 205.001 cv
46.6362 205.002 46.3592 205.003 46.0822 205.004 cv
45.8054 204.993 45.5286 204.982 45.2562 204.971 cv
44.9839 204.951 44.7159 204.931 44.4566 204.911 cv
43.938 204.865 43.4545 204.8 43.0403 204.724 cv
42.626 204.658 42.2816 204.557 42.0401 204.507 cv
41.7988 204.447 41.6612 204.398 41.6612 204.398 cv
cp
.721569 .192157 .184314 rgb
f
63.8219 240.245 mo
52.3246 240.041 li
52.2801 242.547 li
63.7774 242.751 li
67.0642 242.809 69.8013 240.167 69.8596 236.881 cv
69.9041 234.375 li
69.8458 237.661 67.1087 240.303 63.8219 240.245 cv
cp
f
37.8217 239.977 mo
37.4932 239.998 37.0919 239.993 36.594 239.972 cv
34.6321 239.89 32.6711 239.772 30.7102 239.657 cv
25.8316 239.57 li
22.5447 239.512 19.9032 236.775 19.9615 233.488 cv
19.9171 235.994 li
19.8587 239.281 22.5003 242.018 25.7871 242.076 cv
30.6658 242.163 li
32.6266 242.278 34.5876 242.396 36.5495 242.478 cv
37.0474 242.499 37.4487 242.504 37.7772 242.483 cv
37.8217 239.977 li
cp
f
31.7011 202.146 mo
31.7011 202.146 32.1799 202.001 33.0163 201.83 cv
33.8522 201.695 35.048 201.402 36.4798 201.23 cv
37.9121 201.03 39.5817 200.873 41.3693 200.78 cv
42.2628 200.747 43.1862 200.713 44.1244 200.678 cv
45.062 200.675 46.0146 200.671 46.9672 200.668 cv
47.919 200.704 48.8708 200.741 49.8078 200.777 cv
50.7451 200.795 51.6657 200.914 52.5576 200.975 cv
54.3408 201.129 56.0038 201.346 57.4281 201.597 cv
58.8529 201.818 60.0375 202.158 60.868 202.323 cv
61.6979 202.523 62.1712 202.687 62.1712 202.687 cv
62.1712 202.687 61.6924 202.833 60.8559 203.004 cv
60.0201 203.139 58.8242 203.437 57.3924 203.607 cv
55.9601 203.808 54.2904 203.966 52.5029 204.056 cv
51.6094 204.085 50.6852 204.172 49.7478 204.156 cv
48.8102 204.159 47.8577 204.162 46.9051 204.165 cv
45.9533 204.128 45.0014 204.09 44.0645 204.054 cv
43.1281 203.985 42.2065 203.918 41.3147 203.854 cv
39.5316 203.697 37.8686 203.481 36.4443 203.23 cv
35.0195 203.008 33.8348 202.672 33.0043 202.508 cv
32.1744 202.308 31.7011 202.146 31.7011 202.146 cv
cp
.819608 .282353 .254902 rgb
f
26.0591 201.699 mo
26.0591 201.699 26.6872 201.667 27.786 201.633 cv
28.8847 201.61 30.4546 201.549 32.3377 201.526 cv
34.2209 201.495 36.4176 201.481 38.7708 201.487 cv
39.9474 201.494 41.1632 201.501 42.3985 201.509 cv
43.6337 201.525 44.8886 201.541 46.1434 201.558 cv
47.398 201.586 48.6526 201.614 49.8876 201.641 cv
51.1227 201.663 52.3377 201.714 53.5138 201.748 cv
55.8657 201.824 58.0605 201.917 59.9415 202.015 cv
61.8226 202.104 63.3894 202.222 64.4865 202.284 cv
65.5834 202.357 66.21 202.412 66.21 202.412 cv
66.21 202.412 65.5819 202.445 64.483 202.478 cv
63.3844 202.501 61.8144 202.564 59.9313 202.587 cv
58.0481 202.618 55.8514 202.632 53.4982 202.625 cv
52.3217 202.617 51.1057 202.625 49.8706 202.603 cv
48.6353 202.587 47.3805 202.57 46.1257 202.553 cv
44.8711 202.525 43.6164 202.497 42.3815 202.47 cv
41.1466 202.433 39.9313 202.397 38.7553 202.362 cv
36.4033 202.285 34.2085 202.193 32.3276 202.095 cv
30.4465 202.006 28.8797 201.888 27.7826 201.826 cv
26.6857 201.754 26.0591 201.699 26.0591 201.699 cv
cp
0 0 0 rgb
f
26.0679 201.202 mo
26.0679 201.202 26.696 201.169 27.7948 201.136 cv
28.8935 201.113 30.4635 201.051 32.3465 201.029 cv
34.2297 200.998 36.4264 200.984 38.7797 200.99 cv
39.9562 200.997 41.172 201.004 42.4074 201.011 cv
43.6425 201.028 44.8974 201.044 46.1522 201.061 cv
47.4068 201.088 48.6614 201.116 49.8965 201.144 cv
51.1316 201.166 52.3465 201.217 53.5226 201.251 cv
55.8746 201.327 58.0694 201.419 59.9503 201.517 cv
61.8314 201.606 63.3982 201.725 64.4953 201.787 cv
65.5923 201.859 66.2188 201.915 66.2188 201.915 cv
66.2188 201.915 65.5907 201.948 64.4919 201.981 cv
63.3933 202.004 61.8233 202.067 59.9401 202.089 cv
58.0569 202.12 55.8602 202.135 53.5071 202.128 cv
52.3305 202.119 51.1145 202.127 49.8794 202.106 cv
48.6442 202.089 47.3894 202.073 46.1345 202.056 cv
44.8799 202.028 43.6253 202 42.3903 201.972 cv
41.1555 201.936 39.9402 201.9 38.7641 201.865 cv
36.4122 201.788 34.2174 201.695 32.3364 201.598 cv
30.4553 201.508 28.8886 201.391 27.7914 201.329 cv
26.6945 201.257 26.0679 201.202 26.0679 201.202 cv
cp
.992157 .752941 .0235294 rgb
f
68.255 55.8167 mo
68.2548 63.7001 58.4185 70.0908 46.2849 70.0908 cv
34.1514 70.0908 24.3152 63.7001 24.3148 55.8168 cv
24.3147 52.4392 27.0906 48.418 30.1212 46.9011 cv
32.7999 45.5604 35.7354 46.581 38.4676 47.123 cv
42.6213 47.9469 45.9271 48.1209 49.9651 47.1276 cv
53.8034 46.1835 59.1959 44.1236 62.9265 46.0585 cv
66.2606 47.7878 68.2551 52.2243 68.255 55.8167 cv
cp
.596078 .733333 .831373 rgb
f
14.9114 53.0462 mo
14.9114 53.6477 14.4239 54.1353 13.8224 54.1353 cv
13.2209 54.1353 12.7333 53.6477 12.7333 53.0462 cv
12.7333 52.4448 13.2209 51.9572 13.8224 51.9572 cv
14.4239 51.9572 14.9114 52.4448 14.9114 53.0462 cv
cp
.721569 .807843 .878431 rgb
f
19.0498 54.3531 mo
19.0498 55.2553 18.3184 55.9867 17.4162 55.9867 cv
16.514 55.9867 15.7827 55.2553 15.7827 54.3531 cv
15.7827 53.4509 16.514 52.7195 17.4162 52.7195 cv
18.3184 52.7195 19.0498 53.4509 19.0498 54.3531 cv
cp
f
17.6885 50.8681 mo
17.6885 51.3192 17.3228 51.6849 16.8717 51.6849 cv
16.4206 51.6849 16.0549 51.3192 16.0549 50.8681 cv
16.0549 50.417 16.4206 50.0514 16.8717 50.0514 cv
17.3228 50.0514 17.6885 50.417 17.6885 50.8681 cv
cp
f
41.2121 21.9083 mo
41.2121 29.396 35.1421 35.466 27.6544 35.466 cv
20.1667 35.466 14.0967 29.396 14.0967 21.9083 cv
14.0967 14.4206 20.1667 8.35056 27.6544 8.35056 cv
35.1421 8.35056 41.2121 14.4206 41.2121 21.9083 cv
cp
1 1 1 rgb
f
38.9589 21.9083 mo
38.9589 28.1516 33.8977 33.2128 27.6544 33.2128 cv
21.411 33.2128 16.3498 28.1516 16.3498 21.9083 cv
16.3498 15.665 21.411 10.6037 27.6544 10.6037 cv
33.8977 10.6037 38.9589 15.665 38.9589 21.9083 cv
cp
.8 .858824 .219608 rgb
f
34.8365 21.9083 mo
34.8365 25.8749 31.621 29.0904 27.6544 29.0904 cv
23.6878 29.0904 20.4722 25.8749 20.4722 21.9083 cv
20.4722 17.9417 23.6878 14.7261 27.6544 14.7261 cv
31.621 14.7261 34.8365 17.9417 34.8365 21.9083 cv
cp
0 0 0 rgb
f
37.2346 15.5327 mo
37.2346 18.547 34.791 20.9905 31.7768 20.9905 cv
28.7625 20.9905 26.319 18.547 26.319 15.5327 cv
26.319 12.5185 28.7625 10.0749 31.7768 10.0749 cv
34.791 10.0749 37.2346 12.5185 37.2346 15.5327 cv
cp
1 1 1 rgb
f
67.9714 52.0576 mo
68.1072 59.9398 58.3827 66.4993 46.2509 66.7086 cv
34.1192 66.918 24.1742 60.698 24.0378 52.8159 cv
23.9794 49.4388 26.6855 45.3703 29.6894 43.8013 cv
32.3446 42.4146 35.2973 43.3844 38.0385 43.8792 cv
42.2058 44.6313 45.514 44.7482 49.5344 43.6854 cv
53.3558 42.6751 58.7119 40.5226 62.4754 42.3928 cv
65.8388 44.0642 67.9095 48.4657 67.9714 52.0576 cv
cp
.596078 .733333 .831373 rgb
f
68.255 54.4646 mo
68.2548 62.3479 58.4185 68.7386 46.2849 68.7386 cv
34.1514 68.7386 24.3152 62.348 24.3148 54.4647 cv
24.3147 51.0871 27.0906 47.0659 30.1212 45.549 cv
32.7999 44.2083 35.7354 45.2289 38.4676 45.7709 cv
42.6213 46.5948 45.9271 46.7688 49.9651 45.7755 cv
53.8034 44.8313 59.1959 42.7715 62.9265 44.7064 cv
66.2606 46.4356 68.2551 50.8721 68.255 54.4646 cv
cp
.156863 .196078 .305882 rgb
f
46.2849 71.7176 mo
39.3664 71.7176 33.1308 70.003 28.7196 67.2583 cv
32.7286 70.7198 39.1038 72.9589 46.2849 72.9589 cv
53.466 72.9589 59.8412 70.7198 63.8502 67.2583 cv
59.439 70.003 53.2034 71.7176 46.2849 71.7176 cv
cp
.301961 .615686 .752941 rgb
f
45.2204 100.296 mo
39.2615 99.7469 34.0303 97.5437 30.4542 94.4591 cv
33.6255 98.2259 38.9343 100.963 45.1194 101.533 cv
51.3045 102.103 56.9776 100.378 60.7122 97.2478 cv
56.6895 99.6321 51.1793 100.845 45.2204 100.296 cv
cp
f
51.902 106.572 mo
45.9742 107.63 40.4262 106.889 36.3179 104.853 cv
40.1674 107.659 45.8978 108.896 52.0507 107.798 cv
58.2035 106.7 63.3976 103.514 66.418 99.4829 cv
62.9672 102.868 57.8299 105.515 51.902 106.572 cv
cp
f
54.9839 110.897 mo
49.8411 112.263 44.9115 111.828 41.161 110.031 cv
44.7356 112.604 49.8591 113.521 55.1971 112.104 cv
60.5351 110.686 64.8894 107.251 67.2748 103.096 cv
64.4673 106.634 60.1267 109.531 54.9839 110.897 cv
cp
f
69.4244 106.115 mo
67.3168 109.294 64.2076 112.152 60.3458 114.121 cv
59.1503 114.731 57.9439 115.226 56.7434 115.609 cv
57.7815 115.69 58.8194 115.723 59.8548 115.711 cv
60.1735 115.569 60.4915 115.417 60.8083 115.256 cv
64.7258 113.257 67.76 110.139 69.5711 106.647 cv
69.5195 106.469 69.4694 106.291 69.4244 106.115 cv
cp
f
48.4873 67.9647 mo
43.0065 68.3615 36.7876 67.4284 35.2098 65.2027 cv
33.8953 63.3482 36.7704 61.8964 39.7134 61.9045 cv
42.0267 61.911 43.9797 62.5663 46.2509 62.5067 cv
47.7722 62.4667 49.2458 62.1911 50.6625 61.8669 cv
52.0342 61.5531 53.5131 61.1848 54.9316 61.4185 cv
56.4179 61.6633 57.4052 62.5494 57.5475 63.4418 cv
57.9716 66.1008 53.5436 67.5986 48.4873 67.9647 cv
cp
.596078 .733333 .831373 rgb
f
36.5471 22.3349 mo
36.5471 22.3349 36.5223 21.8645 36.4761 20.9795 cv
36.4644 20.7584 36.4512 20.5115 36.4366 20.2398 cv
36.3982 19.9704 36.3563 19.6763 36.3109 19.3584 cv
36.2633 19.0412 36.2123 18.7002 36.1579 18.3365 cv
36.0885 17.9757 35.9803 17.5989 35.8854 17.1978 cv
35.5209 15.5908 34.7874 13.7012 33.6316 11.7395 cv
32.4785 9.77941 30.8186 7.77488 28.6258 6.09999 cv
26.4686 4.40743 23.6389 3.14182 20.6146 2.72087 cv
19.0083 2.54798 17.4316 2.52444 15.8124 2.83678 cv
14.9974 2.93282 14.2154 3.21521 13.4107 3.43514 cv
13.0201 3.58101 12.6355 3.75081 12.2423 3.9035 cv
11.8432 4.04429 11.4686 4.24359 11.095 4.44962 cv
10.7258 4.66198 10.3244 4.82419 9.97548 5.07876 cv
9.61798 5.31926 9.25899 5.56072 8.89884 5.80302 cv
8.54546 6.05528 8.22361 6.35293 7.88178 6.62671 cv
7.71442 6.7682 7.54029 6.90262 7.37755 7.0504 cv
6.9121 7.52056 li
5.63062 8.741 4.56818 10.2111 3.66187 11.7772 cv
2.72255 13.3328 2.07191 15.0663 1.56924 16.838 cv
1.22857 18.1832 li
1.13614 18.6341 1.07837 19.0886 1.0003 19.5429 cv
.889636 20.226 li
.837562 20.934 li
.740346 22.3365 li
.773439 23.7364 li
.792915 24.4372 li
.872141 25.1331 li
.929414 25.5964 .967459 26.0637 1.04025 26.5248 cv
1.32315 27.8971 li
1.78794 29.7005 2.40631 31.4761 3.32401 33.0831 cv
4.2176 34.6953 5.30349 36.2023 6.62144 37.4409 cv
7.10059 37.9178 li
7.26778 38.0679 7.44687 38.2045 7.61869 38.3481 cv
7.96877 38.6277 8.30498 38.9229 8.66991 39.1754 cv
9.04211 39.4167 9.41315 39.6572 9.7827 39.8968 cv
10.143 40.1497 10.5563 40.3101 10.9366 40.5199 cv
11.3215 40.7234 11.7067 40.9196 12.1166 41.0569 cv
12.5199 41.207 12.9152 41.3714 13.3168 41.5089 cv
14.1413 41.714 14.9494 41.9802 15.7603 42.0553 cv
16.1722 42.0991 16.5444 42.2087 16.9792 42.2007 cv
17.4022 42.2149 17.8226 42.2289 18.2405 42.2429 cv
18.5993 42.2762 19.0315 42.2016 19.4188 42.1874 cv
19.8146 42.1467 20.2137 42.1618 20.5971 42.0668 cv
23.7023 41.5905 26.4786 40.3067 28.6463 38.5985 cv
30.8349 36.9106 32.492 34.903 33.6429 32.9396 cv
34.7982 30.9761 35.532 29.0854 35.8943 27.4772 cv
35.9888 27.0759 36.0968 26.6986 36.1656 26.338 cv
36.2194 25.9748 36.2699 25.6342 36.317 25.3174 cv
36.3617 24.9999 36.403 24.7062 36.4409 24.437 cv
36.455 24.1643 36.4677 23.9165 36.4791 23.6946 cv
36.5233 22.8069 36.5471 22.3349 36.5471 22.3349 cv
cp
36.6822 22.338 mo
36.6822 22.338 36.6634 22.8132 36.6286 23.7013 cv
36.6195 23.9234 36.6094 24.1713 36.5984 24.4442 cv
36.5632 24.7164 36.5248 25.0136 36.4832 25.3347 cv
36.4439 25.6565 36.4018 26.0023 36.3568 26.3712 cv
36.3005 26.7381 36.2062 27.1213 36.1253 27.5305 cv
35.9839 28.355 35.698 29.2335 35.4222 30.2054 cv
35.0749 31.1498 34.7122 32.1877 34.1566 33.2207 cv
33.097 35.3008 31.5577 37.5364 29.319 39.4349 cv
27.1166 41.3622 24.1068 42.783 20.7568 43.2414 cv
20.3423 43.3295 19.9127 43.306 19.487 43.3371 cv
19.0499 43.341 18.6525 43.4073 18.1766 43.3588 cv
17.3438 43.2942 16.5063 43.2512 15.6145 43.0388 cv
14.7201 42.9067 13.891 42.5873 13.0339 42.3255 cv
12.618 42.1602 12.2105 41.9669 11.7972 41.7872 cv
11.3769 41.6203 10.9841 41.3949 10.5936 41.1622 cv
10.2079 40.9233 9.79029 40.7335 9.42866 40.4521 cv
9.05944 40.1846 8.68889 39.9159 8.31703 39.6463 cv
7.95325 39.3675 7.62595 39.0408 7.2729 38.7451 cv
7.10075 38.592 6.92183 38.4457 6.75496 38.2863 cv
6.27829 37.7816 li
5.96865 37.4375 5.62336 37.1234 5.34161 36.7524 cv
4.47079 35.6576 li
4.18278 35.2898 3.94939 34.881 3.68547 34.4934 cv
3.29859 33.9044 li
2.95825 33.286 li
1.99764 31.6603 1.33718 29.8583 .833766 28.0206 cv
.487567 26.6278 li
.393239 26.1588 .33382 25.6826 .255337 25.2089 cv
.144422 24.4965 li
.0938327 23.7778 li
0 22.3365 li
.0297096 20.8977 li
.0477004 20.1862 li
.127091 19.4609 li
.18486 18.9783 .224555 18.4893 .299241 18.01 cv
.587589 16.5902 li
1.0532 14.7208 1.68131 12.8766 2.62038 11.1995 cv
3.5295 9.51298 4.64608 7.93775 5.9878 6.60278 cv
6.47801 6.09128 li
6.6495 5.92963 6.83303 5.78115 7.00981 5.62589 cv
7.37094 5.32442 7.71277 5.00016 8.0881 4.72111 cv
8.47201 4.45247 8.85461 4.18479 9.23571 3.91815 cv
9.6089 3.63841 10.0384 3.45039 10.4353 3.21412 cv
10.8371 2.98399 11.2406 2.76164 11.6714 2.5983 cv
12.0949 2.42108 12.5132 2.23323 12.94 2.0763 cv
13.8169 1.82936 14.6721 1.5261 15.5624 1.41489 cv
16.4385 1.22277 17.3238 1.19461 18.196 1.14901 cv
18.3227 1.14573 18.3739 1.13409 18.5624 1.13785 cv
18.8737 1.15795 li
19.4936 1.19793 li
19.9114 1.23742 20.3009 1.21924 20.7391 1.31677 cv
24.1702 1.83041 27.1266 3.26947 29.3397 5.21241 cv
31.574 7.12387 33.1105 9.36261 34.168 11.4459 cv
34.7234 12.4798 35.0858 13.5186 35.4328 14.4637 cv
35.7086 15.4362 35.9938 16.3153 36.1344 17.1404 cv
36.2146 17.5497 36.3087 17.9335 36.3645 18.3001 cv
36.4089 18.6686 36.4505 19.0139 36.4893 19.3353 cv
36.5302 19.656 36.568 19.9529 36.6027 20.2248 cv
36.6132 20.4987 36.6228 20.7475 36.6314 20.9704 cv
36.6646 21.8613 36.6822 22.338 36.6822 22.338 cv
cp
.243137 .313726 .705882 rgb
f
82.4826 58.8017 mo
82.4826 50.0528 76.0191 42.3403 66.191 37.7899 cv
68.6599 40.9185 71.5316 46.0174 72.9035 53.7781 cv
75.5733 68.8795 59.7906 87.4156 58.2703 100.148 cv
57.1898 109.197 63.9758 113.06 67.9955 114.54 cv
68.82 114.26 69.5949 113.856 70.0993 113.164 cv
71.3184 111.492 70.3855 109.189 69.7423 107.222 cv
66.5716 97.527 73.1939 89.7984 76.6897 81.2973 cv
79.5473 74.3484 82.4826 66.4281 82.4826 58.8017 cv
cp
.290196 .592157 .721569 rgb
f
71.5468 24.3908 mo
71.5468 29.959 67.0328 34.473 61.4645 34.473 cv
55.8963 34.473 51.3823 29.959 51.3823 24.3908 cv
51.3823 18.8225 55.8963 14.3085 61.4645 14.3085 cv
67.0328 14.3085 71.5468 18.8225 71.5468 24.3908 cv
cp
1 1 1 rgb
f
69.8712 24.3908 mo
69.8712 29.0336 66.1074 32.7974 61.4645 32.7974 cv
56.8217 32.7974 53.0579 29.0336 53.0579 24.3908 cv
53.0579 19.7479 56.8217 15.9841 61.4645 15.9841 cv
66.1074 15.9841 69.8712 19.7479 69.8712 24.3908 cv
cp
.8 .858824 .219608 rgb
f
66.8056 24.3908 mo
66.8056 27.3405 64.4143 29.7318 61.4645 29.7318 cv
58.5148 29.7318 56.1235 27.3405 56.1235 24.3908 cv
56.1235 21.441 58.5148 19.0498 61.4645 19.0498 cv
64.4143 19.0498 66.8056 21.441 66.8056 24.3908 cv
cp
0 0 0 rgb
f
68.5889 19.6496 mo
68.5889 21.8911 66.7717 23.7083 64.5302 23.7083 cv
62.2886 23.7083 60.4715 21.8911 60.4715 19.6496 cv
60.4715 17.408 62.2886 15.5909 64.5302 15.5909 cv
66.7717 15.5909 68.5889 17.408 68.5889 19.6496 cv
cp
1 1 1 rgb
f
36.7273 22.9499 mo
36.7273 22.9499 36.9553 22.7513 37.3865 22.445 cv
37.8221 22.1474 38.4473 21.716 39.2536 21.2936 cv
40.0601 20.8754 41.0245 20.4156 42.1125 20.0564 cv
42.6595 19.8887 43.2264 19.7108 43.8203 19.5992 cv
44.4107 19.4725 45.0214 19.3939 45.6344 19.3379 cv
46.2496 19.3072 46.8677 19.2934 47.4739 19.3515 cv
48.0815 19.3876 48.6714 19.5112 49.2337 19.6468 cv
49.7967 19.7866 50.3208 19.9889 50.8039 20.2048 cv
51.2817 20.4332 51.7219 20.6687 52.1045 20.9238 cv
52.4991 21.1587 52.8167 21.4402 53.1047 21.6712 cv
53.3746 21.927 53.6197 22.1356 53.8006 22.3295 cv
54.1521 22.7243 54.353 22.9499 54.353 22.9499 cv
54.353 22.9499 54.1201 22.7598 53.7123 22.4272 cv
53.5112 22.2599 53.2437 22.0853 52.952 21.8714 cv
52.6412 21.6842 52.3039 21.454 51.9104 21.251 cv
51.5242 21.0344 51.0851 20.8423 50.6155 20.6605 cv
50.1402 20.4911 49.6308 20.345 49.0966 20.2261 cv
48.5606 20.1145 48.0001 20.0359 47.4262 20.0025 cv
46.8533 19.9544 46.2667 19.977 45.6829 20.0118 cv
44.513 20.0906 43.3549 20.3327 42.2861 20.6242 cv
41.2212 20.9318 40.2368 21.2769 39.4174 21.6354 cv
38.5993 21.9954 37.9167 22.307 37.4549 22.5568 cv
36.9894 22.7999 36.7273 22.9499 36.7273 22.9499 cv
cp
.243137 .313726 .705882 rgb
f
80.6595 26.1193 mo
80.6595 26.1193 80.6963 25.7683 80.7658 25.1078 cv
80.7833 24.9427 80.8026 24.7585 80.8241 24.5556 cv
80.829 24.3518 80.8345 24.1293 80.8403 23.8888 cv
80.8556 23.4078 80.8584 22.855 80.7917 22.2393 cv
80.7345 21.0051 80.4081 19.5224 79.8366 17.9225 cv
79.2551 16.3254 78.3125 14.6278 76.9475 13.1028 cv
76.2779 12.329 75.4661 11.6408 74.5841 11.0094 cv
74.1117 10.7415 73.6702 10.4037 73.1516 10.191 cv
72.899 10.0776 72.6485 9.935 72.3902 9.84135 cv
72.1322 9.75331 71.8723 9.66464 71.6106 9.57534 cv
70.4561 9.25021 69.3189 9.05425 68.1081 9.11485 cv
67.5061 9.09523 66.9076 9.23323 66.3012 9.31415 cv
65.7085 9.47617 65.0963 9.59237 64.5155 9.84191 cv
63.9145 10.0319 63.3603 10.3555 62.7854 10.6388 cv
62.2419 10.983 61.6796 11.3095 61.1768 11.7335 cv
60.6404 12.1124 60.1853 12.598 59.696 13.0478 cv
59.2576 13.5494 58.7895 14.0314 58.4009 14.5851 cv
57.9718 15.1086 57.631 15.6975 57.2647 16.2738 cv
57.0896 16.5666 56.9473 16.8787 56.7861 17.1813 cv
56.6237 17.4838 56.4705 17.7915 56.35 18.1145 cv
55.9456 19.0681 li
55.6252 20.0434 li
55.4645 20.5341 li
55.3422 21.0533 li
55.1005 22.0766 li
54.6221 24.8148 54.6613 27.7125 55.5566 30.3413 cv
55.9682 31.6597 56.5682 32.9118 57.3448 34.0153 cv
57.7079 34.5856 58.1562 35.0856 58.5939 35.5821 cv
59.0778 36.0337 59.5289 36.5142 60.0657 36.8806 cv
60.5655 37.2951 61.1319 37.5983 61.6716 37.9226 cv
62.2449 38.1758 62.8054 38.4826 63.3827 38.6281 cv
63.6769 38.7088 63.9311 38.8261 64.2489 38.8784 cv
64.5609 38.9371 64.871 38.9955 65.1794 39.0535 cv
65.4236 39.1171 65.7574 39.1091 66.0381 39.1412 cv
66.3311 39.1589 66.6206 39.2049 66.9104 39.1752 cv
68.0712 39.1932 69.1817 38.9594 70.2338 38.6766 cv
71.2698 38.3354 72.2529 37.9202 73.1275 37.3845 cv
74.8939 36.3419 76.312 35.0149 77.3563 33.672 cv
78.3935 32.3248 79.162 31.0143 79.5956 29.8566 cv
79.8484 29.2904 80.0158 28.765 80.148 28.3031 cv
80.216 28.0727 80.2789 27.8596 80.3365 27.6642 cv
80.3784 27.4637 80.4166 27.2815 80.4506 27.1184 cv
80.5871 26.4659 80.6595 26.1193 80.6595 26.1193 cv
cp
80.7927 26.1432 mo
80.7927 26.1432 80.7245 26.4936 80.5973 27.148 cv
80.5656 27.3116 80.5301 27.4943 80.491 27.6954 cv
80.4357 27.8939 80.3751 28.1105 80.3099 28.3445 cv
80.1772 28.8126 80.0488 29.359 79.8171 29.9414 cv
79.4104 31.1241 78.7985 32.5357 77.832 34.0134 cv
76.8654 35.4808 75.5422 37.0446 73.7009 38.2918 cv
73.2552 38.6245 72.7454 38.8784 72.2349 39.1534 cv
71.7176 39.4135 71.1561 39.6136 70.5919 39.8229 cv
70.008 39.9757 69.4217 40.1746 68.796 40.2308 cv
68.4857 40.2677 68.1756 40.3312 67.8587 40.3455 cv
67.5413 40.3505 67.2214 40.3555 66.8995 40.3606 cv
66.5772 40.3788 66.2562 40.3199 65.9322 40.2881 cv
65.6002 40.2378 65.3021 40.2433 64.9382 40.1448 cv
64.6342 40.0676 64.3283 39.9899 64.0207 39.9118 cv
63.715 39.8409 63.3852 39.6838 63.0683 39.5713 cv
62.4104 39.3521 61.8441 38.9908 61.2428 38.6729 cv
60.6823 38.2873 60.1055 37.9187 59.605 37.4444 cv
59.0661 37.0167 58.6239 36.4794 58.1545 35.9737 cv
57.7388 35.4192 57.2911 34.887 56.9406 34.2809 cv
56.5454 33.7045 56.2589 33.0616 55.9255 32.4434 cv
55.6594 31.7925 55.364 31.1498 55.1646 30.4687 cv
54.7064 29.1271 54.439 27.7131 54.3093 26.2847 cv
54.1317 24.8537 54.2309 23.403 54.3694 21.9609 cv
54.5496 20.8932 li
54.6382 20.3673 li
54.7734 19.8341 li
55.0502 18.7649 li
55.4115 17.7344 li
55.5256 17.3877 55.6733 17.0552 55.8312 16.7271 cv
55.9882 16.3991 56.1268 16.0613 56.2997 15.7418 cv
56.6618 15.1114 57.0021 14.4675 57.4372 13.8854 cv
57.8261 13.2707 58.3245 12.7414 58.7857 12.1872 cv
59.3023 11.6844 59.7872 11.1483 60.3624 10.7169 cv
60.9018 10.2422 61.5101 9.86367 62.1031 9.47165 cv
62.7306 9.13878 63.34 8.77003 64.0073 8.53681 cv
64.6523 8.24972 65.335 8.0799 66.0079 7.90635 cv
66.6949 7.80672 67.3744 7.65699 68.06 7.67193 cv
68.4012 7.67321 68.7422 7.63261 69.0782 7.6709 cv
69.4146 7.70346 69.749 7.73583 70.0813 7.76799 cv
70.2057 7.78155 li
70.2678 7.78836 li
70.2986 7.79174 li
70.3708 7.80564 li
70.5989 7.85838 li
71.0528 7.96333 li
71.357 8.03909 71.6455 8.08182 71.9696 8.21223 cv
72.2846 8.32546 72.5972 8.4379 72.9076 8.54956 cv
73.2125 8.66852 73.4832 8.82732 73.7687 8.96347 cv
74.3469 9.21935 74.8414 9.59862 75.3493 9.92978 cv
76.3076 10.6714 77.164 11.4772 77.8236 12.3748 cv
79.1831 14.1415 79.9556 16.0399 80.4192 17.7366 cv
80.8812 19.4422 81.0274 20.9748 81.0471 22.226 cv
81.0865 22.8524 81.04 23.4104 81.02 23.8957 cv
81.0093 24.1381 80.9994 24.3625 80.9901 24.568 cv
80.9645 24.7722 80.9414 24.9577 80.9206 25.1238 cv
80.8373 25.7877 80.7927 26.1432 80.7927 26.1432 cv
cp
f
168.624 332.807 mo
168.615 332.836 168.609 332.855 168.609 332.855 cv
168.609 332.855 168.617 332.839 168.624 332.807 cv
cp
.156863 .196078 .305882 rgb
f
168.78 327.088 mo
168.981 325.984 169.193 324.302 169.046 322.649 cv
168.983 321.43 168.246 310.559 161.973 309.127 cv
161.973 309.127 160.702 309.888 158.944 313.783 cv
157.186 317.678 157.227 319.699 157.227 319.699 cv
157.227 319.699 161.774 318.131 164.995 319.217 cv
164.641 319.539 164.232 319.947 163.767 320.47 cv
161.836 322.642 161.453 323.962 161.453 323.962 cv
161.453 323.962 165.521 323.842 167.177 325.754 cv
167.202 325.782 167.223 325.808 167.247 325.836 cv
166.907 326.028 166.342 326.428 165.547 327.251 cv
164.145 328.703 163.841 329.608 163.841 329.608 cv
163.841 329.608 166.667 329.641 167.762 331.015 cv
168.663 332.145 168.655 332.66 168.624 332.807 cv
168.748 332.396 169.655 329.222 168.78 327.088 cv
cp
f
206.136 358.922 mo
202.451 360.879 199.417 364.501 198.494 368.57 cv
197.772 371.757 198.969 374.774 200.127 377.661 cv
201.238 380.433 201.312 385.987 204.545 387.282 cv
205.34 387.6 206.274 387.642 207.038 387.255 cv
207.643 386.949 208.093 386.409 208.494 385.862 cv
211.733 381.445 213.134 375.211 214.254 369.937 cv
215.005 366.402 215.872 362.616 213.302 359.553 cv
212.372 358.444 210.949 357.713 209.504 357.785 cv
208.772 357.821 208.063 358.053 207.386 358.333 cv
206.963 358.507 206.545 358.704 206.136 358.922 cv
cp
.227451 .607843 .337255 rgb
f
239.309 351.7 mo
239.464 350.946 237.946 349.996 235.919 349.579 cv
235.341 349.46 234.787 349.399 234.283 349.387 cv
233.945 348.709 233.463 348.112 232.875 347.632 cv
233.03 347.385 233.155 347.136 233.246 346.889 cv
234.44 346.776 235.352 346.187 235.343 345.486 cv
235.334 344.716 234.219 344.106 232.854 344.122 cv
232.503 344.126 232.17 344.172 231.868 344.251 cv
230.939 344.114 229.743 344.451 228.676 345.239 cv
228.235 345.565 227.863 345.935 227.566 346.322 cv
225.479 344.739 220.54 340.453 220.061 335.064 cv
219.43 327.956 222.386 322.556 222.599 322.178 cv
222.995 321.6 223.278 320.898 223.387 320.116 cv
223.705 317.853 222.472 315.808 220.634 315.55 cv
218.926 315.31 217.297 316.698 216.82 318.712 cv
216.797 318.698 li
216.62 318.995 212.47 326.061 213.323 335.663 cv
214.109 344.506 221.927 350.641 224.23 352.267 cv
224.407 354.103 225.53 355.713 227.168 356.521 cv
227.286 356.912 227.504 357.323 227.821 357.702 cv
228.636 358.677 229.776 359.067 230.366 358.574 cv
230.753 358.25 230.802 357.627 230.566 356.962 cv
230.649 356.946 230.733 356.929 230.816 356.909 cv
230.943 357.086 231.08 357.263 231.227 357.439 cv
232.519 358.984 234.045 359.837 234.636 359.343 cv
235.226 358.849 234.658 357.196 233.366 355.651 cv
233.33 355.609 233.294 355.569 233.258 355.527 cv
233.353 355.434 233.446 355.338 233.533 355.237 cv
233.657 355.318 233.783 355.397 233.914 355.475 cv
235.648 356.499 237.372 356.791 237.763 356.128 cv
238.154 355.465 237.065 354.098 235.33 353.074 cv
235.132 352.957 234.933 352.85 234.737 352.753 cv
234.753 352.665 234.774 352.58 234.787 352.491 cv
234.801 352.387 234.806 352.284 234.814 352.18 cv
234.991 352.227 235.171 352.271 235.357 352.309 cv
237.384 352.727 239.154 352.454 239.309 351.7 cv
cp
f
200.698 313.489 mo
219.187 310.521 li
218.803 309.608 218.37 308.711 217.874 307.835 cv
217.537 307.238 222.767 301.47 222.83 300.21 cv
222.866 299.503 222.854 298.745 222.792 297.977 cv
222.67 296.491 222.357 294.967 221.819 293.702 cv
219.932 289.267 215.867 286.562 211.025 286.66 cv
207.512 286.732 204.387 288.323 202.262 290.792 cv
201.945 281.782 194.455 274.666 185.411 274.851 cv
176.285 275.037 169.037 282.587 169.224 291.713 cv
169.231 292.065 169.253 292.413 169.282 292.759 cv
168.056 292.785 li
162.354 292.907 157.556 301.179 155.554 305.521 cv
160.066 306.718 163.803 310.152 165.937 314.305 cv
169.102 320.467 167.999 326.913 168.542 333.513 cv
169.044 339.617 170.184 345.689 172.11 351.508 cv
174.991 360.212 179.95 369.817 188.395 374.285 cv
190.925 375.624 193.74 376.391 196.612 376.332 cv
202.43 376.213 207.438 372.773 211.094 368.47 cv
214.686 364.243 217.247 359.232 219.05 354.009 cv
221.024 348.293 222.892 342.894 223.516 336.805 cv
224.099 331.104 224.619 325.327 224.007 319.605 cv
223.808 317.747 223.743 313.785 222.208 312.597 cv
220.79 311.5 218.075 312.355 216.474 312.45 cv
214.144 312.587 211.814 312.737 209.485 312.891 cv
206.555 313.084 203.627 313.283 200.698 313.489 cv
cp
.254902 .658824 .372549 rgb
f
207.839 312.343 mo
207.042 304.397 205.449 296.834 203.185 289.836 cv
202.86 290.138 202.551 290.456 202.262 290.792 cv
201.945 281.782 194.455 274.666 185.411 274.851 cv
176.285 275.037 169.037 282.587 169.224 291.713 cv
169.231 292.065 169.253 292.413 169.282 292.759 cv
168.056 292.785 li
162.354 292.907 157.556 301.179 155.554 305.521 cv
160.066 306.718 163.803 310.152 165.937 314.305 cv
169.102 320.467 167.999 326.913 168.542 333.513 cv
169.044 339.617 170.184 345.689 172.11 351.508 cv
174.991 360.212 179.95 369.817 188.395 374.285 cv
190.368 375.329 192.515 376.019 194.726 376.247 cv
203.59 361.994 208.832 342.731 208.401 321.626 cv
208.341 318.706 208.171 315.828 207.903 312.996 cv
203.92 313.262 200.698 313.489 200.698 313.489 cv
207.839 312.343 li
cp
.380392 .741176 .427451 rgb
f
199.951 288.228 mo
202.247 295.873 197.911 303.932 190.266 306.228 cv
182.62 308.524 174.561 304.188 172.265 296.543 cv
169.969 288.898 174.305 280.838 181.95 278.542 cv
189.596 276.246 197.655 280.582 199.951 288.228 cv
cp
.156863 .196078 .305882 rgb
f
198.981 289.924 mo
200.989 296.61 197.197 303.657 190.512 305.665 cv
183.826 307.673 176.779 303.881 174.771 297.196 cv
172.763 290.51 176.555 283.463 183.24 281.455 cv
189.926 279.447 196.973 283.239 198.981 289.924 cv
cp
1 1 1 rgb
f
197.447 291.871 mo
199.121 297.445 195.96 303.321 190.385 304.995 cv
184.811 306.669 178.935 303.508 177.261 297.934 cv
175.587 292.359 178.748 286.483 184.323 284.809 cv
189.897 283.135 195.773 286.296 197.447 291.871 cv
cp
.992157 .752941 .0235294 rgb
f
196.507 289.752 mo
197.307 292.418 195.795 295.228 193.129 296.029 cv
190.464 296.829 187.654 295.317 186.853 292.652 cv
186.052 289.986 187.564 287.176 190.23 286.375 cv
192.896 285.574 195.706 287.086 196.507 289.752 cv
cp
0 0 0 rgb
f
189.955 288.555 mo
189.184 289.868 187.408 290.257 185.989 289.424 cv
184.57 288.591 184.044 286.851 184.815 285.538 cv
185.586 284.225 187.361 283.836 188.78 284.669 cv
190.2 285.502 190.725 287.242 189.955 288.555 cv
cp
1 1 1 rgb
f
220.255 294.718 mo
221.666 299.413 219.002 304.363 214.307 305.773 cv
209.611 307.184 204.661 304.52 203.251 299.825 cv
201.841 295.129 204.504 290.179 209.2 288.769 cv
213.895 287.359 218.845 290.022 220.255 294.718 cv
cp
.156863 .196078 .305882 rgb
f
219.133 296.102 mo
220.354 300.166 218.049 304.45 213.985 305.671 cv
209.921 306.892 205.637 304.587 204.416 300.523 cv
203.195 296.459 205.5 292.175 209.564 290.954 cv
213.628 289.733 217.912 292.038 219.133 296.102 cv
cp
1 1 1 rgb
f
217.91 296.47 mo
218.928 299.858 217.006 303.43 213.617 304.448 cv
210.229 305.466 206.657 303.544 205.639 300.155 cv
204.621 296.767 206.543 293.195 209.932 292.177 cv
213.32 291.159 216.892 293.081 217.91 296.47 cv
cp
.992157 .752941 .0235294 rgb
f
174.305 311.883 mo
174.322 312.684 173.685 313.347 172.884 313.364 cv
172.082 313.38 171.419 312.744 171.403 311.942 cv
171.387 311.141 172.023 310.478 172.824 310.461 cv
173.626 310.445 174.289 311.081 174.305 311.883 cv
cp
.980392 .772549 .109804 rgb
f
179.855 313.512 mo
179.88 314.714 178.925 315.708 177.723 315.733 cv
176.521 315.757 175.526 314.803 175.502 313.601 cv
175.477 312.398 176.432 311.404 177.634 311.379 cv
178.836 311.355 179.831 312.309 179.855 313.512 cv
cp
f
177.946 308.905 mo
177.959 309.506 177.481 310.003 176.88 310.016 cv
176.279 310.028 175.782 309.551 175.77 308.949 cv
175.757 308.348 176.235 307.851 176.836 307.839 cv
177.437 307.827 177.934 308.304 177.946 308.905 cv
cp
f
219.187 310.521 mo
219.251 310.532 193.916 315.058 190.788 316.451 cv
189.353 317.09 185.191 320.268 184.602 317.112 cv
183.468 311.038 192.626 309.016 196.744 308.778 cv
199.647 308.611 202.704 308.519 205.603 308.699 cv
207.716 308.831 209.816 309.125 211.914 309.418 cv
212.665 309.523 215.185 309.809 219.187 310.521 cv
cp
.968627 .854902 .392157 rgb
f
219.187 310.521 mo
219.172 310.578 194.318 315.433 191.269 316.771 cv
189.87 317.386 185.812 320.439 185.238 317.407 cv
184.135 311.575 193.063 309.631 197.076 309.401 cv
199.906 309.239 202.886 309.15 205.711 309.322 cv
207.771 309.448 209.818 309.729 211.863 310.01 cv
212.595 310.111 219.253 310.267 219.187 310.521 cv
cp
.156863 .196078 .305882 rgb
f
183.355 319.961 mo
182.957 319.471 182.637 318.917 182.417 318.347 cv
182.233 317.871 182.093 317.36 182.045 316.85 cv
182.014 316.511 181.916 315.59 182.115 315.317 cv
181.762 315.802 181.584 316.399 181.539 316.996 cv
181.436 318.356 181.874 319.769 182.869 320.726 cv
183.952 321.767 185.601 322.179 187.046 321.769 cv
185.573 321.866 184.261 321.076 183.355 319.961 cv
cp
.278431 .333333 .466667 rgb
f
200.151 312.248 mo
200.15 312.24 200.148 312.231 200.145 312.223 cv
199.479 309.717 191.009 312.553 189.453 313.103 cv
187.958 313.631 186.783 314.5 186.45 316.127 cv
186.349 316.62 186.48 317.195 186.895 317.48 cv
187.282 317.745 187.814 317.693 188.24 317.496 cv
188.666 317.299 189.02 316.978 189.402 316.705 cv
192.399 314.56 196.584 314.99 199.681 313.156 cv
199.995 312.97 200.23 312.601 200.151 312.248 cv
cp
.576471 .396078 .721569 rgb
f
195.297 272.412 mo
195.989 273.767 196.626 275.146 197.292 276.512 cv
197.937 277.887 198.577 279.265 199.201 280.649 cv
200.459 283.413 201.671 286.197 202.866 288.988 cv
202.297 288.743 li
203.269 288.392 204.238 288.03 205.214 287.687 cv
206.191 287.348 207.165 286.998 208.148 286.676 cv
209.128 286.343 210.114 286.028 211.101 285.717 cv
212.096 285.425 213.081 285.105 214.085 284.838 cv
213.15 285.292 212.196 285.694 211.252 286.123 cv
210.302 286.533 209.349 286.938 208.39 287.327 cv
207.435 287.725 206.47 288.097 205.509 288.479 cv
204.546 288.856 203.576 289.216 202.61 289.585 cv
202.21 289.738 li
202.04 289.341 li
200.85 286.547 199.677 283.747 198.549 280.927 cv
197.981 279.519 197.428 278.105 196.881 276.688 cv
196.354 275.262 195.798 273.849 195.297 272.412 cv
cp
.156863 .196078 .305882 rgb
f
174.326 368.46 mo
174.855 367.902 174.066 366.294 172.564 364.87 cv
172.136 364.465 171.697 364.121 171.275 363.845 cv
171.346 363.091 171.251 362.329 171.005 361.611 cv
171.267 361.483 171.505 361.338 171.712 361.175 cv
172.786 361.709 173.871 361.689 174.234 361.089 cv
174.632 360.43 174.007 359.324 172.838 358.618 cv
172.537 358.436 172.23 358.3 171.933 358.207 cv
171.215 357.601 170.021 357.257 168.699 357.364 cv
168.153 357.408 167.641 357.526 167.184 357.698 cv
166.247 355.252 164.311 349.007 166.746 344.175 cv
169.958 337.803 175.317 334.774 175.698 334.565 cv
176.339 334.283 176.95 333.835 177.455 333.229 cv
178.919 331.474 178.949 329.086 177.524 327.898 cv
176.199 326.793 174.083 327.113 172.616 328.572 cv
172.604 328.549 li
172.297 328.707 165.044 332.522 160.705 341.13 cv
156.709 349.058 160.116 358.393 161.215 360.99 cv
160.398 362.643 160.503 364.604 161.469 366.154 cv
161.362 366.548 161.331 367.012 161.4 367.502 cv
161.578 368.76 162.341 369.692 163.103 369.584 cv
163.602 369.514 163.973 369.01 164.122 368.32 cv
164.202 368.35 164.282 368.381 164.363 368.407 cv
164.378 368.624 164.401 368.847 164.433 369.074 cv
164.716 371.069 165.563 372.598 166.325 372.49 cv
167.087 372.382 167.475 370.677 167.193 368.683 cv
167.185 368.628 167.175 368.575 167.166 368.521 cv
167.296 368.491 167.426 368.459 167.554 368.42 cv
167.616 368.553 167.681 368.688 167.751 368.822 cv
168.685 370.607 169.995 371.764 170.677 371.407 cv
171.359 371.051 171.155 369.315 170.221 367.53 cv
170.114 367.325 170.001 367.13 169.886 366.943 cv
169.946 366.878 170.009 366.817 170.066 366.748 cv
170.134 366.667 170.192 366.582 170.254 366.498 cv
170.379 366.631 170.509 366.763 170.647 366.894 cv
172.149 368.318 173.796 369.019 174.326 368.46 cv
cp
.227451 .607843 .337255 rgb
f
188.158 333.506 mo
184.655 340.335 183.894 348.974 184.127 356.713 cv
184.258 361.046 186.575 364.686 188.802 368.264 cv
190.727 371.356 191.641 374.601 195.593 374.786 cv
203.924 360.689 208.817 342.025 208.401 321.626 cv
208.396 321.389 208.379 321.157 208.373 320.92 cv
206.114 321.11 203.672 321.614 201.094 322.429 cv
194.82 324.411 190.743 328.466 188.158 333.506 cv
cp
.537255 .780392 .419608 rgb
f
186.534 359.322 mo
190.295 361.127 193.475 364.622 194.563 368.65 cv
195.415 371.806 194.342 374.868 193.303 377.801 cv
192.306 380.616 192.459 386.168 189.281 387.594 cv
188.499 387.944 187.568 388.024 186.789 387.669 cv
186.172 387.387 185.701 386.866 185.278 386.336 cv
181.861 382.055 180.206 375.884 178.872 370.66 cv
177.977 367.158 176.956 363.411 179.399 360.245 cv
180.283 359.099 181.675 358.311 183.122 358.323 cv
183.855 358.33 184.572 358.533 185.261 358.785 cv
185.691 358.942 186.116 359.122 186.534 359.322 cv
cp
.380392 .741176 .427451 rgb
f
216.973 295.031 mo
217.534 296.9 216.474 298.87 214.605 299.431 cv
212.736 299.992 210.766 298.932 210.205 297.063 cv
209.643 295.194 210.703 293.224 212.572 292.663 cv
214.441 292.102 216.411 293.162 216.973 295.031 cv
cp
0 0 0 rgb
f
212.379 294.191 mo
211.839 295.112 210.594 295.385 209.599 294.801 cv
208.604 294.217 208.236 292.997 208.776 292.076 cv
209.316 291.156 210.561 290.883 211.556 291.467 cv
212.551 292.051 212.92 293.27 212.379 294.191 cv
cp
1 1 1 rgb
f
220.224 324.525 mo
217.591 321.662 213.449 320.493 208.373 320.92 cv
208.379 321.157 208.396 321.389 208.401 321.626 cv
208.817 342.025 203.924 360.689 195.593 374.786 cv
195.801 374.795 196.01 374.803 196.236 374.795 cv
199.898 374.67 204.838 372.881 207.514 370.441 cv
213.774 364.734 217.049 356.32 219.276 348.342 cv
221.097 341.818 225.536 330.304 220.224 324.525 cv
cp
.380392 .741176 .427451 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.0
%%For: (Alex) ()
%%Title: (1511.m10.i304.n020.S.c12.254619130 Cute monsters vector set in cartoon style.eps)
%%CreationDate: 11/7/2015 7:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBjVOso)Ja[rHun;L^OOkEV9Q48I/0-"9HI^LLbp+2RDW;55;hbIoUX;9M[E8-HYe>jRtb2G[aD?;Us=TY--WIQL^#Q]j.OD
%jVr\fA5koR1[C'tAQ7DA1@'[ss7N"\V&,D,^YQqt<F*j=DDc3tQAS9+XD6K*V9@SiNG/c[;Rbf?4%HDBa`"Y4)V%<X]oh"DmF<ut
%hA(G.1*?F/[IGc2YBm#a8<_dac\n'g?Ym)a?705o'dDr+Pk])7;F(N^S*9SA?4BFQI]!:uK=m=pl1fO1//"oRcgmuDs/ON8[(K/1
%;?*qRXLUKPAUWPs4n\n3"!QWqAb_WApm5<rg0nQ)+tiZD=ik%eX-pjP;VIAXJq?tu8)aKP^Sst!#l[t.nc'2*s"F;PAb:qtauML4
%?l9kmY`t)T_IniU;#:Sbatcs020eE<RT6QOZUQcW.r2Z'Rp!3O$^t"<PA!6[BG$P(F.KC-/<9.1>of)BWhEsG'ks+FA8OJ'(:CpW
%Zf;#=aLq#UZJXZdS837B.fY4b1ea-%iT0$:eSi.'=$!!MMeF_YTn>hfY<itujMe,hD(^W?Ir^QJYBArN^jI*O/iM'G`_h>+YIh2j
%n$eA?W:E7bRst=CnW#*!Whp9cBW,-:<AKT8@gcc6L6YUN-S.q#Mo51S3lmZ!^_']3@B4EKWGe`fWuTaNLASV`.7\PsCDhp+5n[]K
%iEnP=QWFm>mWAAQ:ifVuh`26oJ<E&T_4l/>jdejMp#!d(k/$cWcn28W/,hF&$[mXY\kOdb&^F`B+@2ia)?9B%fBeuJIT5^Oa60Qo
%\%,STD#Esuj]o?9iFh$CV,!ch/R$F>?@7OCXCRWrG@jTS?4$1Q^P=pSYL6YnOWhg!nh]V_Untg1s%S[u\h9XHPQ@QIepmPH7T7Bq
%nYO@tW9VpH<e`ek)=CRT_A<aT'P3,[Icl-Z4Mb-gTGG\(G^Ap&_B=4u;q-8mhNnDn]N42sUNM1u<qa34J(%qSEoV@9f=fjXl80A#
%H(A^f(]8Ti*U87T2:=;GT$c!I\DpSiQ)g5&]WRJSq,XtQSN1ODWaY<%hntVqDtF?7VA,fc\*A`k-;T,jS>!DW^c.QkL._nQ-'\TT
%kGa\20tZNS5h(=e30`UeQNoF`?b&^=N$lAU(QE1+>mk]i.7_a+.]'.po"3`J;dn-HM(4jfU\L``:RjP5QMttTfPHn>3d:t!PA[5W
%7t%^@CSDW63P"jP5%uG'4Gg@#cXC&la0#%-OX$<pY`C1#Sc_6#cp)dqrm#>qhqfIA^BWkRIMXI[oHh0$mh)0M1Wt:"Wce*H%LQlL
%0"N&FJ8>Z3F01b[b>Z!T<6Hl.:)mI"nK&)diCEg@o,GZ'O3>\o9'5XMA6H[)Zi'Hq?-`'9!1(2t@iST-X3GL;OP;kC<L_Us\N3oY
%8i_SVaE1Y'UhPnI.:i4%HQoC\)BjQ0b+7i4JoJHW(?X>S>[;PO8/!]6Q8f=oVM-JoB\>!E]4_hB6GOH4=uoMm%21hZf#;=9[/;i+
%j\r*'@(`U"7r_oX>VGoJKjq#NMA0ZO3uFAcbgE.iG\t4JnpbaInhc0U_gbn-eJfm,$FkP["`+hoL/ZNBbS^(k$)`cKWnsiuQ9*mK
%<'lGc.D]Um`RSB3*t=D4l)7o8e9e_%B,L4iog(/Ho:M-1[S6%`d;>0HkA5107\Wi`h4?_2.jt\NB_j:k-BT`FM-+],^X*t%9s_,>
%h;o0tJt/+R'mO!Q0/K)<.eiC+jU=/7P>aJ%Q'5-,3L(8s\SQQLmT*[R.db3CbbYU"agp3nc/hh3d;giu_k8C?ErW^5E\8a&Ep5,d
%?!E9@>i,MF=&6!4EoYb</C1/.QW]s2)2g>P9-qe-ZatFPn$!Cf@OMU<?=$UCK+NGPB5]4]k'!Y-n:+JP=)b0rJB32_?GLWcgMU**
%H@Bh6c*lN"U4(0uL>;>ONk&k782EAnDfL.sfBm2l]c*6(D8.m&2b]':\(T@D8[c1rjU5O'<V04/;dtTDV>RnG4T1.s0>FQ%@Y1-=
%[Y2PXk_It[p,.n@Iu4[cm;D7</,:P=03o71fPf%5<`02-XkBh&Xkga]NOiImdp2iCDG@q=o'J:!m>a,kHr6%eST)At)#cHt8,l;W
%PlKV"]\Z=.`Jb%,f%"l%OZksKRm+hhUJgRIVjk0!rOH[5n?0@K#Mck3HH(mObl#UKC'S20rOBgfFlY$m/0[?:@Gtg[Y9Pq11>S7-
%V3,1_!$inD1"6-_NLiTDIC<]X1PFQ-`s=HlUZ%rLP?07T3Wm,^K;-ttFKTD.-VaL9:CiKW3!gWRdQ:4e]?LOCn68sXC2tr?Sb*2n
%R-jE6CE[otr*rU%V7DXIjn?uD)NALGjno'PYlHNU4+'rn-^jWJ5-!Ds1IrF0DIX/=.Q*^TW,Tp1=1W*&&hr21r+o5RAYkJsI\pZa
%0Og:tGSB+H:+HhnXl_Lt/=9n^S\]$]@_p\@JCc!9##'*Z7tR'1YDHmYMm/Oi&MP`SHHZ5:ej"NjkVbNt4R[krdgS%i1"(;JF42jA
%#W)(iq*JCaOJ61E"U25V5s^A[fCFNF>A9KkqccI89=kT2G.55a!q"[u5dD6`5ROid+)`9U0Ji/,*2copgq!.DFh`7^=6V`+1lIoQ
%8T%28>`+6Pn`B(4Em(4PU!dgZ]onH&^DqLC\K#XaLQ"!:5LnE4d;;K?ds)9%j%P*Hbenaa0\$$9qBB0\=n<cJ'[,(f:@E'6j4LD?
%_ZZHGHqS$Q1Z-_]9\JR+X/?M@k.>r.e$&egPpNcfgWVsY^UQ+`jq\ZNF^(uKU_)S'^Ij2!SF<mS8^Z3PNAQ8bj7[$QWkZ4(.@LC$
%XlHfe@Na^$@JmWO2/6iK[1V/1a`3_hHg>7>>"uIpYBkQ4<%E+K96!q)jAekJ:hg>g,1bK]Wo_\LFgP+S\Qls@/lP:UZ/1dGogV*(
%8>T4nefD&Y+srPiHs:'Vn/4XaK#1lY(o&C9oAAiW_Q-aQWS1qN:XrhR/nS=3jA(r-R%T][BdZLk@H:1Jfk?,.mhgti'.&Vl1EX/0
%aIOaMh8B'DMN[+f4Ll9i<gk@hCH3bh;,Y7(m-dAG%"DZIp7e>pB'0$m\JI^&7@B8]B>b"=`S?B7$:JJIee`$R8fD,M*nKFZPhEs`
%</*:%?%%k/U8/B5k.CJKlp[=t<LS3g;j5?na$>X=Cs2Xg4>5712;&W6GN6^@1rLK<`GO16U$aSXm@>'Wrf6T"3'oH_j&_\*hn7b:
%ZY1.Ib?JR(Y"aRbQGg0F.Zh.eED>HH>i==R$RjG/PO@-U_jZWU.T&p7g3BPCSMfZ58Q:nP[OA($XpCTu_i+3Z#];(jn3=;\.(dn%
%h8ko<."r"=2j3!q[i6>frq<B_<U]\X5C@A:<Wr9N?fAPd>;;A$R:6gYX6Xc*IA?r5SDp00k1UJoHcs18cX?im509amRZ^NBpf#;M
%^RO^3rjrIY1(1Im]B.W_"#&,j\!p5Eos0'MW=OHt2J.kAhs1tSiIo!n>GANpGjW[fZ/h`7o$Wjh,M"7rj+$R<QW\Bh(@.[2Mc:4-
%ccmg9FQ1OBbY*[4joGS(=E^,.'BLZ)cE+odWDRFhg>JGAG#Q%h5<#f);"&J>-FOREf3G%8MQ"qITK&Us*6<5;!Kn-P$sHSea^En5
%(a4SAK=3PSAC+snL,=P(bq4r!@sZ-N5:2CLR*=+5\4CfXHEBg&]&n4bG[g^%KB,-I7#Yient_m?kr0:A^Pd%oUg3qblb@K=2\\Z_
%s8J.`LF^0/ZC/!;au*P:k513s-6N)GCVFi6pKs<[a>MjX#mA@-hcZIdaYhu/`de4q+Y?bJ0=tqiH^L<%T3@tWLO^(_b-ej`9CV:C
%dU'C)A%sV+;Qi!S'e@:P>>kFnX4>4nd@sVk=4\I#=>/X([4.p;9eaK0`r"UfUYbE`oe^@0QQkP$1i(![.c7_#&[Hlm@lCMo^0fb#
%&&dA,eB=,X`obT>U[!%]>CLk(dIQQ)QZ6R"9SUi'kY-`V(,L&ub-dE&ZeK\iS.nUXhL@&`DJ.>VG-PWc3,d".X;'[h<VTe@8<(E3
%b@-i+L"u6Ilr^a.2l4=P$2_Ajc_];J8B@acoLf2VXi9!mY:aXu-&l<F8U(2PJnL0[ing<gec\Zt^-QVVLeRFg\NM$V:o*Y(%P,Z:
%M[[8>^rq7B4,-m?i.X[0./kCm0/E#@"##/Bpgi;O#$tiu70['fg"c_2oZI54fOb%]78EW"DQY3TMftn>XAG&gN606iB(6l.XDZ%?
%QVG\[%'tE96lHqTrN_:P]09kW<*Ze34K=[lO]ND;FJ$T>;-l"4bCcS&M.njP7sPcsC^c>6::"P]J4r2#bg"cgDd`D`*$"-]]mU<A
%Q+&EggQug$9QPRD-eD\8nOl'Z1We0?o8$*2<;m='"=YrgPK2?pZ1Fc9.'br@F^f^]rk:N79-Zf]f2d`B[_)L^UK?LHZL)k?2miL'
%8k>NVbAOZ4+-MT_MfXD?>'D\K"1-Q6IrOX[IMtZ#d,nbk[]Z&lUFe<^cZ+jq7l8IqKH#Bh2+\]&l4uN2ePK-LnZ,P_[De:"h3p$D
%)I]fIFPH+J7N'76@IHh.0kND*@ECLK9KU&8!lQhAa<9L[1HX'NEK#/\Bk88o<af7Q0k;86:?!*-!pFm.2S71\!'niU;CJO:%rZm,
%*?e>!X6+"lQ:@70msCBQYLN*BY8````u%piOTL6ihp*;*Cl5i[0"eW"D#$<,I_CtX<n"s9>I)cu-_3l-1an(qM[(B^Br.9`dZ57>
%D$cQk8u6jCFpJ<L1R1o`o:3\sU>.Ph:%>MWVi_0f)Rh*5!a[UG$7mi7NER5ZMqDo?&p\Cl.XRBR#5oG"PP5:+c+QDWI)#]tCP2Uc
%i9.K%]'*0\fCKsr>b'PE;GCA.4cgei#Pj!8G+eu6Bm-f+rcYIN6dGuX?(Rsm;jp1DoaP9N,&R*I-&gXK,tng3IR0Y0OKq.!ps(9@
%F8j&/MMu&kAK3eN:9$N!`g1\Vs,"9k3Xh@]3B<RmZanbZc(u9:j_Sg8-9uT0-YIL@2CGs[9fSb<EDqO\cHY3f/k*+gl("9ham#=c
%cH5>+Ga>Y<0#iS4XO/G'[Ce>N5P)4lFDWf!o/UlSk&[MTOn6+PRa3S>CCCSo+[aD)k-L*@.Af#o?3tmAVS"!LhCC>POPC[rTu;VW
%I%0'ecWlQO442e4b_OiO]GhYeYB7+=@AHBA.oeXF2c@U]gR[6P1gs\8G?]6Wo't\Lksm2aR?qej7)PM;?8U=u0f'p49P\!U0YKmd
%B[cXK49%DWaFNob"f,c?h\O/0:AkC\giWPfYF<a_a%rtPWnhMtH6rTejJ?oUA*gZN=6b"adY\e"^+H=5?)KaP?H)Ck0WYfV,XgU;
%'?kErnZK@MW4+kF^o%BH@?KC\.EA5e)\#b07;);m>H)aD/_PfI\(0,AFGk**Pa16/*kr&39,SlgG]28`.TE@im&+&H>PjU!Tg$-8
%ECtOu[lEmqkL&"on`Ub>%n_CI6&Y11h/(U><+BZmOr8E\K$',41\<'j+)q%O;`#^oOn=L+:GfX,-QJoDg*p44%E`1+8(-"Q_/:.W
%:@H9[%,qkg".=&MZ;M*W2hT]S@knn-/]45#Q=;W5ZRnP5U#b>O8!<L[%'r/J0%sXfC8H"4<<g_okAa>j>*[BUbtn"=L)_1G&^]Us
%3#bW8X:L>*A=3&+EQi.JbR]g"#8B0Vb->qua2WC`+Nqe0B@Z8B1S?]lmI<\^0p`Z\=ANms]N\nfa3"RuQUkF=9.ou:h+KR4c_^Rh
%&>/QPM:@L$s%3&%;F\,;rCk[`!TQ;8rQGdXcQRFXa@<+R*4]f*A=);UNH*"?gR["t)m+a$K$?2I/=+2_TL[u%*>u3>M:NL%P)T&J
%55<@ZP4@_09Xc4kiP0KMpGRBu*+(HU8b:0B>0.VqkKNZCN4`X&SM&LTe8g?#/E4Kj`\pnH-cIgW\`l4kRKpm06[ak5C!fDCpQp?0
%=D@`-@*Uke$?s.@1p&hUb84>/72VNtI[;sY)WSPC1b!V6V;o+>O[V%2XIW3DMf*.QV4$/JRAl)TB),Ze*(!RD4OSZ3o'5Vc1bU<%
%TZrOGi*b]B*om'1F5_;J7f%1dV[S!pcj-a=D0a<)X)`qNBa9l,/H<p0b<JsY0cr\bb3c1Nq/3kc5))H^'1qAj)tbGsKl.9$kOcE:
%<N1m`rqat,-@Ksf\"d[Sr]I!C9V=__EoY$_jBLI6FlpK?HWPYHF4_s0*CkP%Ycg,p[9C+M"$1'XD)A8RiQlE+3oT\jPt[KF#_\"8
%k7<A,TRJ<*TGju[4t'F+s!nHT/,]"bfAC/sEimUnh?_tmrqNMMpf46,@AdAUeL@$`)D$Pa<rf"fIe`jrN<7p^3I3ApH0<n^e2*&[
%aNY4\s-WDZ,pte=Gbpo"PGK][n$O[B=Ac3?NB]Of7XqBY[Q*k^%hsXk)P(BQe,Zg+doXQ1<?pj:HiNuHs!X;%nEW0_IR1#H%PjZj
%.%0X5nF7>[_LKar5PDc!o]B^.YHVM'iRfqBO,pqS-W.$oeZY<0k[M%1PXA[Y/WC$&eY=Z"f6k(F4,nQs>NlP/+eJHN1'qd_WAKAJ
%7#F&/I:Y"N17aAeeI9>M/GPnWL?TVDEE6.?f)kVW/_'tfpgKY\CT*Zq*iaMpgJN<7-`dX=+(WFplsuF>[f,$SIf6KU??hB3*17qo
%mb`JmMj7]mK1?7^E#K)5$jkJtX<gtAYauel=r`sM"D_#F,Zm^DQ=)iV=R1^EBF*%Pk3<5nMPI\aaj:s")*_<5@3TGJRLX9g_-2H`
%1gk/nYa/ZK_0UL5[M@Q&aL/GseNcB#D+@ZE6u>@I<>Rm1k[MF?e(%D25M>O597jSTmAWA*Q(T]p>Cs9dmCBR)`K=k>d+2/&g(Lb=
%BMT0T0e?>T1#en*3f@T#Q:]J?`R$FL+keVl<O]r?[].uH@8"t5TKN`tCD+!#BM6^<TKRLb[5]q$%GJArD$eo/ZmBD3SRjC59Oi^`
%gu9\I>Cs9dmJ4)i`K=k>d'aYqg(Lb=BTE\XNb2LQJSU0ob;KF-DEF_1,'rR06_"*hIin5p\CD*%hN2t6nTo5gekEVo7,kVmlO!&a
%ZQ)n2hca"p=$\B<9Li)6bW4;tJf_Gh)!$S7J)rs7M:U.K[3^$U8@4[r4TSaPMXJhL5Jo0sS'Y?dFGIZcEZIS=YVn39JtBGg3L2!Z
%+VLlS!,LCK-!3gEQ=)klSnukrkgZB(g,?pI_:_j(r1Vc#7=2?5^r+aNYJurcWT4"(BM6^D#.3JhFU?b7[&&O@58LXd15uOiL+TlD
%9<=F]/[#nW+,a;BRE!3\)%;X0/[9U7^Y6)3h'B)Q)/(O\lB5:\:"N9ZoXSfSqZ*_;?%"I6,-cG4XHn3",Z[R>Sn(WQU"C^(3^e*J
%`+.Cu</Y%bME(!jNhau+4r'aFOZ4q4H?,O!jDGNcdh8Q+fkYHgW^?G>=h<uUCB3i6:;jqt2"\:p"lWX:ZioVB5["@U,Y1RiScGQ$
%`O.9YojV*b_<`?2L,\V,LC&K*7].P':CGTkf7sKC$.>#f[-H;N%8YGPNF%Q`/VI^?f!t#J,M"dJdfsil$IIk%71%PoJ@0ct5_?BH
%lg_c:R^SPb]/VR*Mm\S`>)BX"CF=([Fk_$&Gdq59)EGX&X"/"ES]c1@j*IBWd[gr>`AOH$/AZXAY]f-a9+n<P=AJqJL1R@N^nGN\
%GcqaRFEgnV&%C66B3uoV:Q*YAf7l\-M:.USg2J%$Kp,er6Ht7fl__W$>1^mL`b3J7hjkZN[P%;n8B@A<ZK4A>$/#rs-b7@:_8@`*
%b_Dn@%VXTsEQ_Wgd59UcC#tGK1UMbGnoWZ:B1gC6Qp!094,/]!9?`]h/MVVO/8K69)ABFt>E^4HM:rTMAT22J$u9in)BZ=t6sG8O
%"DnJ!F(\U5,LcF\/S!KIZmBB]!nsYldY1AtAf,?BT;g5#Q`L6qkQH0M*L"JQ-Rr7t*dj*C4[!K%GK_@H9@/tdr8th](.Y7lEEYP3
%/ob(SoE7-*Dl/h6rNE!(]_t3l[7"dJ^RdO)=r`sM#An_oL]hQ$g(LdUcEJ'SVXZrVDT\9</O=`H:"c\p[U<=*Wu35f6O]0%C#cVO
%\C?<RYuPf6dBMPYnkKdRg!aB<HjrPS[`!"HB[<5X/WNM7K=3DYd7DWMTIiHVmL3lNA/ZPsj\mlHZmBB]!8=;fX"HT:BK1aGi"&aD
%FkS;H?u=8.D'O:OdD3@p$/+DZN"WOr7VtMe[R=thg69&#(;R+Jc^=#.^%A/"Nb,HhEtuS9?^iYb+g>!abG5U&$K/?\D2HtFTsibJ
%-W+*B[RBNYZ`M-.BmeErCQT7;-#/L%g(a8-</$@7Ru6J$f5u#U#i`3+gukT`HScA4,tq)8e#$AuPV=[t>-:'7SRF+19]Lc6]Z!Zu
%[KLGm\&^\adc/>)5#,l+V^5)2S=[O,Q5B9ed(UgQQ5B9ed$C=VSa1R*V8\R2I%6K=pIUm@3'GXiFbcM\#<9.,Mq/RWa"V12M!?bV
%c<A%2CfA3YK^7m]>40(iE%U$p4Lgu[m3UI=N_JK.XkY]ad8m!Dgt"3(L:&urN=Xb6Sl?$M'!rruc^eJrN_JJc[_*tfK!kf!)2=_-
%P?Jro`eS>T/5a9lK^24f>$'pV-?`lt!7*-d(!#,N[Vfk-*?SqWa<aSSS=Te[/U8sGij?Yg$#j(q_9&C,LLSpT"[t7L=4jj<Y2rb(
%m[eSq3^&K('(Ds`b6&B[Vh8c1,#Q4bK^/s&>'4\IDIdd1=!7h&<>8*B8@@I2MJ>X#VNI:^)LepF5U:);e=HlPjnV<$g(Lf)m!=[c
%C2mc&+0O_I6j_HXXsI?!O\%-b9]O$u4J4+]>/I[0nKQBSh`tCk^/1Q+7,(9K$ruLS/mY9KC:&?A[;<EOM6<CMFLJO0ekC^*d.3JK
%$.mYD[61*1iEF++gkRg![^8"LNK)Dqgt3ci>2o0"B+j;@V@p7S$+/g.%LLi%ZmPij95t["?tUCTML_cIVG!DW'us<SSW9#:\kPD@
%LU\UC9@3YC5[3[EOJ"0k>Mf?6GD<Lb15uguEfYtYD$eqegroUuf&Fb-5&/9S+qh:0C/9B6nqe0>e,LUeb=s/nV^5*]`Q,MFXMp<9
%I*e1g=A.#,TIo3VF(\U5,LcF\/T7n[TIiH67RZCTQ52ufZ#SK_f:km-Q8h#k:89c8k_<Z4)JReE?W32N/0T9g8<tW6,U?#RQ3Yb!
%aJ9SAVX`VKSrJkO/`D#=KBJ\83OD#sE"!b\femX&[HS;eKcQN->XMLGgd1B;QkZ0YW%CknC=JQ)@jGe^e/f..j^!0FD'q\TH)a<-
%X[HA2AY(W_=WEjLLLb[@77+;5A/SsM,El:NRDt"tH#c?j[=i<%f5kJ#M^-^GE%SO`9=U:,4]0#4;&+7X`AMI%2&K'npN>]9D:C&<
%%*E'0&uVYDBc-dp:.q+C3'G+?%E2<U3fmf1FR5K9>30(taf\W1%!NGCdLrCS6YX)Y-rF0BZpa03\"q!*Bmc/2.uFt9,tc@?d.:mQ
%M^-^GW%Af$-#-*&Q<Wrmb\S%bVUU_*$0Y^)gA)p:nk#\/X@A!cfH1!ddQbt0d#PDtCP-\Y:4d=tm"b"rj=PmH@@FR=*Nbt;Q_DlM
%n9o1*UK%Dk4bDPCM93/igN1\blfDBP6hP=1a[FSQlULiO"UQ[OX7^U1chge/qN4kP3usq"GB?,gOf<"D$0*f8aKcP?hG/)+eM;AD
%QTlKXqKAduTn:%\OC$fD(\J[GnCN/M8kHTu5.dt>r8@0g3qUKO@AMr:/ake&`PK;2i87U3<(5afNq/<16I@#pLjJp`5HgP]WUqc=
%lTWB*Z^Q?f1R?G2:Fo7@fZ035[>RKhZhf.P*AZrW%P!$2]$MjJCOWrqn2d5;V=V_.!KA#t.We]8]Kb%uh'i.&5&Y&!s/oAf^p*6L
%3j$On\)Xrs(BSZ\eai^iD#U,+"MW<,V-7d4Fj:0Iar[K2r/?,IIQ)]SH20b>IK%]2[5S+H^pa=2a*E/\eS`He+5-f6lMs#:O4U6L
%s6JI@$J\rPNL$T(dZ%U/V5AccD'fCuW79!e@5X%+?o'0Zk;>hp6;WgCT/;GiQ(eai8ifsO]Sie^Wb8,Al!$*"nNgUDB6mZFhUsT-
%PdAkVG8dk,JA4<`U)Rq[SO"5_Tc^/@e:47N5_WgP5)[sVgR#Ze^qSt3akP?<BlRNc2,k6]X0OOBO+"2mXPqVcqM`5`\mq^BbI#c]
%ErA`ZfC'T>9=O;ilbHbEPZY[Mjj%uud5^<*M!*Dna)sn]g9k:u\kY+.KWHsQTGkc&#"j'dk^]kAmpC5J>8<OZVNS2KdEK*8KU4'G
%DQDj]1"?&\60Ft9).+HP4teft2/eR:a4,B;WVSumj+\__cU8"7&jF>=m!,W_^B=HM7X<^7KiDOT-X*=EJs4[l@nQXGor=9P\tL\9
%SJ?Jg!JpEg!>Oqi1ocO9.KSQ9k![@(X)Z\\g[3/0FMX+Ws/a:$@aMifG$DKq$j,[t94XY0#tM@s?b>gNHTO;ZXTftf.P^hKb_3'm
%*L0+#;lNdrRkfjME6j2bbP-nd^GKG<D*7`qoqKb`\7$VqN.3dH&g+>jU.X3-BfU+/.b;?32&#Y]q&Q[*FhE3s1@EYW\Q@oDI&X]Q
%^qH%i2nB`_?;7V.N`="PYha*u.Dmk?S>`(klUp*cQCF.U04W7Bhf,%#fh.7(J.9'&9Wm,aA<+?Ha):uJp?%IkF#-Ool*iG89!);D
%$ghY.AFWioMh]h5B1`7!W0Zl8+]GTr]&V=jHL6op/Bc!+(C0&e;)><c\V4dtC*lbnk,-u`h))^6bZ1^kD2OcjHGs,"r:Y7]-AdjF
%p=kRA=-.)\p(_!,3e$2mG==c4F)Fo41hUd@25lKV>2;a3Mo`\'.R_K_',We_YMO/C@-aZH^f2aMUP3G`[CAO5]:C:ICkPDMejZP3
%8/\1W<+D@\!cQM*rU_nDrnj9jDRn3c/h4_+5rHMaJNI+D#Gg]E1](MWWp<sdRA35-D#@,XI+@u7(n>gup>A_".Tb5RY[<'TS5_t_
%MW8FlH3%$RP7^h&qkn8DKOoPc85gM[0m)/LKX)eU!0:aUQDs,^4CVf1::f[6#Q@NW&t/j4[Jp$ql^[qMfQ>BndF$Y;C\uaHb!k3K
%G"smb&rnH<)o"7j,d+;M$+9,^7,]-.T9^a(Y;\LQ]C!Ij'/d#4T_Y3])])iRfPbr6m8uRhXQ-\8'TF@:nJD@Qib(.66i``omq8KE
%D4Mb7(M`R]\%m"Mf.-Ia@D2M!W["iaJSD;moa?6!qqVKJ!n2^Ej6+,(9k`mMjmCW=Xf*W<!Of,$T>67LNILq<<MIic$L*CFpR=Y-
%G<GDr0>%ee)CWUDm1n@I3SD^eH1r7(YDPIl`[u5$U't.G5AZi(cS@T48i(PBaQ,>-oYWY/mJbpXZoZ:;F)mGte0C5e*\U8!p+q84
%`cgOQA$N/-R`5*slD87)%"<I20r<^X-j_1V]oq8fn(*quh`H:pg5_%.R-(bpL>hb@@a'+")1+5+blb.p)EC#c$?g6nj>!u*c.fZk
%7-D7cfkCB1TOHk/?6@O]>a:`O#=jEPe`'Js5_f>E.Dl"K?op^pDsI\s.!`f=A66cC(-mjkN0VWPnNoaB!`KYbn?IjK-EEg\'UH1b
%/=@P=$tH+h&e/bY.W$r_9[W;LU%X$qgS5Kg@2N8/B15[]oeIq$XM'm=ar6q:OVJ:o^_nreTN2nt:nKRQIfg0[@q(KJFIS?l?25m?
%hS7&BF.a&n"&`P^?75?Q?MQZ#V*qHgYEV.=LeMI>)`3#OHfYoC.P[!/\UnMMNk)7pO%@QdF>#6ceM=Y8JtLaq3^@a>GAl`A,i2%c
%W'kG[3FqK&d=>@gUYbO@Bh"!CNW%!q57f\o>Z-gXc>Riu;6.C<O"h/[h-U%WU1atp)ERH+<U(hQ,$!dZr<$0=O=_/3NYj_i@$KWO
%fs^DSeBuAN,o2koKFdmsac4@a:<JgFAN8je#1Kou:VYGu:!d;U7IVkI,V>HbY5e,e*=r`dE3ES?0Z7(^&peVq#4;Tj)lAKokgKdN
%Z4f9ti+]Zi4rrd3%Pum]SD3H1h21,A6[6_@O"i-elI+m>Wg1/fC"%(!TGl"RRoQcRAE>/I=6rtgJO[HkELHo8'CrVcr4RESP4>Oe
%YFVsC*LI`=oa*REQss@XYdLm_^AlXm3eQ9Ra#Ifkc<kd2]VbYHa#VOuUCE$a$&=\6/`T.<M7LVm+%tV^nL'[T]ngJ&&uLU<M&Gg4
%-f)th&;:cF66JV`Zt^6`,W[[/K+!)TC>aHQ&q%lnm-O+"Ac]W4ko@m0na,b]Vq%oU-P&/LpM2GT#D_X@mFLm_ou:#1cHG4<[H30*
%'ee=UDnUS(CYdatIf''-JamPds7=-\m8g],(O*7hB1Xt>H]$6(HnSa,.JL;1^LeR)DlknOg[/(r@jkr9F8nuci-O(u?bL]j^V+4R
%-TdS@:J6CXp>K"Y=o7:k:nV)B/oB5_T6CY"^Z:B8lYF%7A%rITd(*J2C>J1k$c`.Or:fKo1FT,>WP#l7bjE.3?J=l)I/9?ph9!AM
%>cPlSnR[(5VYF_LUReNh(=ne_`T?:E9.5Pe<W%#hfI^?W3OA>-mHXS.bPZKqkM#p6`\d8R6(t+Bs4H1Sp@+#P"I3lnI(fC1J6rh9
%'_][rGOk(Fp\VLbom:g^M>(>e$cTX5QWHhl-1fCPcF%Z+\WpCI+0=U3YC0X2hKen)\DqcT4am(qhXtK[jPAatb3JEVr\Z30<??L1
%X)e6p7cisZEk]-Wm,<8+olE($J+DM&$F$hLq=7^E@][gu?ab%Kd_jf(PCq-#G4"mbMJYRq?g>1&Bhr$JfhfR;98/`"GG$tnTl6Rf
%8pR2;o@S[b<Y(cQYHRctWdRiV147_]g>:N;\p(Tpk*gPEW3H$<](a_2Bma4BH<:*QTj?IN6MWgI07cYiX[i,i=[#u$ese_#l=p60
%`EMF/qQ@K7W*es5'HVU*%uPR35IRd5$U9$8>_iQ@;(h;))>'9GVo:7eC[5g2($"1Sg\o-4dlqGl@);;seYc2ef<iE$X!^$)ZR8tH
%jmTCf;JV"ELAVPQAl&nTj^3aBp_$Rm?%-gQ>eWK\o1m#=:?jJ,m:V1HdJ@1lSJJrC(+p]DqQ]@3&+A\`MmmW[US[^'F,)jQUVc+a
%ji@(U0,mth9]#P`HHm6$d40Y$4]b_Bjc0#F_d_U%g%eD)]CgF?ZF4jTgpqg.Je"E%ZgHdn,:_&#q,)L(45>>XW`W@P^LGn'FNqAs
%RR!d=IC&e:SbIbno[IoomEO,*h;%8<::FT?*p!`t#TD`OlV<Pl$1sn.*B`huqm!eUV1%*E<`"[G[ro!/X`%F_!nbSh[FKZBrS$"4
%ETN(;)`.aTT4cdC0'N\=&QSLEs*=&1V+Pp;[G'F6<a<@dQ-Ca^V]W=3qd6g7:#[(r]#Us\>^k%)ft"PODg#4VZc1!lTc\Yq&D3N>
%QI/O<Tm,$.J8k6`G-7ulg\,7Dm;^GNW1EUi_pOD-]3+3>TC8qd?+<JNinjI6G+b5Xks9S0^uhV#aR=Vg8ZFGK$@L/afU's1Fu;^8
%DB/;<:Zn[dE`CjG(<hinlI4qRn46Y,)TYpi/FF9I4)_5C^*E!dW\<52;5o8ihjTVsh`Kq'^06$<aIQYP^CPV&=q*9$m]JERCW-PE
%p8?^9jn1u3p>nTs>2?sUd(*&aI/(R1qDPJo,jrBnrus^M.,i^C;n]\hp#J9qrO9XtEIF."]2WOcq&\UW:HqjMn(%(_6FUW5^g\LB
%`_0knJ$[q3'Xs[7b6$1C4FZ@JC4WWYJ8SAtkjC&fq/I104?['!TU.b6'i`OEl!n\HX`!R70*/g\pWU;(Xa\E`I!`EA^UgsogKQ=S
%ZG?%u*T4d5K=q&cH_*=`Sf6!X@Ra#n8o;1?g3CE%9^J^=5AWJEgo9'%/+9)#ZL_d7H*po3Kg3_*jcs#pZ!T.K4E9?3qkl^N[RHX2
%Q)><uN6(;SPcpCVG(Pt9iR`s6`"MV$5m](eQ<U[$I*[i3fCo>ViQP#&9NXUA&i67kC5(M,K^+=A?J^nS]K3,h=?FY/.RD$-8L[<6
%ek5ppd<KOS(DVSEHaOPg]!p2f/Zp,8O%Js-R?7>XkAUg=hEHQV5351L;YeLC[f]':]b-LE<;Q.DlQDOt\Oa859Y@crgNVGmk\5mP
%)"#W?5[R>fcN!-CTW4AK(glo:Ai+$^=EK$=#"b#U=\&bj/'*m'NVsT/KA'pfGmps;O*C:d\KZCbf,&k.@ZpB&`$Jst)A/c7k!ZnG
%JI#.p*C`Ze'c[kV!lI.[eId*X'DU&*=K.Z0/+rj>eo.90M`34d+(iXi5oE7"LA+A8LAa@o<@[;rD]<4(=5>*\L:$rO#q&hYf_SGh
%efV)=-8J&*(+q:>)YIeqIDn5UIZ[/L#a=r?kI==_.!POU<P>p@cp*50^niB<+)\4kUZ^0Vn_:m8NT-L!=WH!,s'ikP4Fm,%i6N*T
%[a4BT^"TH54l>*Jh>DN5`\tZR0KVdWV`UV+Z?f!h*Ls7NB09/D_U\M*1Zf>lmB(br#//Z:9Y%Y2mbtI`F59"Y=EsN(7pZlYJ*uK[
%l\37DPHV(rFDe/62)S^a.SVKQ?7XRtXn?VO7dnsLG?6uE7.ji,\$U>T3,bp5lb_.Lc!O]jr("@P,+"3-W0^dKdLGrr5!+P:lq[1(
%@/c#s@(0<U>V`dj08'!',[51L4uiP3_ht,i"hqYFELP!BMO=i4:fC+q;TrAIG;(l'FVKj1XCF'IY;ai;`i3QS06fRk?+T!4e,,JW
%no,gR79M4t`.R4,_2R^!kJF:4oaj_t\]DP=rq%W=B'DsD>\3$YF4F#^PrMbel[NZ_aqj]bgKp[9S9U^tGSB0'0C3o5rR9Q\gK.eV
%cqTpf7Pu&?k?ocfC0?V7IdfI,[B;^@g]34gV?d'"oa_GVDjGe7B5b44r)&&QCRsY5],.W^\nSg;kIWrd%^YhiK?a#C8Tf@pP$e/a
%9?5?g[I(GI>X"]AIH6$pDN#1D!U\pl]q+K8G;c,6kN@C&I*$uU=[[i=c+tl'</rSjYbQ$m]]!Z*7XK/'q@MAnZ;Ic)'l9n:Z'hta
%05g0+cA&m^`NNVih(.pE]@]9S-+E"jqc^W3plf3Sp0Zt>*,Qd3.j&N0Gu_HuQ?$nMT=i&jH19eZ]?\s^GbE\Jh2<Lh^R;2fD]ehX
%St^l*fi.`3>r36/>%Vcde[g3FC`Js.UCoJMB:Idt!k>"1\iY7*k(h4ZMnIH^/*bjCp75;II/9:Q2d`\B+&7e;fh.:LeooZR>BaGg
%-pCg;1B>#3?im]9Y/>4$>V)JMgpomWp$Jl>YP%:h2ldHIY#eCK0H.O[akR'$mL+0M=>.='4o3/MXl"$aloo!^@8DpFQED0B<pftt
%M%m96eW]YS:-#s+$T5b<%(!pmj\DXXYpfOSrX#*Ph&e^A=f-uZ#l23F"+tmGNHOpicDrG"CoGXMf8'JY+-&Cm=!,pICWe*/?C)&]
%R_'?&i::0@c9G574"p$,_.gT&k@p4c$s9n(m"r:3Is^*p<P:A<S?HOc<QOg.:;-uJ_odB*f(lUurcRH=<<)7/p5f.'j_tL;%]p6q
%fXeg#b&I)o%(b0+Gl4fZpM:,M5LC1;&)mCekWmg6#L/J-Gg9FY/Uc7.rH`^.%N`e?@aF/YDJ<,HS26Je2ZSPE%eC3Uq>.elX_2Po
%'_Z:,:O2QfqeY]FUSFmFn`ad#qp!R\06[=a/[n+QL(,h4*Z+N6m6<oJjHs$LX1(ieWpcHA\:7C=^\?YRi=]+UY<)F0$87`IQHA6F
%:k7>ZX/-c>%/92Pjo(D/KMi6r<fc"IX,j>TEP03_C7aV'DSNg@l%DLo6Si**Yr_bNS.t,1e*MDIgVZ+qhP]O@4HFI&V7>s0pWLa>
%b/6.Ci9RN,MM2Qo*[M+/j"jc1R*@:D:S3D^]mF;)/o;['Y\a/C=)KGS[dj3/Za.3opo"6fRVM9//:MkNlTBKLI,@;ql*I45D&?Ie
%Y*jY.b^0;:kOm-4B0?I9f03A^5(QB*ittsGqhO)fnuS',B_VuhC81BbKQbF'7t"rO:PqACC_`uIB&k*+LAZAd:>td)>@XROpV$t-
%D&h^':\Pc!L.#m2[Wg@P2;No.a(k$]A,"OIB"f_*jh,J8bM0.A[u1O*S[6(q?Pb?NDi]*,qOIjS.WrM8*hIs:nF]/OEIITfPnl<H
%d#4X5IZCE=eU"YOR**l*QC_V5mS.Tn1hXG@jA2?`0&O$UOCkH-lhf[JE@:MBWjoB`Fo:7u'6Ptk5/,,bZfE0UhgTd\k7tH5*MGNE
%bP1FBDk-W)gJ5(t:8,mb@Wo/E8(:jQ91RTJAS(jJ4I<25eUuT@;u?@u*,g:Rh#%_lQ4Bk(gVsg))mGIn&%:A$Sp#h3T3<n[L$Wf)
%I=(#IpD^qiLHeP9]>aUV?b-R@m>mcl9+gt<N/+YbGZ]BAm=5'MW7s7!NP%7;(1)B*[gQsf`SIY]qb(kD,!Z"Hf++FArC6D@/duAO
%+3B)f<0mXXN$[uP:*19):KoLp<%_rQ=57S@q=]38Gj!V#le^5giNgkR-J5F.j65##/e5QJmT_s)UM^diDpW!u0mq/LYN#NTh^aRr
%hHUkg5@*irmr0io\LkMlfFIN//2$CVcYrs^):@Gl_;G*H'8c-l1e.t@M=a<].ur<:49K6\q=i[<Rb(t+rp46DlY5s^fI6pk#_&$\
%$]7p;CEK[VDiNSC\c1k'6ACq*$uo-E^D=6+`'N[+EPK4l1@%d/H?LT#?Oq5Oa[$NmiPSNqOh4j>:^h%;PqshLAT4Z6X,Va3*QH[Z
%#Bs'gfpMI([MdQq_RR;-JaRnhcRISSiYsSRDout^6d%#s^M*TPR+E8?kZQ,uSq#Cqddgo+Ei_HMq=1;S+;fjIjK&"JI@=m>"]5Y/
%-L=6.KT>)PoujI<.'"2c3-_^&jK$hn\"7lZ?tmJSI^+6nCcrL2H_.(Q53/`8O)#[.E3VpT*B3[RKsef?jhQGYl%[`KNAjh\KAFs]
%lO1pYm^.k`cLHg!&*1chj*d@kDdM!94Fl,`G:R]r'"ieu_!g)12)l@-`6m4"gKcsi\-b:p\iu)AklLFs=8/EP@Q(3!-mgMDCjW3d
%>S/"KhV:j1G<kN<5B^B%]&.1O=af$'kXIgod"tX`=am^J!G=*i+'7lICiNf@i$t="+'S`4<d!/GJ$kbeT!pekOM5%+I_#Gq7t"TW
%Du(C`C*<3>MHKN"+#S'l$)*uVr&AeAF3[5G8f/]WIQtR:?@W^A:c9u=I]F9@)ik>eKbWJa1Kb2W3I[pp#rprm`T$S+)#Ho!Zom'$
%/XdQ@-?,8i!&eqrJWmB^O?6V"L:4X=<0%b]2S*,XhEB1Fle/o6.U"u)#3/Y<cPnh)ZM!YQQZnJgD!/d_or%@dS:]SQhKkrH/\HD;
%FZ3QLmS/Fb>1%]$]=n%%/U4)bRoMm]qb[FAs*+X`n7=D">W'i:OR0[<DQg^f>Bog=#OB-kD^M/nYR07OUO@IFX^g#OjPJ1G_Neik
%h-0,nY#nJL4PGL'd\@o'X^[,+AVa>09Ejq(0s/^`*(LN?T5<8+$a^cPC@YrV4t/G!crG#@s107?6oW9MdclMK4Z^_ef@A@5mm"Oi
%6ec_R;>cK[]`*6)/UmTF]uD'4%r(UA?=,cOW%l3p=6O6jefpHAf?^,_h_+*W(K]u8k@.SCeS6oj$Mu_jq7ZsGp1kIdpgFIOmS,Y:
%at<!3GP]lSNR[.JCk(=IiG3)20ILW3gDPrQ9r4CZ[U(nH5Uu"Ks)@;2n>Pof['fVd<BfTIm9tGS.OYc!g<`V6V#?s;\EgU35$#C^
%4+-]&f3PRDTI.$JS_i.UZ,6OJl(']GitV7Xme<R;Y1ooAIXQ_E(9hHM6N[9Hlg<Z/mi60;Mk:5d?<l`22KhaEMO?\2=fL'H]f2uK
%@IFY8^B%^"T_K)"qYnOkoaf>JhDj!9"V[h^?+\7M(>=hN+0W=i:LFC?%(!,h2-s[XbG-H;D_<qcSeSn<526gq/^0$Js"FZ-#3DPn
%ft#rlY8?o44(g]oJ>0aQI':'X.dpd"*.;(-#V(X!d&dj(.QBpUG:u^8bm5Y+7=R^<i^K7Zh*EaVUJ'P^RRug;3?FgGf_)t,?d$ul
%h)Qs6>Q1@*VtaMAH08(^.Mu]FrcN;NnAVZ?nc%nZ8E1Msmg'-<ET<mI!Fk^$<hP,l@[u?0\G%<"XsMO[?emkIFeSQ3Y!HDUD=<d^
%^4<<A5%reshsPs)mp;RD9H*3i!b;)[YIW-J;?q"5Io!t1VlH&.fso*C2X./@VEed>BlBPZgSSpP.E6OoGTp.q13d[O[nu4+$Y=E*
%;qtQV+k%Ul5'[dqa/KJV4,nDdWa_N\V0DBD]L'5#-]'^<+"9X]iFR##^5]Qe2SE<u:[27BBle@4-H9HFk2YYLJB-Od(YM]]>)fs4
%&)q@":oCa_q6g&WG4m[M]dpkZeZX90Y4V7XN*`nQU?qSJV0Pr2l8L/u$P&c:7ohJ)'J$d5Sk?uf^VLoalBdKhE!e1?ZC&,Ro9NI\
%i1=\e?KPm[H]QUpPEA`0UES]%//91Sm7T>5X==uMm""A/'9)Ym[?$BofBr&JfuL?<fs.+*N16@`If,5nq9I%THts$L9-LuF-T=tB
%6p&aOPre:IDmV$ckZI;)?`nKdK9\kt+/Z)&!#_X8Z`cMj=@!qn+O)UJ:"#l-buU-9)EXb(+B+]aXr_DKGKm3)aOA<^hUCX)C=XEH
%)8#EV\_pg])j`>s^GCQZ5aHYO8T2atb[UHj0D/@V0\:Hq&]d-g3\<Q/+l_&;c`,X@ee69U`ct\KCnl-<*F<a2oMb*aa_^@-=7sJd
%7Par_<ditB<_L2_(^jh'e_<Gk$;@!_2)b$uS)%*3-JK$fPo.A[J`i+b0pPq%k)amreiVQ*2;UBN9^V7:.%?f-=?B_%:/rQ_W-7ld
%c3OiZF$!V#YImVPDq4ok;PW*BbM7k-<Rh_QQKfPtH5PDg*fSbrbU9^TR?P5>DYN.TaS'g6gNSr2M$]76%&lC/1n(8\.$"!T%1l%?
%Rh#:A&ru2)i!t8u](OKJE$-bDY9+V+2A2'D2%`9Che#ZiR5=jE7NV'Cb*gT!-YJ3)T3!d4[/j/k#0kdH?<V@u0Qd/VnG&34BFEJ#
%C0p5'h71,AG/>ktK"32cD@1Q1Fm-&9'g_r,GM@S?;5,!:HI't4GPc"<ZI+0Q^9=<^RWOaaGappR&_r&2r^!</P#^MlG^\2d,Ve9r
%0X#E'OORs[!PCnb3cr(@=Ack;Wr9XL?9E`H%*0IJ@+i?0i6tsEjWTonq6dh/dcE-0F%4+0IOeeHN4WNchQsf8ojfH?7'K<nDY5GC
%p@_<lc[k>A:L7)W&+%KRh5LTB'=jb\k!@)6q#n>J_V6Ud"B=^OCXF\ob`s>I`0i_YJ2]k$MIDmam%i[#E+-7DaLFZH)!Yfjp)#Il
%nHK"/gA]G+1OlWq06-\fp=kk5\p+uFajS(PjorLsG\E\e.DkXP7^%5;l.!@S6RVF[VGo7%mV1%!RZ4"[LofS-l@N>g)XcuM=ub(&
%7b%Ju0>S[=DRBB^(r-,0R`m)5daM8Oe?\?s;u"h3EL6u)6VJKX#0]rcj.u)g[-&!,BW=h('=E3g1C"DHd%bSMhD;i:Xt0cY.eUtn
%mM#,uKK$b;HI@&0r5*6WLN`[LBKQnW@b_Q#UgS)ZVf/?_@q_"Am1="RO7hRc'OnF>%%ip7g%hDchgY7>DdE4em6kGk;l0c*NIA"d
%$#VI)YE5>dp0XfV<8/F,cfjZJ5fUM69a4r^'87B*7+)?oR2m$"kJ=9;Hduktm&\UOX4s:'m!)6JJQjE]3r_cZb=jZ:-]e'hAI]XO
%7d7M7W.Bm%X3P%88W"i@AY<H9loI8A^8g&KfAU2t7u_70S/`p%M8m1'?n;=b<U.IV.:.:IIZshSY7*`s/h9;[`UpVm,eLWR`T\k0
%+\Eh10hm-$i@qAsDgB*A+t*@am!eIm-jW]lP"SUSKgWWPeS*e"7nlGSATR11S#ER<R#.WcFRn6#_b)0hn'EcF=5\<imRPW:$uK!$
%a/Dl"G*C]M,7If_Z-V8r9ln_E(t8/N6IALD/8?[XK/Le4"UbpRe8V``b8MHp'$H5<V5=\eOb@3@oKHSs*t.,-OU?F>BI^tLO=R^W
%(LCb3qsB/F`-A[Q%:+YG.d@&)4rpJNb!)=;')da2mD"Ej'K.7H\N4gX46^(E?5iL^1%q2(-0?m3a.c<pP(^HbP'$3%m?>G/3\"Ij
%e+lamqdn5)!9)5hpnua"g-shu<8/i_C_*6JC)^!c;:k(AZ!<`f++RR?RWSRNP32PO]>%^6RaD?H$@WpV+tlB0+X'8_kf<5o7a*jo
%'qD]^23e,7>VI$%D95717&6$,="hV^k8[a'nA=&@q&6%Y*XteOnmK&Rjs\MG`-aBV)Q&O6SN[31'<G(R2Q[Jd)[r?Orl)L,s!np@
%:Tje31XPkOSSLI-,=%Z?E#IB5CVQHTZb+r(H3Tr-'hT:Pg^&!>YDjWFji.JJ6OLg%MX)hL@Fh+rg+6M\j55i6V?ri1"pT.@q=mnu
%QK]-u>$n88F;_p@?ct^N@0Uk95LX=S7O:8tTd<qs;tX8(hfsW0Zk6TjLJC4K>Iqf]n'qd[R#*S.-1g]CNk/'Q`ar,C8itM(hr"n'
%ftgEPd+:ml8omtY+kD=eWOiK>0c8_EZoA$nG/U*GmoVI<,=>urp=%$cW)<nX0U1u7%k[E?`sAI]EL5AJ@?%j-ca\_=<u6b<#M]XK
%M>_Mg'CViK!*uB%0U:tW&$d2J!1"5:C)Up7;=B5?EB@&"JtpB@1Xg8gFh`,j9CK<[*;r!O0%IH&i5YeF_QMVenS5TS^m<Rb-BZL:
%\e`'T0hKf'@7/3dXlQM4'-@r,io=W;-id%kn42,XSigAs8(1?-^P%BoaV"I:5:V/C5'WG9+.'HBr4eCLOgoo2f70*C)6\2=Y>\C%
%Wg<8gf%[l)Ag>4'c[hQS2O&8jIiCjOeAU+6=UFOHD7j+/IM_X\">NBq_"h@;;)100j8CY/o+:oB3ejaU+Ap_>'Z[N<LZ3'Ol/3(@
%d8U3sW0UjB(AolE^Et^?[UH2(pE!qa'Ejj'`kT3??f-G..g,b5+S4iUOt$D7+-/^[[\dUV(CYB@d?L`ug3TWNA6$rBFt/ZWXK#H!
%7^WtWYRsF;O]<C"cVNV$[&g61/s$MoX-c_'TW)'_1Qg3AZ_jKrC*RLsNe9/OlR:,!,tdT9F]Hn9EXg0H3[n39-^sI6%Em6V^QDOJ
%Z`6U-6CfsR`fg2!&!a^GeEY6COL+&YMCY'A5+a?V!?O1/_.VUcWbn3O+KF;!+NoEfW('HH2WSa8B!6r*W3$EJ,\kE/Z_1)OVBHlk
%=h<Fi+ir3\'J61*dm6prdh(YQgKI9<rUh84+[,.kMQ(:R'kD)V577h+9f6^UY0%I>6>M/95R(Abr`5mgH?6B\Tn8;@9@#*!@5)_O
%-<7&l=e2^o(AhR@\jb:VNg2Ire-`5-2/SW?UT.J7Z#n2rbM&!:13.jke_s-9f48/MXV.;_*D=ebLDnMU>aP+J:k3/`SufG^K)HIb
%V!04K;\_1J)H9kkc<@A\1X4T&FDi*ujI04E2_no1"tF1)dR,72NQ#Rm5W(B9/g8n+nJ>>oT!^E\8Ph_%7'j+&J/?Bo7A4U8,I9a;
%EhWF@9Pra(\mVrCg]g&.(Wi=Xh:7q(g5OR$Z\AOrW#8V!q5@s$"oXD1$$+R%6kcps"n4*2*CtlB5oM"m<N6aJb1;u#\>j'/8ceD^
%,Vl[c;#MQ"V7RM@R@:s*WZ*32)O52,Y.>WdKc[*Y;_XJM?k5MS)B0G0XHS?MF'7IVML?6J[pAc?U6l-AX[;RY:"LO15UZIu(/-Q;
%pKm'UQD'(EQ!!FTUFInBdabQZFUKH>F[52Wm;gTsYQ3;5p!a]cPA<uXeM(J'W%K2^9H@(nO?rM&<mB4>5b!YUBE0E2k$22'V5o."
%\o.'sEa3&WD7[<rg/;K>_N@,3`Q+EQ!<Z;+SQcA/(u`/C)OT;HZnralK;!jtb5a@tGj1+/ng>).?%BP8Su\k09I!@TAI;q/@CsbG
%/^6.^Zrm&6aFH[]:#uJ/O@1]8Dc1YTLgI7%\u&qOO[>]G!1#s:%=f9r,?;p%(83H2a&XdMWQA"W<.pc`__GUG$cd1N2c3+gZdAD(
%0-&^ZTE9EI>.\N:B0djRj>.h5=Z$rdAmi/'*p>:aluT2-+fYMf!S5t<Y`Ou]d*NCf-B6@T_T$7g*t@97m#/3%WZ5g]bYi(s&CI.i
%8$fbB$=oE.DW-ifabGH.&a#`roaD`T_>%jK'j\`FU'`a.#q_7'NIdTn\Jj*FR84FW@&!+``_22&6)>u2JW-N7#e;$)K<tiCa=>oO
%L;SbE'iWF^%]M[i5j/uLV8j<a!lb;=ZRc,g36cCS5I#;EOXGpXh'(+f<12)9C^0JH!'4*O[KmRUUqnT>"1f1Km1(4:@'iFhJ/pW!
%]qA<7Y$j(!;\e&IdmR[[aFFA]NeJ\l]0q8IW!!nj[VD7cc4BPEJi?^g1`gs+5R'`sd!0;Z3G?e2FOMu^9uj77%D/hbf">WPgnulQ
%HA>U_[/Uda/K2)2Z;PK'#Q^_ITTR>-bs\=:1dg<j&X%J`7O$1Y/Fmm;i/h^u"9CK4pI.':\N8`/!]>MNTpr6<a.[5kj=",[;fdZ7
%\AfoVciB0U^ug:c5V98*9LLdISd]3>YQLI&%b`&+M=N/F^B)#>F&e?Wg,!]^WM?Hr<gWrWL`^)l+Y>79P"0$feE<P.'4klC-O&,M
%&5*OJPWZ%G^`(<4A_A_`M=g`>YQ),#jd"'e1Uc`u;+Il%P@t7YQqC/A_,Ql?%&VJ'dWlj-E]I3>e2)i]0pSH#)DFYE(AbG4A@3Ja
%K+S>/ZNbVXZ(Ma15Qf.g7"]2."Va9ACKX3rU5p_,!k;CEB#h1kBVJX!A5FjDNf^*r6?8G*M5>ta8fh#4@#Y;HZL!o@frbs1eFR*r
%/Q&QDUF48n.SWdlQpt.Elj==:`ZX1EfA&3nk9Q./KQ_=97RP.o-HtnN)jtBl/dqjmU:#j7LrgYb"$A*iZ*5#Go"ld(%!Yf2c"0Rf
%ats>m0qc@MJ?r&#;6m@lEiZu>@\Z;!3Z@!91.&0DETAn6ULlKMfYeheK#1Sj;hNR(oIq6c5SP'FD%0Wf<7$GUdhE`5!:n\p3^kk=
%ICd3>%259@E;X*_Z>>7\(4'/cF;G0(lMhbl7DYmPN#Z.b3Z08E$Cr=JVhKj8K=OR:_\f=e=Eg,M3=a^`%+VN'a*.W_Ad/a-VMR@S
%=fqc=4(-"4%J44S1I_b@N27$+.S?KJ9]93M$5NbCGYM7!npk6:$8eV>aPYKWS<4CO3VM3#EaMMIX8%IT/IRb<@p>1H$L=GYe(>K*
%aHKgFNH%nL(_(I`=;ds-`m.,/;cq`b,]dA1V-rcs&Q1E$mWjLs'3n&`,`m[K<"87AW%+4.D8RLbLbshk/j<_0``Q*W[c5;I$u'//
%/9sWa1$4u<E^UkaFb-K):'kluWYfa_iWWKX9:XcR'/^I#0S+,_QD`+?AMBg,GYai'6STO3Nc0V@V"!%;N96F[i<RVN0I)PK41]15
%J-:$ZpuEnA`5?8fVOI8dT4,(YXJ!>V[=F'.5YO"<3ardLTOA6OU?r(tM9L'YY_d+Z6V*5p)/\4:NLa_r4_cg!l3)h82G-<r-$aD,
%g'Yobkpo<\Vm50tUcK/@D\B2FoZ(tDen_b'!.MWQ&X+(POAubQboms<0^`)4b%N7nRudhq@lp>D/7K9T;,S(&4StYmEZhZgB7tk+
%cXi:eFDNjG`o^qX/O#M\aO+OuGLC%Lbg=Q7VO+5AraBj';$KVGiu]W!?Yk`_M$B`#p4PIHCkb8=78Y)[,+-kZbs@_=EA4;Ee#_lN
%HlD#oG-HFqZLq.J:-A$DOGd\N-?olJ[^76[38hkTW%]?h0j6%Z6K-?G/fD:0_r@ap-3M=u-Hmt=Ts\@W\<9:s7lqB<_%2C^`3L<V
%+eI6"XYF<Y'XY:.J03$Hir`k/,7;p@Kedu/%6Zb\6E2NnV.,D7_F68=@a<m6WX8rn/]D?!"X7-,R[p18R`L@1S%'8.a>-$j4,J(e
%6[rd+i49lkJ^\e;BIHZ6m$YGE_.XW(!9a4dK3/d'FtF.&,?`&*&C!HV+%bBE'?SJ0VG$:`m^U*a]ni[36m1$WO>tZ.45^6K=Q;5A
%%6tj(*Msc$_h?oX2?@\W'a/S,gU.nn<FJQ')@$(EWXr]o?&k2QB5JZuP9=#5EA[`1((O>01VisoeMn#I%9Y;:4XB%t(lVVu%AUA1
%,FY)EYa>W>q%h89/9'umgsJQE)]3Ko)-,:-?.:\^`'pag9Tm0t1`=P8F\X`84piDMAp.:!$e2.i4?9?jdr^;n%Q).FW#.%#X*b=2
%%FD`I3/e9p:.c#VX@c*j^q=X.KP4b!3hoQAZfD7e2Bu^Ec4CGd"76()\Q'(9+Ut;f7+9hp&(<V%EU$-;%E6*ueh#SlK<-u:=troK
%m/e//%49#P'f>*Z7Ye-sXeqf*>20H"K\%69gqXg1f`gDHM.,a:7MhqAQGmQGHH67BMXL$m(a;&Ac,bY)\t%<Y<DG>,T%q2FOO5U`
%$d1GBl=\N"=6ERB9O(N%>Sr#3XbR**OD9Q)#?3K5)-kE5E3X@&hnWY2BsqSV!f\L]M)R<&_!0j!QlXL-U5<H><'V1NF';7.*Che6
%UoB<MJGF3$h5k4'SEacKj+M,fQs/#W%=59#d't#aA;2+,-/I\5[-XH)MYIbmg5PWkMQ68sWpj"bPgZq;JTUNhWVa5^Wg:e@NbVEC
%_41oTO/(AeY/(b(#)(23c.6!;>h@A/7aoGZ_1m%dfGPsdN.C7Ko0AaZl&95<#D=qa2%2s\E,==ga`UV4316J.Q8S<M??D0(!)IiC
%pmW$7D/"Zl5W2l6-amuFLX@ZtimLqpc"WU[Q:srA]OZ`>kgF')&dC2<ck3iCf=D%T!FE8:Io-WO,/>+L_)S)+=!\?n_8$VhNe8cQ
%Hrr+/QQ*PF1DKr+iAM5saeI,kAI4+,\s*<q3#iem71VF/N]0?.:uo<NG3i'X*J5(/I[Oe9#Xqr(M/6D/+B;K&a`IW1!'#4<6Z^Lk
%<!t`:YW>'j(<rNm;27he-(m9^BU8EYC[o-9JSIo3N@T`!['8L=SE=M/1b`*Ho&POW`l52QEroBBd1$;+%PC'qNTZ-3K]I-F5"n02
%;t=YBI\+C:UH`<Dc1oU@R+MMVo[ER8P^XN(J23M3&"j?.nH;C:;tpE]IO]8dB/$;L^lqR^&HitFl4X<nT@bZe$mt]V./>]k!RG._
%hghVsgcHVlSAmdd%&WP+GQsB/#X!_G]`apQ@R#FATA3B'+>C@0^k\Z+]`gTc9^XQQ&LR2gK#)84T7IO%PC!`AjjWu6Z(Mp<8sC_`
%$c=.UpU0!%"H``W<RH<#E(s)/9[SDVRVAftb^gn:`EFg7+,FM5SBQCHR]R/9LnOnY\"]:V.ln1V*R.Djc@^gDP6RW/M1lG$Ct$,k
%aE9b:K8ZpblQFW/3NPIU*<usBH!9cu49l8dY?>[d'k.C`[4>r?F<$BSEn8$G5anh/]tjdr_k<rdDM*Y$dC(*;)j"Z6eG<YD!6M+S
%>a3$<YRE3'Pq!k:%ER`'/;<!_Z<@b0L'!^X_B"iaB*g[),]U%&@gAqm9rE.Br<5Id/=d+Th1^Xtf6Tss>QlC(ekFIkY\<VUNAP,&
%^nSN;MA8,Y821g!J3ug-'>'Q>`uP=Q2Va[h5W%<D75od2)M:R(E'S!8Q7=p%X?L/^Tp$VIU<1#<%>Jq^%Ql^*(VqjIF:m<<Ma1g,
%,3'lJNH"!tZ]&Qai@uhR%u=h3VW]*U)Cn74*$ACjh1/2e!R_Z`Yse<d4<$OQ99$OgN(f0!O`NcE1Dkk6F$MQVF5tOHO`f6jJS/AY
%-MBT.oF*8a2_^`7OTQlX>U]4O/5p3!QJ`K#(V%J2gaccCa#-8W!,4JI-h%FuVV>k@-Xb'H+BOIe)(plHVW\\$L$6`j/9!jRm]6U&
%!EEF7!ua0&8;!V=-ZFT8bBALVOZS(Mdo?G[LYMp+)/Sje"qIkmS!ki'!XR!g)`.XuJ.2iTg_6>("ea0Rr;[a6>gjGd!6e9IK&JnP
%)B]pimtb9MdS**]6n\OSi6"*#07^=m7PJ.Q]HBR=<RD$oC$=nX/8@EpP-$g?#Cpr@9IoT^a9/)$::#8A"r?XK2XT/lDrLUlM%0JE
%b1MTPa+o-gla-X2%K;_5g/Jdls+I)YoEX!/P!''L@:J*pdnf'g:^5DD&!Xme*X'esEZY?=R*(?F),0Hg:b,<$8PfUip_$he'7(=V
%H4#-'dneq"nDYhi.>%+<od[iT:[2#C"B0O\P^XP.JnHdJG<m*?j'V9a-MB,ArT$-H:Hl=U&S*ShT0^Ssn2,CdaaFVY!#'YtHl/=-
%hr)Dnj;nQP?t,`Q(rmus3_0EQp`5TJ)UIG>D=\=5(Xm<dZ1*RB9:_]0+#(c>SEun@E5rPm0Z`Pa3+5]5&M4dEO[V*1kJ8)u/4Yc+
%ig)*cJnAGW!\Ggk/JEhK%/<cB1!3A6j-)sFn:4"-@T:[8<KJTL0gYBK25Xmn`BR%h,E-A3V'QJ,9q`r!?lDc47F`q4Wi"dU&CsL`
%Z3joi:lA2U^X,/<n6s*UU9tAN=<'H%,?-UpO\scp;@q2DXQUY(jALY6$FHIFAs+<?K4.6eNHmjVG`;\D%M25CBOk(>775WsShS36
%_38^c8O"s+"<'UZQqBkZP1+*$2U>+#V`p"o`SHGXgAJ(8ET7g+#8`L:N4G]r'ANG%W%)Zr#<,_:o'u,X@0\$%o*Xm_UsT5+:UM6!
%hV1=h:$CZ%fpd6Oh8Nq,nCns![16lo\F=$afu&\qRbSN!a,%_CB?<TJMYW05_MD]j[+#tY*matqAb?`s74Ej/q]tVhc7\cH)TEdE
%NGe%Jg*Ml?UUZ0Bf]ZqrZkB8e-EY:=%4Ne&D#oXHd`,]eNO.@*4qSsYLr@IH'!"==ckTa'M=Lag$j1D]&W.'3-!kY!bD8$=-H`W$
%n,XHEDF,t>JTj7;#.Gb,lCd#7,R<d[i[q$Y@5=;>OBWFG!YHH:*".<4S.2%E<?Y"t7YM)h"#A(f/PXF,Z8?R;ablG1Be4O/d>0ZE
%-d&\qn9tNMqRq"-%K@9l%=:9th%;+71gQ5!R&2\1@=@/'\9(J)@o:;s[aR\1COj.?aVIAU/S8l&d&cEJpio7CT,c7'nqf)\f7.g?
%)e`n_?-2@MBkL"I68*cB;1ZnRq7+3rR!`G;$mm&8#32-$<g'lq>M7c@Dla>Q/I_fC'Z<EC%;okoW(pCBaV38[i_P+4`)+Fin.XY]
%7PTpR`$WlVAWCZH3U)hE4.]qM@q>mDn:1iaf-s67j9QB&VB%1VP?@+KQ4[aT9pB.kgrYb^,k^fVa&WbJT0btop-#[D./aiplC2R'
%ip9siV%3o[i=/I12^j5nB6B,AV^eftn/Zgs2OJ0HXm#nHc(J?I\?]VG$Jp30`H$o.]^-aqVjb-TTOq[/R<\7f*\Wu2.()mpLc(>B
%bd(UF!Rpcg"nd6[?UZf"Sm4iLq8@$BqG3lb@5_].%UQB_19kt]*P*#b<Yk.1`5i#9cHAT1VIhiIVHL&OctL_aU5:B`XB*oVK>iWh
%bD=.G&!BFnc(tk[6C)jf"l;0]QHj1qGuW1I<KJuWYugE_P=j>#S3FZA./bt`iYbFm--BV94Ujh/*>^#8_^2Ha@3iV=6cR;+BTZ*r
%Ubuh(WehOQdX&@adZHkI`l9')7](l4J^qbBOql/<T^gH5nq`6W^Or(GaO8/h*S%F3)2St6eI38uBu9fE"]%Ue6j<72(gf]gnk>f(
%b$]6IOT8<.C5>ThPI#L&/e$RCTEW)(4:>BRk8Gp>k;-[Be`lE#DVCqXlaUTEVV%gJFYYLS'h.<;#pZLfA3jn*9udIp0HAF>I#/(+
%9aq4K>)CkQ^cN6!<k9Q2\fi\+C:(*DT]&Uq2GYre(%?-U7ZUIha5Jg(9i^F37A&d*M/\`Y,(AlgE[C6c*tt]3f5,Ir@0TZ0C)CD7
%l`tK-]'0?8,@23jlQNkg)@jHjFe0E.660dN*-_60VCg.e*;25D2<1dJ]VEMg$q\+u!-gi1DXm-/A;>U>Xj[V'F'=E%4K)f/.a#hR
%lk=^GC*fjWkJR'%iikA@ME'fnW[(pLM:FH4ZU0;RBhJI.YG:WomfF@K/7?Mr*.G.9dL;[h/sm<N[NX!i*:-qA_,FkJ%t\Y?&@.7.
%]_!=l5fP/Q/3OZi&mZ+$M3lM%!SR\lNE@EVU+H1P:\Lq(Fk$"kHnB?NRp8`OK?6!i7@7=]6S/\`F9ZR^Z:u1*<Gkq@fubeS^B/)Y
%FbKI-i6BIU*L4Nj*H['G8.1.rgBnE;#-:EtVq"0Ya,n6_%MFOr7DTr*`;C%V5L,*%c"S_O<6L(t'Jdb8:[ho$8lSX5L[eB_#GF_S
%`03uu-;$L^U5"$^3kI9g;Q.**L@7&5aBFm`;WpLaFTNNN&>lR-Gk-b9DEnSb+LVY7`i<]83CY9#G*"a/lajuB364t9SO5PoF'=E%
%4fE#3.S:RhfdHTG!AI)44Wh\p;(r&GW[46cE]nCC-J-bGkQ7p\j$bfgIp-"m?3nV14p]'hR@8u]%&C_sptXD3Df#Wa@"tkiMqS>8
%.r3W5"u4;W`_-j%$PAfPM$b,p9<4QPZ8o&*Wub4r@MP_M)>;080Y5W7T:QSRCP^=)-eArk02/Al0#49/)JW+ZSp=keHsK:dE@N/b
%=[F_)-m\5bedS+s_"pn3%UT!)2t$u.C/kM9+1;sJ`90F*&!rYn5RRr1;Fb9JjIDI.Kf9NX1p[OI%V[4qF&kqr<>:U/fI(mK74%4H
%p0eRC;$Kt_Lo6kE9>(6;lY2GL.JtYJp4-KL4)l`fQGU\C1;,d368DiEi)8oCLM8>EYW&ng6-#mW%:PdHg)T"*UH!21C4e/6"=(uc
%TZ+@`7:^eL`hA[!-qb:^m_OYo`6D\[`a\XM771*ATJ4Olfh:9e@+4T>lFAC'DKg0Dhi;D3,3-'CZta5&i!!7WI4?j+]5^Pd)UgN\
%@V:Z5ZJ,(m&38l]Q3&Y@l&`"*]t;cB;3i-gfsTh9#;i=BYbE;A+AeG:K'^T38>;.(+"#>Ior`$$7'$+3BSo3F7TV_n*+o&[K>XK*
%UK.^b+%Gs=fa8d3#CBJ?TF^MX$!eXaM95l-EJ"\AG`YJ&K43!R3?4u6X%XdP5[t"4irq8/N0S;2AijkH/0e?B+9aM`lU/e3/>;OD
%GhYV[c(#Po0>+#&X!hVBAV09m+Su2'G*_]UZ:</l3F#?'=]]SN8!#=9j^R2>42LK>A"s,<OB=XTciXFZ,=WE/B^&uT!\GghV2iV8
%7X\sRFdSrhAp'$j@p!n>$h0;111V,R%'iP<]JSS1M&9%o+K!%gF:=;hG!NNq"OgB*e:MHYfi:*D]i%88C&!o;SLVN=EJ&BnG-a9F
%QUnS[*&@'NO%J(NTZ<K2mDGUG57T4![J@.#8@@]I*/hMrM7j^8.14nk?n$?YLA"I%hK,$8+ts:<HEaLc*'d9-fekZEE9Wh-,<-H%
%$";gFWN6[S\Y]KQ!P6dO*T)J]79?u*J.#a@RVFV*nH%3Kahu(:FBBJ#/B1A[461jbjrAP^aeT/]<43%I:gC`q@QJ+?<5HF-IXJo=
%TdkH?"cS=La7Dq6VtIE$BuJD"4;D=@VDZcKejM=Q1!n#OL#@:b;k_"F1rdCVk=fbGgcq=a?t]P/`al#jVD4NJVio'-)0$c5/o&FN
%aD_A*650.8p]GGsU0!e&)lSc<RUOWQ?sI,[nO+>1hWj)D=U+RZ6tjDF@="rH(6O`:$So6%7-6umBAogj:lE07Nuec=B`UunoRN%=
%MJ!&t3Y]cC1]s36#)*;%9;5</gNXd';WAcSbT-/@#`?;^"6aPcX9E2JmP_<58NYL:-FY^WWL/&NI+HKWG@T"ffTf_X/hWN=q`E;/
%;0A.hKC=sXUU(DQ_&A2(nMkiE`o<tMH)$)FSi\8X:\KU!Ks,3*,U5K=iR.a8%E:2j)2s/[`/P>(>g)75.12VVAIUrgZRoEFZSG*h
%2B]f#e@*b[a]b$`bJ`d@i%e"7#@%3TCh&'_.9`.$AX[f)a>/$6pJ-0[ZY*_F+$%&&4'$#HfqBYcr:gb.FPsD#(%<7sC-!<;ULJF4
%il2Y/H@/q_S_;K]XE/JK`,S@iNfmu1Y)V$rdM<"&/j-J@ZM/+T>pWZ2pN%?i2P@YJ4uU(LJIdtt3.s+`7=uf29JbJCKU&<Rr^^(4
%*We,;(4XBtAg61_/2g,[WE+duD9,XSGV)XTq29K$Qu4Ol9CGk!V"#%7Ak"]0bR*&@HjJ3^<O_He1>:JoBdW:'i1tC^A((dtK;X^"
%?sfIZ[h&]:5Hk7c$9dgp>=(d!+K<`mKIN*'QhQH\S!S'mT!X(EZutpd-HRTQAEqjs1c+#+3-dm?cG4._HJl/U<*Tj*QF;_ad\)e+
%ir_=>CGF/TDutg>ATpSsm(!oJUpJb)T_Ke6c)i$+_aL,]aEU]UL,;TMBbJYSL1.E*Oq'X`M)<`gmMH$s2-#pJ.OHb%Wu-S'QZW;Q
%TX44a6o=LDTqPm?iM.jGlfa1=\sPmZI/nN:UeS<Jf_C!(_Y6gY2B00q!NFuY,7T9g.UU+KnU_'>:@DIbEYW676j#^9(T?!]6?\25
%GI?A;<Kl74U<sH8I_=<TkZ/&G1MkNT1QDSBG@Fs?$C+Na_,K/"G,JO1U(mj`K$7X%9p8s)U"ganm=OqIO@O*FKatV$)4O0nf;Yun
%)N1P,g9/C"8BW`?R3)42$MV2MN6RH4(fiU3inYM0A6Z-S"7L<h/em/I_7XAr%\,3!Cr4Oi*',Nai]\F7Hh$%/_f&#b8V'MIiZ]a5
%g5]_mMT]'r*R!P$K+5R\dnDoDr9-,Sc<?/ZWW3s[:K#q((A%,pEDmB\q9tu-msQhi-S0'o7=5SsJnl^PhSj+i9^5Fi^H4u2Y9V,!
%!4i+IO#Yc>eKG4gp!nYHG^hkc=Uk;Up\mY!_\laZRDEP4K3(Kra.$P)*M>&uX8HY4)9gh;Z>(:;OKdU)#5>pmN<Y]l4]!(PKXr:h
%faXbPZ7o!kq;hiBUZj76E#k_HhBtT&KCDcmUrsR;DmN!Ge04AQLW"NPHH<1^6t=h!K`Vk2FO_GcnU`14E+3RVfROlFe]QFqYPA2o
%<`0=qF-r0#dF.iTXV>;"EB>bC:YAW=]pF/+gK'QT1p,<[rsYV$.<rIc_I+I6)2#bSnA63)/Ek;,pr"FqZJaQ$k0!V1)Xp5k(+sRo
%F;is;.ZLUh;phZb#'khFEu''Hr5ptQYkc0r(5B/0*<;_Xe0m32&]''LGR'<^bgT!a&2JCF.tAHe^8qJ:J1G5gNfqYA?*SK^<=N$2
%-K_6GFT5,^:;>]hH:*jIaQ9%!76D8<\WV3)E,mffSPQ/^5!sFDFfoG,&7q(:io9?\>5\=I>\r$IfJ?I!9*ObpMn_ddK-P^?G)Xu2
%iDVI$4A8G0ZGp4H)E:%k:=qeG+H<l!)^L9#kS:48"_;Q\<Iut0k;0-U2S7TWD4nabZKmq\/R3Z^0Ld@od^>,**((>l4,>A*.P=$k
%/q&g'=?O4h8gp.WJoG3rbD8$=-H`Vin,]T;8IFbY0YWDmK?9CsBB9f-M9"p/=4GUQ9B[e(-GOUcG]?WW>3s@PT]+oC#/B:s[HT7C
%(0PV[)XCTS>8rX.U290[]I:sZ`X6@X7B5M(I%hG<#hW_:MR$&<Vm5;[4X4!)arnl6acg-t8O5N3nPqsp9VE_(5E2*[K..KlHq0^L
%%d;R[A-u(N7T@%df&T+R9l\9[>ms)9%'ETN%7;%L<I.VLMmM.4k(Xet;P<QsK5ECFftp7/ND(lrSFP(H?7;An9&'d].N5T^nq9$s
%#sM`e>_7Fao^Oe,%6BK/\4oc%-12+7Wi$Q/mF[fL]9d"1QRUndN\3O%m9h3+81*365r@=S3)*J+k@BCgRaqKE`Gf=gGj?r.!6TGj
%i's+Y%3aBRK+"FW12^R-1.%#""C4l6Knm#JY<&^sSCJ+XWG4?)U_=)11bEs.Y?rBhU'*W*UCU::mf0Wf2SF8Z7sa\("oKIP&MT]O
%o)#2qZFQA(Lp8OYA8<J&[i;)sa_mm(4bj"8S'M`[R9?H5D=Z7$Kc(;QdHE>\<`Wg3A40sUnoI$I413XH`h%)+1B-]Ok+6E7S4cgu
%C0pMl+puSsLQm+[lT.kg*HR:do#?C`:_f#]9AVg3n./pb2`X:)h/-K3(a8S^HM^[/-YXMLCkK^@f0dZ@5tsf`<LqejgTbFOFEtSV
%pW$J!Nd%lNTuVZ$\,Z@(d9"*_a.IhV_tQqkrVYLGhgO5ICn!Q$eF3G,rO_g-rpJSQhgRWkr:99rIt%Fr\)722+27X60D_QNoRpD\
%pIG5]pHSTI?[gCr>^^p1jF>&HkeOt1LEHQXh>8;.gU;A`qTVf#s7lQ=s5X.XTCKD*oMkbLVuH27Y<RIpIX(,3NmE.Mqt="oIEK>$
%rI=h2V_co\]`76\J,eCJrb@gAcX9i:r56/8Ie`T>hgXlDXi8!;*UuRnY@9@oI-tQmZ+%YQ^]0'2IlRu;LED$@jbJ'Ks4aaG^AI`^
%O%/O:;9$<JiEs>!msfV<Qi>T\5JR*b='P3'P+-T4&,lI=+2<1&rQkN=m_eeF9`,jcZ0u]d<<gbHlZ[i-L4`A'\AuMT^Z-QpZ*,me
%])[m/e5SVc9q_p%O'gSi=#T`::&QSM;k"7upSbu/(flKZoI8lM[`3;'VEJO)CM6ZJ4V"^tV43V`;8jV.B]q%X(9*J*^kb4OHP[L\
%!,Kj+!tgNd(?)b(`8BkmC(Lm8OFBQ4ni#A0doW$2>/:\_OQG"N@mYeOWJMd:Sq*4t_A-tKekY@Lk<2%NTtQ5NRibsm*Qj4/nA?rn
%Wu*SocW(t@?6O&F7C\U^]Z6RN>eJF.LZrPel2c6OJ;Y1`-[N<g302'"#`iO!#pDmY.0b#'1?.qf]5NFi`XjDg.&/ArX\qTj7O9Y5
%:/qZa[s/DspSb*NYJfqsI@MCB%`'S#R3%rD9Z0L-KP+hN-5B[QKV,_ps#PLNgM/s`]^\Fm(UgJ1dHd::^TH8&W#n\.r7=a*gbF.r
%l"M4ri\.MfoWE92&eLpIDss)bJ]TY%hFd7\rNY\O2ug>TT,E?Yg/l8]X((g'Z2:$G5OYp3NFY1.0ZJRs@prR8l-.*6^Z-R5c\l&p
%Dg)6\b,;uEWNU^7hp;N@nRAa,IrbYH_0-u2MDX)=YDX(R\V'AHjpm9)ZcGh;D5]sn,s93%PT+GN/SnfnRFdBj&RI+T>Su$Q\"RS%
%F2mgsmtZDJ`R)j?0?92E$XUjd"ipdjU1AQM;h("SBSd2,gEQA1Zrd4!B`Nk'M`H='mC"_J&a2K7BMM9b$^.r.3.6m/9=0;1j3ZP!
%r%'l=LdRa"Uto=Qk:D_J6XtPbgF^+LT;?dFkPXK:p9)neIJ8X<0(/aa+C:(ZgFMN*h9sVh,t3Nd,*njSL<#UlB<?J-q!AZPW2FBS
%cS`g#i,+X<A]XI-?iENPAC,>)5HdTLX-33Wanr+!rG=0^G8V36Mt^?*nV<)s*N+5WLVm*+=fpWas13[r*AYlhP0*%o^<j%ll77M`
%b+S`Ngd6ET?A$9e`4rJ=RJu.FL8%eGK=jQ#9h-$-+'O5ras*>hAjMe9;Ys`e)rp_A537C@[p+*[K%g;"rb@oWeVIJ:rS7[@*!BL-
%*4YC`VRs2%qcD.VkW/Q["[O%.Eud[fNcPe(>0lXeRf54jd'<)#7qI6Bli(i''5]V*(MdibeeA9MmUl">bpUZ4QL`7SDRSCW;tK1:
%=?nBCCWYB`lL#DXro+GQm*"#LEI@pZ9"hH_gH/e*h#T/`QZ9&DG@55:7hdTEZTk"4Z%U8rU(f$P+FM'Di(:P;f4>%ed?U$hE?sZY
%Hd8.$KA"G?1p0lqm)pLpm;km\,$b#G"^j2`FGW%ngW5oNcCXKGQFjXerpXspBZ6/#psH%R9,Q)d+]i[U2e+ADCo#fbC[cs+1T[!!
%_+^c+9_:cu#3U8V.dB5Q">XP#3,56V7)_uS.o(5Ykf$+`8UbC!YeeU1fa_BPhH.@:*Yd]tfFXP_1pgZfbBL1mPMOr(6$#9W3QSXo
%LTT&!KfW<TQ;B^j-<C]04Q67,Ute&(a3"Bfr]j**f0@YD("YXt3Z/_ue)C`O5EqQbYC<KU!Kh7'`5h1Kdg4X(i3GDq#0m]QW2l.<
%Z7)pI]![j$)UgU3jkH0YEt1VRnF#R"ir[JL>A07Q)]["pYM"j@l#bUtrT+^dUkVBBk8Lr!E_^mmk>,<ICY)G!#G7^;JkET=22QWU
%=@Bb#l^kZqGE[hGg*\+^n-6'(4BCoQeHf<U.2,qGR$=&#LfN)kVBT%&&oL(W)>)e;IEERR_!D1K2*G]N9URUYJQl=h0#T5UV@dm?
%CZr2KS+4eLT@)Wd@Hcj/QfCWcNNQb_g"L""=W[*59V"ds`QqB.HEcJ%o.;\7@$II!R4;0n,3qk7O#KZ;jge0>#r)qN#!q,b$<8nL
%1N&kV'IU7fP`6tMkBu<OQ57[&eHW?jH<oVP]'X*)H"Z/5c^2!+#[,FCJ[0RP2J>PLI80aEL_L`56LbPSB-+*Y!#-d7lpDEX_bb'k
%RHm&u%[37&dgM$U7d6a(B<:;=e]Zq5#(*ZE/*kuFY5R";kFJ4Um&ta8cRep:':Z\NF`?TFl.A#ec9:5p@WSppIB3F*AKAXp*_)hj
%QT0cPC`D^PR6AA7%1o>i]M&ToCqQpq3)To^k.E6`)n38\AioJV1Wg!ar)T0=/Nu+4)/>B!7-KYnW]E.5//pbf+S\W$,E@P!H#0`1
%A9OG\K,lX,_%&KhX=glW*7s!romZP`#-`CT]#6IDD.Ut9hXrZ>!UaCZk(ac4LB5>S@#34uQZ8h_"Kl8!$ciP'18oDQE.J[;6ZYsM
%3U)\H9b1fYma;(NT\`hKE?E5ahVg0G#2=uRJVP`,En-m_3orVhDdgPer7d+RkQ9qG[?!2uH-=N+"m5)Omq'Y-US!f5%#hch/<S5X
%&=aJiQ_YJ!EJ)=^iJnG(EMs-!:hjs=DM.2C"Zm)#<L*[TF%1fnGbHR7ZU%X.OEMVQ2R92AmJ3nM\7C"Kl,at-(;XDk"G%2M*u:6@
%LnPQV09DDl%?Q;m()3P8qk_A!U?C+ZY0bt/7TSU,UHajc(alE;bEGL&Jq9hU_PCAZ1^*o2[:_);:f2OQE0>giU%WNVJ?D1k>%8FP
%>\V3DnB"N_PDC;rN$7Ip)LGS_$BgHb^e#hfBejC>KX9-cF;[A%V53:\P\_Ag:lUd@08cJNW;m==fh%3TW:[S'l&;Um1tAVS7GK1g
%CK"fb3LZM#fhnS^'oE5e"pb9TX^1YQ87u:gbg/e]9Kj_SCHC`YoN1e$q(js_HaL&,\4.LgmiS569j5,%+dt`=R7=P+_f[G+K?e$h
%YsM0O.7L#?Y1(P8-Fm,7LV9BRc*K%Aq9i*bEY3a7UVo_5oKZ#pj&"-srIHudRRF!%PES@#['CrDC$7"L)/r$=@n3hC+H7"l\Sjm6
%+Cdu/p:Eegk)3JP0k6f:Ci?a/Wrf0_(L=IP.MiEn8Lk;$3RGq":u72A6;_31rEL8R'U`WGn'EW(2UJ=(:o,pYWj/8"QVS6A=uWjZ
%7BR)7.O90OF+h,"KrGK^.]kFKT/r2CF!3@n?th__aNR),p`KaR:mF"NKpB5,/5q6)&'JMf<PkfR.]WN2b$7\f:3*Wmg5)I/WY>)&
%87MLQ`2#o6V>0?$kC/.)h4]]0^IB$^N36'5<?o(I)p4&@;o^?tF,`@!/%S+l`ec=sLrGE]UllB5W`DSp9+tX_b$i/iPU8a9eZIM9
%&Jg@4pTA5XS_QeO.>S*O8prs-8\j>Mc_u2GbNT#%W][RD@=s^I6KiD0;UZ[/M/5-V.&c:TLkDQn5Xn`I.;D4]rF7D-]52XjVm<jW
%59Fc0,T4#.;ilQ5$<Nlr2G8`+(*kgq&)$-'`P2Z-n)esn4?[tpOnW[8Et"1P2_`$7`X\2Jj"=/e%IL\s.Jc5A"GB?KLqIgQ8BfOP
%O4rL:Wg]V^P*iR1CU72;eQ)9_8/^:SFdeM&W$.a62i==>!_PNHgXU!#H]X6\heXL"1[^':o;`o\iVh>CluZOt/46Er1A!a+0UZm^
%"uR=@Z@N*oYc+qFbg9Fc3#1&l+_XGij':*Z6f/H2c"dS[P-`a05YGNZrm5dm(WBu_9B-$^0_U]ETu1/X(5ABW?[7%S-4tZYDkJJA
%P_(3<5u0a-@^<8UN_`Kd@VP/mTcOq1anG:%8PJ?>eYJmQQ6o=Z\JUXK]V_>?8So*b;5!bbiM=R#V1t9>2H3>QKu5T"Qp0P^Upd$u
%$p!?u7C`YI1juXrUgdFr]R[]M929U7ZdY%Nr(H65-@7f(fd[jK&ubU,/=ZcYI)SQ12A;Xi]GQuEHZtke)$Y(kh>e]NW\e\5fudUo
%R(Q@_OkjC?E=0G%)mstrmrW6o4rQ/s[a?)=oZ`>lfD=pL9W$jEl4lZ8gJDmg@5fMY8e0DFh<TH7Ce_`+2dL]=]fj6tD!Y#nJXZ9!
%7/^^b8'1,phuX0NB.PSL%ADfSeZW(Jk`a>sh@.4f^CR%R\*C@`:Pqp%>@nZ;"tY#"nd9^D>8r\1>uXOmoqn[h\;Q8giT8f(SmBB*
%k)DQbQ:Wi2&-l<l]3U8Y;gMDQ.u(TH?)>nr,]dWeiS^O04c1XQn&=]Pq8S(4,erg6o#G'4GSBlqfliN-"58p)C2\<r>I`Z$FegJJ
%0s/Hq=RP"t:,B%qi,>?j4dR3.a!&6tq:#U`-O[ti3>SMV&"=6!(.7',&W1)T^gn.MSSMWUnZ?KXjhbVX:_ealU.(6c:gRWkZn%jp
%P$`aPMB(,5BS\uK`NG?WQ]2)i%Ls6Jl1!5tCU\5Z;Up'>k9;Wj:>r^Ne$_I^Amj9eh4Ge-O%/eJ`/q!dQZ8feA='QC;DJ,>SUPOQ
%"<&7-c`u&KG7F\+*d6`4ZFs\N(8gicR8C('(_@Q.qTfSH:am"lNg]`CO9e>mr&Do+F=X_Q'g:HlQJ4haWc?^r1:c/dK3Ch>E+:Rb
%RaM<N-j`>\PJX'%ejK+7&ISRdYMJW%C*."ZXe7ZWPK5oZF3.ubO.,,fjj7Fm?9kE:'EBZ+K#-ieJ:c<>#-Z@@QJnO<%K0/7&:5]9
%2E!l=]%du?f4)*Bh&1M+3id$blUSSDD!BX`\);$ML;mj\#<Ve]LmeZd9iBSLQFqp&Fh%gL^=`D]lJ4,j]0AOPD=,&]p$;2E#JMj`
%J)C]MOmq\o=M=U`^Ts.s^\XKsll^^WbLaOtCK5;/]bW,Hn"o_A_:;+_FFKK%YS>"Zn'#L2E*]*dld8up$e3A-e$75#1mjMgmAMP2
%:\u#&e>5[!bit?dHb!V.^hAV,]qiYaX9eN*'(NI<%u&e\#Z8Fc1dp'HU2Wr,<g&Wu#ttl4<-\^*2L@GoIL3&-QtaT+]pTf?bN-Vo
%JRFqpq9UuV%^$&7I;+Ua"NLs6c%b$hoK[I"U)AP84@ImlE;`R4Oli)TEepNY(=q,39Yeo;p"m!k!\-S/42a\?GeBmmdb0gIbM!Qe
%=7kNB;/R&k/,$dk`@3kjGI][tpmAc%L25*r1s"Ka^mqHKCpSND5SC?">E`G\FRSO1Liu?Uj.Nk_pLs4;5'W-conVj4XW7$a>q7/3
%9\Fgm&_^9.lRI&Cj&bJLQ[bRC'n=hL>RB=LPq)l?VK71b18UTg6/:J*5M!dcT<ooPBXMD!)AL.KN\ki<$(N#LkVPXLa<=L.mV#VA
%E/-c@ZGp+djrg!H2#>Bmc"speF[or>6>q('V2MhG_MUY&bS4jCTjH1lL3B-K9`]ZjR_Z5a$SeefG#F*T0^.Oa#uT_r%D74c7Bj*h
%4uj'SUp"VMH"T354Irj).(dr-H25h"Z^;#.8@kJHZPeX6g/E&86_22Cf??YHfVPfPM^Lh977=#@Tr9<,!ti6]M7>:Ifl"+f1ZXhA
%WHiNG;4R)m6,9^6"g-),]R7ikrL.i<)WY4L#qBmn\CC_fHdP;jig4W=nKf+pNsI]6D+.9V#qM3D=&3mfJZ3+dSnq#D25s?Y.cXq(
%m<7sEK4E!()K\QGKhG-3cCqucD&suMr>*X:;_841URGF4lIh*c^QC,+X(ChAj>"tKn6"5Jf8Mdg:m/plfC"#`jig;>%opX3"e.Ut
%DbNc(d5oZGe+a0[L%#4jV\+9TMB\sRD(7Fr))S;,\d/,r/U"`?*foSB_&24$l$0r^S;U+&ikQP)%BaiqcX74ers4QZrG>I:I'=NW
%mp2m7,1)OJ.F7AE_C!Hl$64SA'1B5cKf/Mu1nCQJYO7-KVO'InA&H8p]6UnSBJ^gnj08b.RR1!D'O0o*M^[d;0JQ#tk3Inb#\$J[
%ZU9%g;rf3FJ4MnE&]=I6<Cdn`6uN=fA21l+%Nea4S-C<ekB%]g7]+Unn"FYIiGba]7>5+Z[eD=#.\T^A=`<b8U]>f*As9?c=+Q/1
%&bd;_ach1`me\3;PZ/!9NB/(6h_e3G#IDPo5Pm76RQK#mnE]_?>/bUkd0Zu)Le_o[8k^tN9IHhY?)JC[B=pngVOLngQBPp$.UDYn
%XHY\D]2pp+\-utH_*]30<H(D<n"lkh0Oo3RmS1k'bb;b`B"too`W\C;h_ODS$XWG,pu/obe.uf3<k/[iXfV>9pA=J"'2]t/gXMmV
%fN_elGocVp";%L6:I8Q8KPkeLaEhkm>S(s)4QPKb>uPXF"%jqc7_EV;cH+Z*m<bf%[a6mRD.lXhhY[7%ia!P[r:"_XBm/-O4BZdJ
%AP@(OO5T:r,bp;#0c#'^a9B!P@291bN\^co[uKf1a!g:#XZZ?O!ER0cQu[iH"M)<(9R*&TU5=(FYH[&(R<.<?c'n+6nY^#`;'Kh3
%:1#iqNd%_H$$4fO_(HL!N"m(9NI0_@qpHja%mpF92_>5Lapke5*q*Kp(#GgX0u_o%pZUXSU"dr%TfM4[n+S]rcVt,9L1-+#R!E-!
%Xast"W37's)K$Tnjtt?4*"b6-DP_l6Y5q"`,b6o&hAV8PdHj'<?*K1Li5d;mb"E?Pdt!F']\Lo]Z<k4dj0/ulAT9:2UbgR.Ysn=q
%>d=EK\H<%5-%W2fG]iiMQ21e?:Zu="G/D:XKZ[8!OqH2aBBsd;ja@j%LI[HEk8uu'-[5bkgtF!O]%)3!VYQm9mGQ^tQEGU'Lg*!7
%bQBBcJ2+tCAFfX#>re8T@QbhBf4T*"08(LnfuI=&6<%"[iIELn48FCWkXUf2I3>O5R@L$hARUJH0#T2#0m2@Idmj`G^=6qJTZt)^
%jpqtF)UCX"C46+^AFo=]d/@0[b?g(n47nL8OGY/QVu]9)jr]^p%s>O3c?)=TL?Rc_VAaeO8\f5%05?$SMtF64l^o)3W^OpSoXc(s
%?nnF)Q-04:R1@=I_i@ZYV.iK'J\6:X%V&tH'.S'8JK`Ou1W0H:<_i!E26a=(/"1&j!eK3K9aMCm]Z"IK3X?=O_P#]#OJK`$@'IDe
%Rf!^b\u(M'2+B\P6Jb48P7L\\6)*]8o$WELcP#ZbDseiBb&!5V%94t9U(Cr(aC#.?kH.@DfYlo1?^\srZWkeR/hL/WU;Q@N1,Dq<
%AjZTb3+X[Bn\?k5R-`?Z=P@`8?&[+g.bu_3E*JR1%*)Q/L(<()&)XV<k'm0^nF&D!?qD5@Ij-Ea.-QVh2n)N$+4#%\*4&I'Qq)3q
%]jcSKIO+>pI%q7l$^H60/:?[OZ,fpL@GKnQM.Yq36Tl?ppu@SHAoAJ45/A;/<!*M3;o8&I>]II5?r'Bg]$N<VD.lXhhYV`?i\$7O
%5?tu:-?oeljM-a`MOML/\2n=>nITD`_``bnQK1.bS=<FKk^s!-4<'Zp?R;-Oor4H08*E>mY]7Zk7s^qk]/Y_3F:,6GIqKC.2bn'O
%^rC(.47Q7)<A5$p)Y_SIFKMA#i0>2T)oA$*G68/>e!G4t3@#WrHC/Zf%e!_36sQtm!u\j$O07tBO`(bJ)T]l9im7q>'cpSQ#Sb6T
%X]8]WA"+n7Hl>J$8g8o@)2k%*ILUubOQa(Vc(h7g_"C+P%Yc`!I#>IPi3s@n4pZ+B-FZB\!#A#B!3Fo75pQ+h]#BNk"5XE,@L]9%
%O9?`Tf6ViS"*$gC;4+m87`#6WN_<%Om@N+IYt;01P_>ug"L+T1,:c2j')9da2L@R8d0H&'7&*_%KoQh#^=<TlP:1c%1`*]JF@X`m
%kl#lcSo/fO%GS$'MHu>h3^emtV$0<s/i)b&ZBQ5U32Dp/jb4.p"u<U"2*O/nQIZZ&SbF!\R(]"Kkm:+UM$3TuF%R-i+IT<t:XG:L
%:mSYOSD2_/4R`23e%Ua6it!f`O_W\'Ylrh5,C#s4Gm%'lZ0]_W&R@d]-l^KgA'R(o/0#Cak$m55N1h@[a/4EDdKGB*aJs(!ho"d&
%Z8E7Bd)f&IUp,@ZefTR$P2oUF$&bp<Tnn>0N^V8E9dK:#',<YeM#TT3[Sp3R"jtaT`haBIS>R1o\04Zg6X2S&\AFT^NB]'MJk]F7
%Rnsi6Kd9qLB8i/f3A!\,8k87ZP7HY0!_l\g8H5SMm,4;`YFO$o.5)Y,6rG$>3^AMc<tdiplb,'>URR/)[)*0cYu:[2@StFn#U=D3
%$\O,;D?Sf%H4&IfAs^?RbY.Eg'V^=eV#K9HX7gdkm9!S#9Z/Ikcp\c.3Flp!YdpHm2tq/M-\<Q7!Ks22Fe,J0F?MrkH>C5i=PU]'
%d_aHD&/VVO#^LEA7gR>_@Fn':=ILk,F%aJ&[7e>NHO*fBXs<$$_\!:egcWL^i_d"i0HHKHg(K2#;I/*d:O<!+XWE6A-I9/AQuTt/
%jmop4;.V563b'tO5S^$M[[0c,T=/<K,NisqK]dbJ.u_gL3WAMg%$;/D_%A&>!)%S9!Bco@nOAJI=u=@L4&FE.YJ#3$B>NQF!J7j.
%^hkHud_WuFjQ9:;,Mnof7]+sK4%V$ngtA-96bn*FOeh,#\"Rk-$WlM^hl!Hc(cqY8!Cou5*l=(TGaIqgq="B]IY4XA;XG\'X(2Ip
%%dTB&2_a4q.*<_hF(rmNUlejp7575s_*lU8B-C-bf20Dh9#BPUEl%D8o(W:(pHhOI2C4N%e+)N$P)%XEkJ4Kp2;`-.pZ_3#Jo6$^
%3Jof4,=pesf?qOW+$e=Qi5S+pJql-LnB+_9g<(UskBsc?O#mp5jXURH;s"pIFi67J7[-=cYd^=I.[?_iCWZh0[i80_=B2<;PR-mr
%NHI`M@7HQkco#o^BMEd+qm1Bi`mN$A0?97(j`N[7?!bR9;W`+,SN*H-=t`)Q%L+O;<?Y0ne#OjkF@:sA>1S[s;60C15`WLQ2g`J]
%bGCiI2\nU>e^*CgTI2ViBsiXT0P'tRe@GXTdK,)!#-Ce.TW)Sf.MO3N\IfN0W#uZKX#o']Z^#Vtkp9#T6kkD;g44=(o-tNcl^nR[
%JebS9&SWqABL+M/nS@Iq,D;g9$e73^I)ANX[D6r!CqPJTL3G&'b#&'^b"0_RPsRk(L1u@0P*0'5N'ruAjA)fP2V=%)K*'RS*J1=u
%ocZr,eLDp&>?'CmqVK+,[?GqsdiU2Pc(;\+2cX%a@ZFXHA_c+5j4#.\#J7<8naqPZLfuiUP%DUWoCcqS(Op_1)UChS_]'o)/='qe
%?SuitJ7$Mc:.@9]D`='9BCV&HO$d?W&05jfM<"mrR31:G_?H*[Z5/<g]-)<ohu:K-N.u):Up^KU'VKl':s/6c"&:G@3(]EgHli7[
%[jiU2m39FCqoMV5K&dS7gdn;Wqq,YP"Df=MUO2A7H(*d"Y48,PPl.`Rrknb;m!,!os1d=uZ]gReXN"ksAVM'>\5G\?V(O$k'gE)$
%T6Wn(NuRH-BNICj2UoR0f8`c^R(ciI?XU68TS7$J129C^rTsqr^+ST06e@(DPc)3!3$M2=bBZBYr^#bbr06,IhrS!/Jn$mb]a6d)
%m0-e$'NVk3:YHMn$oc8:Z5G)r#O&\bHUuS0OS&m5OjG^Z$f9[pcJ-YoF:n<!ME_GR=O0*>2ATLcWb.Ku"3,^9k^]ZB3]VLQ$C6re
%<$&@(C6u)d)L!$TWYA=Q`6K5Zf_4_8<+HkTXtH-o"ZCf];a;i04!EYOI:rR#S>jd',1b7QI3!751L8$@++FE;GL?!Tb6Zr\![Jgu
%n8YFQ](VbX@<a#A;mh2\#LS<+>i2Z.ZUi3^]]Fc">q\F`>t"%tHkat%bnJjTS.Va!d^&]<E`Ai*;SR%N1IL<7q!i;&]HDN7K\WbG
%O\V&uHP#(RUH!!l]>2'8qDUiQ@'XMXT.I^q0'[Aop[bG*7</SjnU7"hZ``hMpdU!Mbnd3@`V0S.Z5-T<;TWdtAEJjIIOi-0m_ejq
%Uk_s][,[AiC_ttJGfn`WasiO`\*r='>Nd!:2Dh<omsXJ]oD`DCb0K&5`Y/e1Gmr)9.FBWeS-59,1E2MgDY/;f)_-T%GF$6f%5X:D
%_8*i-8qiHW,e<XR->=8agD3Cses-AM0Q%lu2Bs>M`O37LY$Yb1+G)XO;II9qC6Wjl3B2u3.373G`#7&B4(u..k6NpXPT9tOJC728
%Kj'c&@9(Ep8Q/]+*DoBFcrk[L@C6UB@IO\(&@!;nYoa0uAb-s!#Q\Q>QiDSId$H_2g\JAWZ]rIZ_EQ>jB?f!aGS6:B*M\sgE?a^<
%C]Sa>2mB#B62juTO&u"A@b30N=])1PidOfe8l@E2R$I?K5$H*=lM>UPbn`mtaCAhh-GD$g+r97<lUGbUp=\a(X/^gcEI=R>+c&4*
%oL9RWD9rf;WlU"`5VUTJ._ta>4L,o++I=)PIs.h?N7$ju;uqJ!n@qmj@BbnZO9KuKV/f3E-j)k!cpeeL>ahpkN@YW9`*NU;Z9XSO
%$O<[s&ci02:^,kHH4ID`JO!=B>;r:LTFL]^'MsoAXoh1g8.9RoBnG2N3AZjG"t[8?:#If774k56/BZ=2($EpAoVLRCs65rdJ+r,5
%kPr0;P8&D8.l$tc&\c0i*oK`!o/smZ1jIslGN,rin0\\D\BLZ=qd&5Z^\]gP'%5gfO85&;^(SS>:m`!(4!rC,_)rssoU:&2]'2*D
%\pWN@O%;6:1`qj"H;VF$jYWFeZCKBW[B#J953lc_\+>s4,4BF%e5r+98onX6qg8]tcZ$OH3kAuhCJ,E;RM3:a'\82GC2?5H"FC<I
%c\hl;#k)En.DXH^N.TXY:?\#0&-lsZ0/&JM39c;HEf0fL#cgNAHI@JWR@"SBI>(8p8-l/rdcBMlM?>gH\W;C`^f!pQ\KIp^%AcN7
%)L-4KQ]iVt8:!TSLMFB/GZ+or]V;q;LE\W)(4eopBI&WUp0%X^XfuBu4&Zs"ZfID6@:_jGOsVhPr2VJF?ocs>"Q176SAZPl02T?t
%`qN1/A"`t@6FMD7?rkkcSrm$^LePtlN*:s*qT@BE1/TUXEo9)=fb/mg76;>9&51"FL/P)UFVYVn.)S+>7_S/onq:J25sIB"Yhu\0
%"H2jO-B#^P[$Ld1\6LHap+9rkf-"@.%ICJkKlrf&m(g4m+"ncO!QWXB/"<gPbd17Z@%C`<J2oj/33!i1^.D(]&:5#Wle0_N(!f9d
%0Ha#fFMg-0b2dmo&mD"md*'+&Gn4[=%2d6lHei/t<E]tGlkVq!\nqN7>%5Y2/NR#qM&,6c=e%Ord0hWsmP,kubnXM19-;$>R"IL0
%7uFdR;>XXbM&,Uo3LZbFSA<dQ)6aONE69)_h5*t.Xsu>.C$H3G+Jk`eJ/.Y"f!81Ml#Z6jH.fhB)a@MXa<E,>%)qZ@)b3u->^dCJ
%o]Df6l$f@[?nr"M=Z`t`:i8&#[_]m%:/U?]>WU>>?qk87@s1-%Q8;UpWg2V=(@?\jbT]^\Y*M@PEn"SRXr'H4Nld-3WPe=I#[]Sk
%#_5n+>&HY4kY<99(6Fs:'iq[&L?9`j'SOGu(CO0A4Co@s((+Nu@8LuBVU[6'$PaTPi?@U<'H\HcQ*VjH8)Q?Ba!8K=Xj4t8kp?O8
%L(c8]Cj1HPH9e<Y9>X_=7I(Wr!4.'<cpq$kg`n'4,QB4pMoAG+XF`hm^)&8&ER5+,\HrZ1DK\OM4VJZU:\n5(i+;_^(Ur]C:d]I\
%b<QF^\L[o,K'RGRF$qWR6;%p$/.9"@8#2i-K?NhIcX2rn(;kQ'-L(`cV4oUBZ<ZH6H9a7Vq$1FT(&J63UL*8hb=>=sLkO7aY00AL
%)I8\m>#FLpS5c]fF\/R/LG$bBX\`t:>4V2RjJ>Uj?".QOfQEU]kNKM,4G='-c,53FqoWL.*C-ESBamfAC5QE`8L'dpkEZu2?Sp^p
%AF;"CI'7-Z=%YTLGH@_]Msd!?*)2AIpBs&2S"cT!g_T1E$csfiND*.lm2>*&cg=/ap".k9<Kt<?jrHp#)CV7XjRpO%TTPD4$ihG*
%$B_X%>MLd`lH's8(5mnJ\C[CX:-o!AEKo*(<p@!/'l>%XA54RJRRZ8Fa:AMmTTDheR^mRs[EJ8a=/;ko!$cP31G"`H/CZri<]\"#
%BAZ76(%btr^:>Y`#_5:m;@)+qWZ\7H+SBeXqoHs)nCHD4M]/%:K%^*X.jE%1#,UO`$X3PM$+VbXHNeQg8hl6CFg":.=NRHc.T(jC
%lR<5d!R,=pA3_Z'jV+)`54'#/%PgD?Jm:lA8.?>R>Bd"o]a@)#Y,a@O0JaJ$?+X/T4n%:$+D;$tPqD9lX;K'S/B]Yh2=>J*R`&6g
%b]:j*HNl#k]5HY'66#tua<%pU0p[HQ2gIJ_<!<n==Hs5J#,gp-h-&r(>H\&CHa?=Hm#b7V'9hAo79c!J=a[m*a?UA'4+YTi)it4<
%,OcgTg4,m#Gt15.TmYjFK%MK[Cr^YI1NU(0K\p>b)GY^ONMlo'OccU=F.JT[";dI4GQ.Y);<QPRL;F6<@4>BJk;lQ#$6ES*I/Z0:
%;%-cB/\:fEbXK4+f@c(2_5du6bC!Q-0oEc)9LbSNQeBSSCT3fS!`bA,p4LeVP8&>s\ICXGbAJ]:61LD^o5[Z21A\lWC,U>HQ"i(4
%`G:REc\U%UBn;Sqd'AY[Y]PCg#>TnT$SC9$/1;L)6ep<f7Ye"4%r;GuJCCk1oMopDb\d%]@58]HeU?;B9VM?Vh!-H0UFXQ>_]VRS
%L'*&oT8]0.Xi=7Xf;?EtfLq?omK7feB.AXXX0J>)*'/*-bQZiT\Z[[KJuX*eVt6RdTU?'HiU3cNbrb!hZWKl:O\R9h"o^EGb#k0f
%m=pIW`E<OqAGd"Nb#7.bCBq;"mMCS$nB"]BmMs=`GE&H'<`D(5'iarX'EO,kTWCP][gEN>O>sQ7`DP8:-6F'3C1[f?4Qn;?NtB<?
%-]%`q>khbU$j)G:NJ/;Yq7obP+ZbN@TBl\TRL;@)6"<1h0mf7'gk7iH69h[fcmn(oO%Ke+4?ME3(H9HYI./hX.G;h"3BV`3U8[fg
%O^;4p1F'SV?XuZ=2Rpnko_FCrl$%W+N%*-lI[r(\nOFE0-[:;%BfNnNk%*EN(YOurn03M5eR)ocI/X-nV;L`&S$GGGbD]'`GF_`J
%1ra*=oqb7ff2J65)BB7E/.R>f@M5g2#JCl'cEOUk`T%&8^]=p.Q/08$@WNHObbC1I;HV::-8GNOj0D$V5MO(9[Ci>.)co?VF)sc^
%K^=na@>9]'97e-0EgM?RdMW,g]3F@,)#Rp[9m6tCVK.2KS.WV?V*fFBLQg^1R16\4$e!,?S9_)QdXoIu<X7G8p5[Nb6+Ciq:r8Yu
%2r+h+%:TlQC1Vu,NI1$8qMN*S^1d(d(61_C[PatLb4C@"?sYmP$Q=qf]B-W98u/5VVKi5_nao+7.AJ.P1@,2f<8`p[#+h@jnSXj)
%T.NqA?/56%8?>gp\#jY2)<PZ_fuuV_32RQ6A?FE+Akfqm-T$SPqKDPL0IMro=i_+c1P#gpQA+CZV2Kk]W&7_A]KM,(J>"t!C5>M%
%kXhPb457Dd,LJ9tVejSE-P#*'5n7/`[W+](7Cj41.9XesB,kX3o/\KP4tGtjkkD2$pW`m"O.6L+!3Vq#2-aKP'rp"n4W!D\\9]pS
%K7!9-nFl[nktpj3p%+mFcg)rHm15Q0Ldq#B4XKt#0;"H_l[.<U%R[9&N6SCs](/mh!;80=kQr<Z%V:9.6VmN,JCKUjKiSo3T]i[%
%UkHKWLMt]lD<Hfd,lF=P"k<9t/Ao\_CVBu,hn4MWM/0u9OZRphfX9cZcZ3m9>e69W`UU<-?G\J`CL"k8.I$q-j7u2arEEIUMc"np
%Z@B:-@[E8[H0/T_f;n+`PdEEc"r9X7m!sr%abn$rAsUMM4KgBh<(:q7IiO>M5RW>b(J*G#hAl^9@nrW'c01+qD_G1Z3D"%XCZsKt
%Re!iWZb66:?!UaQKe%K%%e]_:%@AHQeM9-e\ej$r-!8)YGDluCDC?TPkugAfD<I1"9tA+4mH2YJYfH.H9]\;]g/@$UI(R7eFRcfd
%20<\K:3k^nF%AVJ;N*tt4Be2%\:k^UeKNk&I5MfX$SW>KEB=@[%#qlH30&Y+$\o%4&Dq=!;(2Eg[Eg`Rj7_.!pDW6e(Tf2m,M,D,
%]$l,SGkn_:\%;n7k(a`p6$3B:5(r2/\UFt;R;i*I5+DEA'jo;FlS\jF`1%16]6ru-LR3';Fk^0aAa27dcHUG=fD4++[.Y5EcXQ8$
%e94>)gqmDH&eo=eKn?&dRTRq5?P<jo'A-A3D/XlpVN)Ng-1/ELfW2&6dlW.>59.N"QC+^p+b?2Oi>$#YeQI8%G?G6M2V=4JF`htW
%%JAp_`Q-Sp$YF<9A!MY..k?[a.?PStO0?#3bhThAco#o^BMEd/q_KRoHT4(cDuiTMZ#Uj\C:(L2.J4Zda48;thlN@4`sS6?4lu=<
%/[CjR`;O;V3Ip4cdc,oqEj""=65B3i[6S1F#@Bip?!KHb\R5ZJ>@@5b!aR^"8f4^g'V(_42qX>FNR3B^Tkd#2b4FJ^<h!mf>@gIC
%&6S,@NJf_?iM@*TMirNk[I:O'NV9L)ickt^?=6/j\#_=48_kJMMtKWI"qquMm[$!F%8f0]mo(jk&]GD'\iApI.1o`:1".)!(&"F@
%<4^F6FDY\cH/AGsPC46;`ucpAM'r044D?^iF\HL+rH2A9%"e<F3bt[].%)_YJt-3c1`O?m&R$bED?O;CHt6XiHd[T$i#)-pL5rT@
%`(7P<>d,G=0(?@[[&iqnFio8S-Oi[,1b28V4r:ebDYor&T(i6V>g$p8JK5]md2S&qc%dM\p!6RgBk-0^Ak@.P4)dmm=eI-"imoTQ
%R<.HabDAH2c+%0TEd<%`dG)"?g1OrTB28?9%:kDp=1O;qS$WLJqqh,-kH!BlL;c"@(C#7jOX>_?VA]lRdXVGVMscL@R[3aQ'.Q=2
%KfM29-r->VnM''Vfuo@*.QF1p\g0;\.I"a,rU=u_)1H_%CZsR"RdmcTB6`DVr#FW20LUZh#`b,o?H:L_rqm>!Y%p(;'%*\",WC?V
%Ud\F\;GIYNX9aGu2onscq4V;[$d'HHi+E?;>uNB.Ok_9CUTgWI,5O>Hr/8]>(*_eY9%H>\d(,c+j([O\7a"*7'n],=pmketi>P(P
%R!4kGo,,-9jX^Nbb_/TI/KKS?3fiV&0]dm,&Nmn.G:4BqS.U4],#W=;=(-^<\^!'Sm:X^hhYAtjq&Y9N5?tu9SQ:eZM'r-#4E1T:
%@-WY`2us2QcE_#4EMkHn(:o`ER8!P`d0^Or*1C9]of*Y2!K9G#VHg?r(cO-@`$Xj]XAcu=*rQP6'kSAE/p%QY2Dh<on,51%*2Z\]
%RBs?i'i,KJJs=]GBeqOs=^HkDfEbFABnnicZ?g&2fR;skFbp\1CWZge\'*e>N/=>8n!nD0=Ho'$olbs*=4Dr,U"_coPio`0&M45b
%qP&l?_.Br3Y8aiEAmKSEWY#mj!rAn;Flq3&#Z6Zmc`1j'Ja>1E.6*1S5QtVZ46Z!-XQioq'^8.m5stZs],q9RKBg6W"IIaiE=#aR
%cILH:&\7Fpi"d>*cN@,K.]jXBffl,e`0)f@(XbBCaJ4o:S2D;5j+Y&.D3/S1j#L?,@#34],h97HXgH9]en<*IPbR?d4*XNN?@b9q
%B"0'+=KVralNo0WZ?0-"S\hPS!4T%u96I=;eWD_!g$7>r*Tl&".PjG-DV=sO3GKB?4&_p4;X[%!>@Qe'bO^==1tor"aoI2@]ue92
%L-7,mSKaaWB8ZLuaMUB=fQSdoI^i"F)G,%=8l[?HVGiAk7jq@^afa*m#"2gr<c6jsH6in?TNF'e?DlK6$lsU9,.E6-&t"RZrN,bT
%8u6P^0GMnpJ]]OUf[8g5g"CEpZp%]$4-/m8Y*?gtXq(_S6BGd6Ip)cd,7/n_=k#]0dcgpZEVcgBD!4.8lO_a16DLJN&=O`/V=d^6
%c524g+a1U,,g6C1'[D_BqCX*DT$l"L_dGoL9aF@(72EPQ9l7F4c*m_6Y>b*tUOdFFUs7ng<R9j=Y/oP&.i:82]k<ie.A\sO>:Nn/
%34;-]8qFK^e]]bL<"g_mlQtl=N36s4L#eLqJsqmt(pD?.&=!g(;'YZ0J>/ck-T53kPkjsgc?$L?)F"Q7:D]fMQsU=;a<>>5Pfuf*
%oE;-fdnP`[Ii=M'/4sBU"r7CGfHj2!b>Q+X*%A0!cC%_I0NYtYS+aa2l;Y3@NBYliEh,P=d2nrX%F2X\V.@]7ku@KKAP+9F*hZNX
%%)5Q>?]6)=cWZ`Vac`nNoHCouQlEbQROPJo<.nGWh5b98E26X5]hK@n.(0eMap=/_V,#H<7T_7^Gg',U:sg_hUFK/KqkG3a"EFm6
%h6`7p-%$2+#^V=qZZ`;`JdSM$SFgB]d*khs6(MU';qc=)AdV\kq5&Y$oqlh15S+6ankfERc)#,S?g:-L-)Gq;5Jla7F$Jq3..FP-
%;4@&1e>FL%#c@0DQldhgA]b8#."tY5dSp`ZTNXCV*\8T!?elrn^QlCCOloSI^-J>MqXTP9oVaFXO@X;Sjd21qNO&J&6G66^?VIIY
%](1c9ogW#30tH0)atG-p0?'DJ?bH2slo"K!$>PXo4lk/GVMLVYrIfBGJnfd('3e'W>1;.^nLr8#AXUp`h5I`3]m!V#4)7OT[qLol
%M*e>>X3`dAGX4oW;FO)p;IHLIL7Pk6TIqsQ@U*C7@Y<K3$Xod*1n--"l7*O"JpS[d#:ag6Sj:/;!lqo?&#Se2`7-0f;.qd8@@</$
%\]U,2fPoh6Y%UDm=&U-3S&W.,5XcllA"qV'EO<Bul+<fiCG+3oF1P:cl=6cqC//OZp4EdK-CM`KYP&:8ESRK*MD/DqNH_?i;cBmK
%M<;faVA+IX19L'A8#Sj(\5"]W\6c$L9s)*(1EU%$0-cn@IFg]al8[?97$Fg1=B6JsP&XfB.SAqpUd[5>E"CA'&gC:WE*^5K(%_\r
%qQAG0hBdRj3S@`Rqm^KW:3Ynk2[),VHT]G&BRHG:1o!,I&c^g426-D%nP0P$g9WO_2UU*,a`f%6-aKd=1#PL(5Y110dqi8jYh,TW
%*u?m_md[!OTVo2l]6:$>n#0F#>Ga5<V2QDJ]OoQt!"+l-P(VI**6E1Lpc'-jOU@OJ,1QUF*bP*gP[/=X=p0Tkp1775463*nWs#/u
%jZ87^";cn_T>!uGb*]=FMDD'pUnXCD.^=@M[41NF>2QAVYTien*EAm&*;WYsZu9otdca44&-gV!Lt]mceuIO10U27NTGn*%B"*=>
%AY%2N+\Pg;A>SiY%p3T%H%`0M`[,]&5SNQ:!&^FS8$.i?b8Ns?L8#rnZ,3JTV0j-B6\3\ER8eSr>!&BZ-t6R'ES2lYD:Uroi*+[n
%Y7s<*f1$FM1j_@=\3X_T4rtr0*',cH8&GJWgW^6O+uZ-DERf'C>Gm)SG/:==h/t;GRfl6@ad-8;0r@q&=FiUFdoKCdPiB!YMc@C&
%\KHo7,U,#T*"0p<LP3$V<SqNWkLH>".50=h]S)75i7cIR!lcE&Eq2859Wu]lH4(CS;4Yce'_;XD0naPY]Z(oZ;Q0S6R7?jYH(@Pb
%*W%=WlJpJF<@>:OWuBl8SQ[n`i\J2^;Y+IWebG<n2#@k#rA'PlXcECNP.9%UBr)s9G#1knj6p'.FXgq^c4-V>g*Cc2q!XDOF]%3?
%f3i1D'oX1J;/,@alFL?\:A%b.+uETT?L/%ehe$Z!$%(*R%c>q/C^ifT+I9<81G4d&><(4;6e<`F>[B3ePd#>OQQ+/u;-i?']!erB
%4R`2s8CLiQ*Ii;oN\mHi17!/o*l4%S<L5F_C6"iL2+Xu]NU3.dOOn)Yll2=h7;>3MSqi,oJW=`HG30&bHn*?VaIVaPD.qqbdiYIB
%@/>&1[L00NZRj'ok*0?r.Bkr2HFq"HkiP4`d']Q)ja$<A5`Y/4JqMAUq1;A#<Z7<l7FuS<T.\oY_\%SDMeht5Zt[<20RZGj^&q?K
%.c7UE#3W2'),)_gTVf0X;"R)Qm4dW+e$mN\'+E]$U=Rq\Laapd*Q_8hdtf7W>sm4ues,@2h`oD1EHLfibH]"Wr!8lR_'>=&o>tQK
%h&PWu)BOr:*"+6Va5TXO$QLj9Q-7O9n6?WQCpPSFL2)DK77!Eam5PgAUj6"mPT/sSO:sbEXW^jG24_%ud-M4d$58#]$XH-OL=VUP
%]g!U63,X.ujkoiqi4Jc'"7E?=neu'Ckqg>\6W&i#3bisSp8%D=?=Q,,c0332dludrdW`m`$Tst8CIVQsUKj5Mb7/((<nFkk?/(cG
%Sp.n'`/"#T>6]pp)jGNWd<6:M8mSh!@4e<M32?5#laq7gdSQCVXsMh!UjSr!j>Q$"*OM@@?35>q\-2DLq*Eb<lWcg/G1Mo@S_n(@
%G;44;iT3&IOH.LdZ6]:iGbXNi&PQK^G%)FrUrQ\VB*1r["R2Q/*EAI9T=_PlR7$'H6W'p/*%%2;?.1Od;G,MN96j\/4m4nAM/2>/
%b*qn6ld)Qn"C1;6\J6V6GR@Y3](3*GK_!jO6-o(C\f?De$<[+K<!kP9/lia4$/.8u'$)#CmX!/^kSh#j[&,tSrVf*sMkca`?B-=S
%iEsXSn,E5-VUUNP*EQT7c[f;+)WVqGEe1,d&f;lu%a)tLl<Va+BUsLF&g967Ml`OLDQj4/:@M.Res&gQg!ICt3GY=(kh=CPo"=_[
%oc/&u@t09/T!NuB/&A<GiRjA2XJkS1=XPCJqGAJ(a_@3Meq=uU=*$:hMER@`0&:*Qqk3&P<Gj&5B(fo(Rscr5ppk3$Vot`'?L)iK
%oB:aAGq[OrO@D1ESq4kTf+"<652i/ef?G,6amIIs"!H/Q?;C;Acn>=N!eq2J_Ls(,NO6SqLNgf;0'@7%)!A?+hOdq4]:jDXO6RQ"
%YJbb6&eN%/hrrLn[K/fQ_k8Z?/Fs9PkuNa'0ieji*820fJE#L7;0LMF];<e%iF0%"hr*miMr[&!l49494It+@ENHXblWD^I>fO*U
%6SDsGUhQ)5Z_pp19?;^E*4c>MZ5g@4\4RZ(4/XTha$#kP*s//J^!P+<cs&sT)Z:e_$?N(R%=K/aapkp3<G#ZuQSf!RN7HJ&#Jl*]
%I<s-sQI[_6Br)NpknsF?4J5DEMgI%377WqI2%d;VGUAp'dUc>a/?n"V@',fO$AEq-PGa27U4E\`H4W1IQmTVD9jO#%gPg?L[;`?(
%"h,W+6"J&\0.>"4]D$SrMatX[-"r9"F"Tj55,n/MU7`o-p6j;K!$$uj3N^NS6$10`+XW+T**qX3K#Wl,puu;G5E9rE66-H#a[/qJ
%0,"P^^IT:.Qb#d/Q?7JA4OccIR6^QF,:'"+!%nr,F.D;)dcf;)!<H6sQGKe:-j)%;.013&8]e/6_MaGI]s`6_,CGd'Nc]qtY'1`,
%i;8u.4K/U?]^h2H&Aia&0i_Ib#:^XVji'!hW+c+oXUb;!7-Jn2lB-nB!H;)SgkZ6I@7VaeK>,>X+%XI/"LB1a.%iBORE;*\R#a`E
%)H8#bQ8].C5jsQMTHnZ\#P&a!Vq1S,hY/oC<ct`JUYJRrCP=6@%n!$(h(8'(3\C]$7%;3rk0D]`>'eD;Il-WU/i%1H=]K6<k2CZV
%,At$9?3E2ifEJ4K;^,.?R!fuPH!LP1689;ra=Nb5A]c.*5p+[>P2M6.9tRXhpej^S[5O[n7o@9lK!_A,QUhmKW90dA][7ar8.pIF
%G<rRt4O^Sbp_skg:HKBBRL:p:Lb`+n3Rgca+c\7>H$BG7<.-X79iJV.+nhXH"]"9Lq&\UA,&,D>Q@"[5'[omkV*Gs17!BrL(bOSG
%c&Z"r#iO9s?B&2:<MA0+D@#"iW_.P]q!G@&U:n79Y5P;-btthq("(F=RAEEqdI:.q4+pZ-ZV/FhJdq&tQR30!dH<ramLZ"$2/`]t
%VQPkcS:<U362:\2KhL$K?M'$gB-G8c+a8O_LgX(`H=>Y"6"%B,eQ6%@h..Ko45b(EPAPh?H#(5XY+Ac6>O:&F2iGD.*k^E=ni.JU
%**`\jC>49]BIaY=d!"HM45X;(kR2:qLImknj\M*SOR\QrPXEQ6,b-9Sdp'[\Y@FU&82tEISW8AU=Pt5qKS(TR+WLf$a;cXn[h0+-
%JG+"V3+TY?+".@'%4)p(;U0gC=iOiH%LS@[+*Yj._iCuD.0gk.r/#AT^3;OLc8[Q#4:F\=.,A;:D@qnA(iqnS:.7c\58"IDpr\G4
%d!&acNYgY",l=E>pV-Ipp'F3IoH^UI89k$)i"ea>JVe)W8^DF&@OY]ep#'jjNp:8^"uK.k_L>@Y``f3oh@ql$SX+Im>mOkd[Us]M
%#l36BRO*o9Hsk!Z&&>47L&m2ilaW8@Wl<NPL]P"Y<T49I+P:O+9=n?):jK\'k)P81l$>I5QL[1KahI$DZ^6sek4Qg$l^0e@[=/:A
%mnNZp@gJp5#T5b]>>u(JAsnT-(Jqe'$X6$dZS$p$$@B.$5EtCB61U>U!8T2KeQ``5Wt6;f"Wa&NW\lIm-mpMRk3XPplAg<[J4nlZ
%G,TS@ENB5*&g)o=<T1T.KW&q22Wgao#`]!R_Xps.g_JE$\kdn5<ZRJC9lhah1?dE?8i>cQ=,bUZ@YMBX=-"aX]sZF?HR-rX/r.(]
%#o(I;fcQ5Bnl&36O2M#g(]*)],W<%dq2h_k>Z[N++,L+4=ju>#Yk;'[*f1#NjO<?aFKh'W4;*qu[NC>1R_*Vb;DqI2SHt%%hN'#c
%DOB3S-\<piDGC?%-`2CYM*UH`W?\S[d6LC7#9j>CSaAgQ45k9(3l:pfiBXV\U!^U*,X[/_CU`JX2'.rGS-O3k4!"W+4tUqif6KWQ
%S[6LsSd,B#,-5]I%g,kle6gt1lK@ct0T=OM2J_.Z_jOPTo.X!f+92/d_gl2U_)#k:kQnD)M7+>%Y!QurV&3$./?BJB^6:;ir&E`2
%+mn(qI]qIYgoLoV2hi,c!#6WQ&'>+"d^A70?!mkkTH;>Gr=KGkW*I4%MZT&ZUt4m;P/3`M)_gc.NO\OMHJ`AVBGO.=>q]A8>E`b3
%#1ag-^B)[*Xu@r.S?_p9^@gr5+$BWKK&d.qq#);KJ+rrmhnApGgMd,]rR3FgIf/C'hgbOjs8:if?iHd@"U+T2%KHFK^]4:gJ,[VE
%3n-;KkWe$UFNiY@j%hmhGkZ[A_Th!t5Q1N?pHS\=s7_#_hu:bcd2r/%p[8>broO%?+8`rO^]+#apu1@P07>N\=_?$9r2\`TkF[2a
%,ONbQT:Z&Vs8Co[L,aiC&!c*;L1T@/]_h,P?iTui\*hCbgrnRg?iJ,X*/CR*?J(UX/&(lY5Q(<"C%+@bpqnaL]R0\9IXUtHcgQ<>
%ir>&pmd4-1J,d\R]_T=Vqt]''^Y670PM@^<Hg'qUrV54Gmsk>WG9=PKB&Y%"hn<q=VWHVnhhDh7$U;-4))G:RU'YcPk`CO4N&B6/
%@d=m[Ks#@`l4$i^[5Gf6ZiKWG-2;%6iotH\nP#cQke<DIV1nl-@PCg7qd=K]bpsu-Sr]Z3W<BATa.iOjJ;lW\OG=e?V$on]Wk.QZ
%=7sg/kKM;tGis^qMiW2X/*%IcBp3P=0kqt*UC)A>&FP?#6c_!b87UWW26p?iW8TK5#k%^t2Y*i/T.RZE1$#,R-PbmB!sZ`<El'5b
%28q-uKhSeUo5WDb>8/dZ">WrV(spl8Tu&+%_d""RBh6=9chRL2oAT]3efQMoE'F<C-cZ@V5<9m8jKn1,YC:`arfKupkeHo_msip_
%B=C4[*0fJQ"P"CA?sFbWiXZ0eRkun,)m?7i4e*b@9"^N]jN.B\)28>k>:W[LTOaF`+Gg[m_S1fd6,94m<?\+62KU.Y.^CCVp4^^*
%FYRKO)&G^NFX:G3ca`DL">:g/.M4Kse9Xqn%pGM-i07p'6+?B9XDYh@6on^ACk77bk.8%#-&V'VNC;9ZP<7?Gq:A?B7-G$C@,M.P
%"uiC@Mfi^&KoE$+$kR:>D[I:_L7-K;VOZTILZ1=s)7XNP).rlqljt.<lsZ1h)V7DW;&<&@Fee;Bp#O@4'q*9"RQ@aNBV7ZsB6O)E
%4ip90]RKpH$'dL2jr':NS+L-V^\!^9W/DWt)I5G'DM%^+I)f?k)SC[fp1i+188>L==;t>`?E/*D(A&E^rjo.V$&VoLNlZ1AW3a0Z
%INA3/S6=Du0L2"Q0\$!@H:,s;.L4:V/9?nYa2i7'&D(!6TdLDK2c.pkMp=L'ZJ>Wlr[)!2=)oK%EAV":pWZRGle&n#V"hhPLC+\W
%FK@I<,6s,?4E@fN"kO8$-@"HniUKDJ(c^ja7uWKnE6.hP"36ATJ)I!iq+$G`5Mm]@m3Kg=Q4RAL7/)!4_j6Mn*gBF7VG@Jb'E;!A
%(bbmkV7@:n)q"#']d6ih&Yb4.`#fDVSH^]:\.TLA]"l6g[):gPRLFTL-hm`KM^\*U@"\#Pp_^5c&9#E`FJ=T^gLLVIc<<Ss[)m&4
%L_]8mRggPSK/2K`@(`BiahjfU_u2pj3]-$Da'jjb-^_4GJ.5b@Hj$'<hPtQfkTD:&ROY>kF6s=o_\J'&57SZ?aV,PGKqG:NiHW6D
%bDHZk7b**1:@hG<@&S]%>$+s_8Og"+pf`hoJdUP]'2(`i_pG@PVc<Lh=oSK&ERgo?_&3pnSIr:WF;&//BgI+J@@_j,I#<SWEq+dm
%MJh2<%%L`T+DO2OOC=mEIaHgo7/Q*P%$@GbSuOUn%n*c;2R]6:N5.?4Y[5l8X'hAoiRap;%!,USl3V#FEfP3lG'p[8.Oko'\?[OP
%^n>HRO_5FYg@FeX#b7I=Le8(O](7O/'kiu[BO;l2Z3D3!o6;-<'g;acL;"\Y4dT:/OjY['l'[tq9Y9p96.)Ut3jF5pNT=b&T@G*U
%OM9"<*+\+!Y)RjgLUi`SMZ=5o6K36`RrlHcKM(Oi+/tG3UZ2lu\d>HF6u.BA)eO<@>@PDX]VW!298=H?2;QZA72uYCl]UY)8>imk
%renhA$4:o>MPkU0.=aYRh@S@G]d8mrdYj?.N.>:9L_g$1&ZV8i0B)oZor*"q.[6Qj[iWPMkZ]V%82!M"fBE?VN$]e_C5LB1)4F#]
%"Z_mZUmOSNI6QKh$>q9K,MS*P620Dk<;#XGBY`PB'Z;5D6Ydhl*![8JCm++FXeT@5KX]mG0MVb61IULlr%*$<43O3P>s)'J;]kYe
%"d19B;MUH;'nk4]j+B-sD6iZIh#&[&&#]lO?OBei_kaeVU[*6*XHMmFB8[;?f=T$I3Q<1t:an3h70AGOX=:t#G+0GE;L!7H_X^t+
%!LhIO8LC=?$K53?G$eUi-he$u=n9fDY0&rY<j#([W_8Do5F^T*"Je':!?&uUr$,)N'0INF0u65?&/./M$i0]FdSM=$/e;fNWtJ8a
%E)e7U$ToOH8HKFD76^a-AAeT]a[WZe?C$V!rXntIA,M.9_upUm85AZ1PU%Kc/18PqY=hLLj-O?=PYfu-jc(7+Z+N2)3SRjZENg[C
%=P>ei?$WarP02hQ)3?=Op]m>Vpg[Qs1G><RIIejG5Q!UX0kN9gD$,'&]LY[+p-O+R/jYKkj#$&/BnC>J![8fFE`-'FoLLjuQ#&^W
%p#oEFTs)W/=693cCX4fJp$%EbeW!S-?9[b@lM&Rc-[t-pIhh_XcGfb"pYJVOn@iYZ;U$9Y=<^gU7;\[XYQ_N:4rhE&Gu[7dL0L*j
%96AfY0o-=rMQ[smN*?TUqdF/+ia+Ug3'm7UZ-!puDYuheYi[H4om$RCY;Vab`o\c&d']?#ja#l^X8^+@?=]fZ?UCYk23(S$E(8@U
%\'u@m00q*uWU.5o/uWA/7=Ga1SR?!hq^RpEn$<i(RTi?Rlmb]540G`&LqO6ln0GEMcaZ4FoI_i!!$4g`S$AX(Ju_E>.ST=nf=?X=
%mAqb_423;MmUPJU_om&<CZGS"iq&5hM:^*E0Qjr2Uea\/KL?5O.PAO7&1*NX#:&15&_%@2`A=Fpoqa0,3i&Ya5&;oM9+c7sLOTdc
%OSQU2VVGSUp*\CU%?*9OjBq:QN`2?/D&Va-"uEA^(V5?=)k']sp\lHK20oK#I`CjY_eD_S!hB<!712_,LN%lSKphff<[iC$L3b[B
%m>!,LfT+o"bf\F7Ds!:\,*2F%_[7%cc\8NqgP4jTkIob;eou+Uo>AbVUaFCQGiAje@#A05"BWnjm-DW5T^$fuD)"/3qtP+4N`'hK
%CG2h=Z`+i]f;39PJdFkC"$MZtU?0g3`XSduJ'rj<"W+W4M6F?*_>G.[^:i9/7ZP((20<\Jc$8+@drVL(?m<9T+WD]H`M?U>?j,B9
%?p%i2PqK9F5/8I91&hQDQ,:d!#b==c;C<H^ggKu%6.5st:&.+Sj-m9HUg#mm>X?@FFd[%'gs%b7C#_uBcO<5FAgpJ*#,Q>,'D*kq
%6e4HC"AtLge3A+FBO\f#\[DrZ\kFbX=3H>Y)e@77.2U4bDE_/)dmC3(>,N?.g6fFc^"m(jbfkdDU"_coPio_E:M(J99@VAp\]56s
%Sd^RhOc8<d/`ImV2K!\o6_S-=n<.Q@fkAD04W]>%3]<;aPT*<RDVet-,?1_n=8S6BJ0UN[n90GP[ojNY%:'pA;kE`takrO[U\l.d
%;Iu&k:`<:U`+:[I$t<<X-q(+UQR-b9XrKoK)Dh91`@rGZaptcd;6qV`P4^-F2Hi_!_$u]Vf+@eIoZtutHQ@2O:D`Q.$n?&7l"/:5
%EZRWu"f`gROn'8%J6^SnMaBoT,q018P%ArsR.sFCQ4$kI13QU&OR!`5lTHGpLr%1%Lh0Fo#IF%Kb2XWM!<oZ(NJVN.MH4e98G^69
%,MEeEe5=/CY[4V13$VO77tn&tYP'^a.;>@6JAu<Fktr@#m&7NF>%WsAb-_Ag7hZCHRO<s'glpHY?ig<iHc<%ZT*,MEJ1-5XkiAU.
%>HJ5OX!2@b%[3im.$CQ3a"*)3"K7JRqWt.^.>=QJ]#HUY2,XCC'G@jPMfVn4Kk$&\hOU(J9QM(%lQ\qQ-E6-q`=6NNcQ&_`2i]$r
%dI+E#gn8nfW=g-tEd^E"\jt=`jge(;l57-,g@Pe;6JUk]]hI:1r]5V2BCe0@o1o,fOjd"t!1@U^k%-m2kHC)\gA.lbqpAG%#(Fk+
%?i)@s+=UAeiZN"9p\iU7J/_e<gSpm)4ktpI5mk?uj-cm@F<8_$7s!R:&dPcuL?"+V2&PJ7CaUQ#EqQOon>Oo7&*F+UL3'EmGo<9>
%[I3'u>0m[HI+IVni!AC_3%\fB>YVca%L`43iHSCtG.leZ$9EorFs@KcEtZ-*3%7CHjltGn8ja8YH4gH6#FUV8K[JfTGYV)VUSa5;
%5cf45a(*QF0f0l1$2S^W)Y\\O:q31\iurt+86a,X8.]<L0"?0p\Fn)<V<s(,XlOJW?9]nM(1#h=K9oO1;'*B?[Vt6CbGkA.*k[lS
%O7M5j'Rh8<?;0AaH#SJ[DreaXl24!n]U7,c"N&>rr?)ZS;#A?OZ8GmN;O4O,VJ_+R3m9bJlH%]&=p-!\0dWWh5#aZT8aqH9ZU)`D
%A>pY`VN'Xn)Cr.0&T&1ABc/PTPM2\L1g72]7LO^2J28dG;;%_3`hLBT"YK;].D6Ed6D?ndp@t#Ih\'p90bS!'58>b7cm7_UU53%(
%1l(@KL$g/&"p&`RAX.jWE"Y9#OqE6[nJ7+=KWOg]1'Zm/JLObPU'4SC_tbp`<79j`77#:]p]UaqZ/#L4&h?!,R&>8Bo/Wj^jd`i7
%$9j/YTXC.]#c3TN'`_`*5R&#crFT?L)(NH\@r!f&_H0%+:X]ZSjAClO$Ee-SR+RsA:YlZ,1QI6;KOkI`=%S=r5<rJ$rXn_LUt"]5
%VPq%!@XS.U,,8ChKZnOiX+[A9^J8MkT&qs`G>.&9#(f&$<nKXgOsHL>'O,E".>f]@8$#m(e00hGK*E6>jf!.(Am-7<CLh!nfG9mZ
%'Pq%=EV^%M>pY"24^L9,_<uogX'Ij.TG;=0eZQ26>ubje.egs=--IdY#[/I.i30IT:Cbg_)N%23<ijt3^8ZC"7^)rjc)W"pG-BF<
%I@/k6'JbiWBO`7)PnJgL:BKR&.`3&*d!B$lf$].NNJ]ou%D"MJ:D]^c,_9Oa2=E+$A"Vd$<ilb\dApEPg53Ar/W?Bp8dJUfL9AQK
%VJ[`'#E;GR>`dT?*3A-'']i5RF-X.$bYh)RWgL/L.D+%rQ)T;m"9mQoH)dBI6*Ysr[)KV_P]Rf`A5Fl&R`HPZY_eh!db0'#qJ\f)
%Yc#;;B76IC1IJTQERkG-9dXP<4XL%8^=8FM&sLdjYIP>g?4_\:g71%l164tgA2PEJFG*s3T^9%cCl1MQVaYccb+>c97C#I,3QK.G
%((i5s_[6Dqq-&#`F-]m"^!KF_LTX.@-ipeKD9.9hV@aVW_#li'ES)a5@UXS[/eYk,hrm3OVe#JR3q_aS8m5DYWe_PPI)_eD>%_07
%5tI?QJU5;<ncKVQf/\FhB!1_.:2lUOW6i6'(HB5US3]Bt<Sh+=pF:A`Oa3?ZnG,R6KO.-Oo*A+\!12X8O73HNn,TB5gZ3K`EDemX
%DHqg*QS#6?,LCZiL9GVo"'+,.76*os_pD#1P38"m+P9QC@gC2I"u7p?0WJG_`oc0Z`o883hP!pO/IU_ZroH>!]D!YsW]7adH/ba8
%m=_8(WBiBqJ]+3^ifpfM#Rh*kB/Oc9d:rof3&-;@6&dPs0042_4puTh;\$d%A>j4_B5UH1%o/iO*Br)6q9lS?['9rg/J3h3<p*d]
%[o>7:m4tc:Ief1r7R^/rF/D]\Rau@j&rPt11qbT!PMs.pQ>#l(+c_bo<,'dCPM'*Q=3M.#d;@7(lhb:+LM!ErU?@g8r>=$ngmXqc
%MiY8S44_N\,Cemuio-)o(``kq%fhPnjJrbN5eN#F^Q:IdI44)dC^!8LTj>.I(a&6OG&hN*.(;?P,&Gf:&]c^+4)e12m$22D!/)M1
%pAh;S/]$;k']^MfBb3\JeI/So/b&kYNKm]US?l>e>?,RSa#s[cc8sR=/OMGVr<^>@!h[<M1EXrI(R5jt0n]mhip,"Cs.@]pHGC`A
%">jH(Z*$E%;0ts6@*"5g:`/7A"rh65rL?_:+d3)G;rN$:=NIM?2'c=U[hi0%6LjVgB!LD0BW>gQ+P6BF@*XqnS#!@r\?\C>K=P.&
%\3reE(D3^!J_27YKGJJ<-PZHnIE[e,:"Y!^lj&QN%^'LpUI!X3?j0G"1c9lcJ29gb^,9m%3Wi)fEgK5IO2;aW$=V+%_ucuRcC.m/
%8\e<+$Am?gRoE?7(Q3ilS51M;Fld<q`F3d*A%`W.?N$"$C-cuW>:9=",XbRDp**#-p;f>%</&PJ4R^Ol"_poiUCg:$hk2?(`V8j7
%Fbb"Fea',S<q6t[],jg1!Y/H`.^(O?YeWr%W.%09/*G[700C]B+KdKjE?s/0-g4d*[01Y8B-uWr/HSBr/KP.QI&IrrnCUB]V(eWn
%^j<%u_QYYG2,%6cYXeR!Jr?jR(i.c14X1VkhE&GSFVZZ9h">@qnRpQ*CV"gTbq++a^^4[>;&NBuA5qp?5bpH:Bf6!siLaOi.+286
%*EjiR7$<+6k<KlJj@d=Pi=pq`5GBM7lj&)qBGY'`L0tEQ_3oUaL+JEd%TnkS8D%n6-_$0@9mQl`4<nH7KdAW_'>Tk@E%Lmgg1+cP
%h$UWaGA;0gSP>m\)`NLop*;M*J.oSQEqYkDX#$P$e]h3MRtueN^)N#2N3T=7ZYaoinPGE$6l`D>HACt>0T_DUn5bM]J\=AUB"#V8
%L:uon@u2#HTV*fcN<H7a1m%">j&7f3orTu;[_iqi>e?M<X9;iDL))i=.EJWb/3jq46tk8TNeQpnCIrP3co3^/R0HCO36A(rhl?>F
%%7E]t\!KlBlT:,`BB!>=@[K#j=r>n$IucKe!r-Kqe0(GF/kpB/cl7Q-iH#<qHkn[g>>":T/oU$>2u+-Kc+#VWiNA15RR(sKR_1(<
%b5'GVCm"hAc5SY(#aiPiJ5i<>OBNB<S[4?eU<l$7JJcYPM_nd*Q0-P.V"o1hk0p.%pbA6++/aD5al6GNX*8Zkn1gL#^.K/i;^DfM
%--MoH-'KH=3'D6lFpKM9f)r+De[S_b6]I#N)]S84Ug!CRLh12l'Z>um)M;O=jWMP4?V5&m.O[:^V_0M/$!>@d*60g?$E_Do3t#rL
%4G;_rX265^*oL_.A2ahWhTLa+\<M:S1sCh,.)?Y^KLJP09$J9/'6B]&k"^9I3(/BiGgFQ9_I*QVeu#UX63Ff>HrGF5,tI3ber1k!
%WtPS(7ILG\/Vk]c4Am565mb1)$a@OP]V6*\P9i6HeX.!6Qc=22WB,6_q52F?Fa#<Uls*Bh/uDeI!`_>3JS951);ISdh6:iSr'hrW
%F6/+pr%VW$jAYD4PZ06:Zl^".aolIkV7&u:#c=^8m#/4#F+Fe;[k.9qg.<t4mD1X3JSV]W/a03tZkbuFe=^4Q@h;O0R[[GV5VC9)
%-R=Tq=m")s\d[sHH9ktqK(-k*pgnoZSF&44fW._2);FSp%?mck!2MWJKj?7j,F0=n>RopWPt,os'9>pTjZ&qV["dU0(e%K#cl_Ul
%j3tY<'8C-i'7AP>]V^E!?;^7f?iaP@;E'W3$3T-([Ibu!#W+&oB:qpgm5?7.61rYL5nrK;DnSMI("(gMQ2#th=2Z<,%\6JYk<o5o
%,sSM%%SAEJ$Y4uo#l!Qa,unWEPM6$(2q$XJ4=bFe-rC(h$dLYk'FIYL*DF@.?;`)[")^HQlX<tbH7Wf`(c9E!3@!Xn&OXnt/Ta'r
%'Cn?5YV$1]b4GZT5h#"+&;^T+I%O5,D]*t6]H5Oh>$?<Xa[nqe0[Z6qZFmc=hO[(i>9V=!5i#hKf9W+-E18iN;PFt=M:o<@oZGro
%;4"UC(cLQ_&-.(khQu0#eN<"<\0QAr5oVu+S7F`lP8ubn18C:[n)FaR"n@V(oU)ojD[!5p-:9TP+2A;2+bNHSn'n3(!!d$aFM6h&
%7-+hn\6HJE=J^XhMX'S'*e+W$L)F:A>E4u2$QG;K3n:+OCCQY9&48U9OqthAIFbJ\M0K9#8:JRTJ]W2$(UY_Slcd,_ic>l1!?!(D
%2b4^onM<("-9+fXji$S;n",2",3Y0C8RT/"HQ8AojV=bAAS@bK9<82*0Kn[)q]d'WNBZ0%;W4&*r)^E]L]m9TfjXN["9]KaW`(_?
%\LL,7P*&MrkEO(CVhqW/,&o_!=_Us:O0bcClrljR`<Qu4p%FVG(Y7bY7n5r:*N#PgXKJiDFbF"4/F!PPc<<3D,KrTcE1O]?m`uD!
%(p0HQS].NhlT16W'jPB-\q97,7MD/mZPk.Nlc_goaCTOicX19DlH6ZWEn&odQ0HZAo=9++q2<8;F:1kAR)92qMaT'I\io#pqEZ^%
%Z."#d:iG"QU`o4ON9b'DC8:DX0Z0..mIg_<,<Os%S7^*Z0tMZWhCR#=]TB"Y!LEu>OgeqhY9]&9A=T,Y:cY44`((R&9:c^s[#\h.
%<$'@TAH_<n$U_7h;C*9R&:N3)5i8(.k]m!.;,84!nK@SO"Ab@_2]oW,_%K'*1eCuQk:pJV,kdR(O;H@cigR3-i?S&J2a+TuUe(_)
%qh4:.8\O:]!agpqg4f4_/@PpSoYb,JE!n.B@]O62,[Wf]>j4\lcAI$9Toif;'YPg\-#uIpYM8)tVZ&k-*Bq7tp[ReIMi./=pt&s`
%QbNM&]c[%S'WK^!K'EKj^VbKD]`$9+c5I7$cV$dZX\W\CMr#('_</nIG-amagep0("4P1f1_7*LDD8ijQW-JKP#6@a\es(7;kFIm
%Pluq.)"71G\/<#_H3n1&>go\qXcqMVDV)P8><7!1et\XB&jg`QIKgRZP$NZ\E_7T-]t1]EcYS_nVS!GQ6_/'4@@/%H1)<o1*`U4:
%:5UseZ0JoY#SV`e1#O!.j'Vj#MX"*913j^koV.B6lpR4+:3YN9NY[#XJl"9HZ"e+*W\'KAFnp14b*&>F02jpMI45ObmH:fKNaH.^
%$;\tpY63u;!B]iW^"$aMg40U05oc2Y88T?"QHe</T&fK\ClbVW`n:3h4Rq8\//7HX%t3HMPP\;KLX3K"hu3ACFr"*(qmrhodJBGt
%;sSctU\,.DQd4:VP^q2fD^RNDOqVl--HBjB\";$$l*qStTTip.=@PAP035^)"t%^.P*<\.\3<k(9>.Nt(QE!QktdH2Y?%I@r0VHE
%30tAGR>ap3oeahlN1_,I_oAQ!FFCAaEZoqW)H;!7O>m1X<A=V`Z3UZ&Z7Bo!S4+2nK$XpfY\t6rfM.kZ!BoaC,P\5-!+!GX!E6EA
%[rb!);,r[r4Z7$Y^Y3o>?rr[=_"_lNW"rdL5_Q\R"<i:YGkId;`F*!-$H*X^W^3%eo5M/B.NIg+9t^TCQ:b/CkCh`adIH@WC1;D7
%YLg)O#LFQqIfc2!l:94rhlEA8lOmM'&78HMHUJ%<#knqM\OmUV&(A-f<$iu'keC,:/Bo,L.9]r4hZO^rUh))U&cS!YR%/_Rh9d8J
%E2V_:Gu(+`[WC_7"K6WHEP7k'Y:@1O8_@)NRPbh+0ZD1+V5Mdk50CQn(8&IA.op9p1-TtSEVagiifIkT?!Y5LZ'K;;bYCP+C\eib
%'uG]6>V$(/WfKI%>Y(q^Z&j901q4gj)",/=@<&Q1r*a(fEuT6I:+8#(&:Q-)`BnH;_r@NQ4dEj^?19+GT70_G;G>VU&U=^OPVW!G
%jdbl2fd4^t<AMLJ<2VGqXG(0@DPlQQ.[.g=+Ro_?K2*C]ptP[er/ES>]:0pY]XJ>uij=jF1]?\U1;kD:7,Oc1A9SHhmEWNhjUbLK
%$MuX.%>.YBn5B*QX!nct9E.^P$7'Km*u*MH[0/$maK/Be$$3UTr)'lm6*XS/SlXm1gCTD[fM6PNpLc`J?k%:/ERcourC!lf%"R0(
%1!+srb).3uQcT#J9jYLcBT!`VPlPD$4aJ.d"@lQJ96t%o3amiPHD@&qp5BZhp@?.MW_=6ID.+Nt#qL.EqJp`#Auuh/+D(km]k'!Y
%cdtRkg*,sY#90\_Au+U6>A/'raj:of86@h#6+`+VdF=>5%ZKjmQkq7s*&c2``5M1)(-<Xi+oIp@C<fAB%7Uhj7[boDU,!2.*m_%/
%p'bVkC+(/,=TfM&nG9%CP)]j!F6PT^^*c4JrD?(rVSkG.rU`]`l'2kdV.q\P$q]?Ia"A`'3rAUc7Lse;-mWdJ!@GfnTTeIM!39P>
%rt)"Eo^+LOM]o&khd/t&-kc!]:0I1G5\\'c?F(8=B([s*fVq(]8.ZDB5"n$(^"Ib<;j+9Z.C#JI<6WW,Z>t#1Z^4A5,?RBdiF'0-
%)fGp2Ed\"j=:Q@3>BGbJ,+9O4V-Lfdi`riQ/:42^lSNNUj4H8<3dCq`O=)=NiYj?Wp0h&6"4R*+3/u6R>tHX/2b`I3T2e]a`&^f]
%TN?@E9l6r0=rSbK&!<6Z[f&o&?!V)e*7q!oo%P%ia/U6<,G%G!&On-F`C]jp]mY<8eNmHJlkDf$74ZZ@&Eh'=*WSi/B3\i?n1J.p
%U8AgA86E**34MjZ#9m]f8Ym*!GIXI\QG^'O]:c?!IbN1Heii8AM`B+&Ve;[f>!q6WL_uKT,9Fhm]Y_='Gt)rUA.8%d;9\j\-iL](
%g#km<9'Aegg-_/cAi%'=.dW_n]o/7Q=\T,D\u>XB[doXsSA^.F[.kc@)Iu-FB!3=`'h)[</0Uc39H8?J!M`[!Z9BQ\Zgp_HqQlX%
%R-@R_*cG?381A2B1=Jl(s.UA&C9e6u<*&b1E_urpouYuV[PoS5'+68K7))%kK*jK.7@F=Cns#!ZI9g1?<I?hcUEs_WRXd=d=.Y_:
%n#Be=rm7]5\?R\'G?rH\/Ie,*e?Ut)#lTnQ789lZj1=QqGm^''WTP1].&u05:pin2[&6Gt5OQl@oVr_G6jbuZU:F$:@/-c@<MP"6
%VcB;4iT6dMMhi*BPPLCOA2PBXLGkha&=8hL>S5EZ8%h*$S2FrGq`DYp9saK?UB=MjF@s8GnU\C:TF+mU8WukIMc3cdXK!J,U=>#O
%jq3ssk8!YQYBj0K<SuYc`IB4IlCO&0h/b4$8>!;QU!'<\GB)"FlZF@,qPE)JC0,Dcc*r"B';c3pC,YIg+XtC;r"tr<oI9!P,0I#.
%amCri)_kDoTe6VRGb]0-)Nq6ZASFpUd5tPS%oHNp+kU$KTf5p:E6Q"og%^rs;ds/dP!\A9maZN0Gj$MlqF>"o8fb'*[G)?NqRl[H
%bHBujYYgCdRC=HXgtdtK"mTJ%<l/GR%;fd32^1"`Yb&,S.$D#p<<P"\N2N[Mh>dpS0R]^t22MDBi#G]o(%:eb&2dV'/)*?"7^B4M
%"B<B(n7ceii"GEN=As7^P0!bBY(B,G/X3dmYA1@YF(fK\58\6sdG*8A&5o-j7l`"jZt8!;Fdcq1RVaGGWHbc>@58g,+eOH6k46pl
%>+IC]m#8?IHF:%VLaoUZ^Q>4nI=-o!9[CbTYZe`3$5fqY/[Q8D,_3<U3JB;4ojB,sY4V1G.IN2_es3PS.-Y\WYY"q)d$XehLF2&X
%'&1`8Z^hmHGPe-b`OX]Jd8,OO3ePC:P[I9D`)Wpe-<l@haN@ncPY_OL;R33S8)Z)`\q+J60W=H^-C'O,`%UeLk"rb=\e5`$1&#g?
%CrY8@,b^8[7u!bi3nB`2Qo]JFkbtYA]EoJjfNb&i889*cP-tZ6EhVh@'VjIRO^-6bq8.+3ZZKbEH&$"hXIFt'RHJ<,\-n'bcH\],
%9Tnr2?rYp#:e`;hOqIog.`'Qo`D?ms9OuH0*_((Y9pO:f3Cgjt4*'ITT9hooY';3&e[VQ`LWYO=Fc*6'1@6[Yk$']K#.CeY3h**r
%X`V7PPc4jFn_KCOp0d`,/rOjEC`:)LR0Mrgl@Ds)TL?+j'3=tL4&(^98g-X94p$oR`/LK/B2b,@p=<]EMb7_HF5;R/ZWT[rSWcHY
%/Df%h,=3S66K6l+XI<-[1O=UHkM"pd.art0d#E5fQFbd4;#&#.DQo89G\=!JZk@!Qk#%*3q9"^S/8np*W1)*7$n3H?!\\:#JDBPK
%O<dGP<GS%$G1u_';dNe+SherqpBDS[?#6i94[dhs@T+To>+o1s[b4@6kuSPtY-;mrl6Zji/ubOhc/P3u`ETBC*D8!iHbB5bN3hi\
%UlSt?c<ru:$0L`*S0<+c[80p7_l[%S0mrXretUZ7[KOuS'eHaVbUIsB2]T:ZE@knnf]I<G'Xh)_Bl'Z$anifRS%bdkh2b5Tl->3S
%?uU_'X`70/SXd#G],##C4A:1C=I0/<!^GN)-(Fh0NmspqP*Bl[e\e:sSAQ[qprJY9[Rn8@qJ`##d@\-h4Q&C%Va#PI#NXf5GT\AY
%KF;O/U$I)&HV%N*KGMd\R29TdpiUJQou4*)6`i"bPp:$_^aJZj3VHC]U6bbhc5/LW,Fm/]7U>/9R\t+q4'K)67K07M0%W*/-b.GH
%X\mkB/id(^Vsqe]Ss<[a]BJM%C0uV?V;p7]9Gd@XcO-FJXe?nJ,FTPl]j]kW)lUWu@WdhPi'I>[AX6G/)Vs/pC@dq=P2TCSO;X4d
%?tMN^]HD&Y,PiItMPE!($-Vr%QM&VTk)tjIdRg&;VL&mQ\0N1!<]Ks.$"cSkoW5K[L^VSZ2qcZ/af@HPCOtJ!1tq%ugq3Vi(+rl_
%Hnbs57(liNPW^:NQ7_XPZal/[S&u-hlS-0FbrnW+=G2VlXp/Jf]+U/RK8a:\#n$tXX,?JFS<C=r8kIlmn7*PHh>:_YpWLY8qm>[E
%CEHWSj7Ua!<S/sS?nUC.-e;t_b9,F.PV.GtD'sQ+6Q\qSV6-MI"jr"O@+%IM$eH]s@\@V?aR-e[D1&EQDG]$?=lZ#L1m),\\Q[;L
%[Pr/jbVPkXQhj[7[8-$SJ?pp+%7\3(70o@Bp7X2%QK*o;V!jV)2e[/PTl9PM^[I5e<gZ"_<]PpV2Q9WH2h!qh^Ch8P?jN86T6F<>
%1a&+#%E9fn#Jt5=nkoK7WVZl5Ici#/j"M2(\t"dZ/f<LEUu01B'g<JG&(cJ'dSLGB<gZ"`QFVaQmAqaTpAGtW:kXpX,TnPeOqBTk
%Q8DCS1/m$094B-'a::pYK,K8uQNORK%Z/@YKDUl@VJira(Ke2d2Ii!>%>U9#lq,fHleI8uD<d(XSY&dOOa&Pfe%^)4Dgls,0uO2*
%*(3!i^es1aNuUWKA`Lc$+QgD4lTVnYHd:J@+ns`-O>A8r!Pb.kEJ!N39Y];(I\n]+Y&^o4C$[@QcFE^!J_cLn2a=r[)CX=Bb6+<n
%Z:*%[>a>]B'A6H7h8e-RKQ]!kq;[n>a<F&'_f&B7\<ItFKX$'66Pd=hj2<@=N[b<T9kb#'1shFU@)WO]fbt]hU+@FVDM%#/9h/2;
%>!5H]esqgRJ"9i"m*udCUqm2>aDL.pigTGNmAJL7'i@JC;PC[H^qB_J/&\Xk)OH;8^3cd`)'gcuT(=EZ1tO<,`#<mE-m>5rmJq2*
%J/*`f[3KE$-FbX*>(%J2EGm$c>#S2K&\AG+@+5qF[j_mo)%00L)g2s.V@6Vk2K\>-9mPUmrCcrl*$'L<JgF.5]T+@&jOZ,_G(Jth
%]"-Gda"sEpPBmqPjLE!212/"_`XD4E\TC6H_M"N-=3]jE:pe2/n]6.$%<`l7"We)Z9+_8q&uRU$#J,V"KfrSgTpP4&LMe'";kEa_
%oR-[R'VDI(5#FR@Nt4`7)T@Q("<F9W?f0i2&@OuAb8X,U$KGt5a.XR>7QjL,@J9CBF[d7Y80NY7ap&6^6l!qT)pF>E/p%QYp,T$5
%msS]'Qd)P.^=>RPPb]dX)fM9:f"_XP)3o#a;+"S(PqFeM5k@3<iiN6h?V2qlO-,]q!A9Yf-mS<Y$I*PS[FEA;TFa]!/E:8Xlj)1l
%3rkE04&a0FE'c-\5"O<@![TkPUJ#!!'`p/!42>NUkdC7H-lW8:ner.]Cbrq#["atWZpVW$p8I":FTBMeU:1V7eq0<GZE*P<6B%M(
%=`]15#HpnN?_AUl,16CEQ3MG<+CMCoDHO!hd\a]Y^nI_[R&,d"C;,8h0nc2WBQ$)gs52\BXBLo8g!(K4+7:C$"^1Wt0pHRb5`d)t
%Uk0Kg8T[i^W2LJ3WYYGXq-(4CmrRqX&TP#C#cVMf+c-Idg\8T-k2p:!Q@8U!k`[Xt2.g'Tc\HR05O?]/GLu9.'7"BfB8YKP]5pF?
%g?mQ;J*m5_OhZ'h`dB?Do\KoGaR/k1$7VU-AoQ_KH5?\cY8AY49qYmn:91aG'.At/FVO&LoHm7^>Ll/@O,'@XkrhLd!-ZbekV3/0
%OXmT<+9>pPTcNF?,6UOhY@9"ZKHQHDjCO,I4LAlJ]T*'t0_($Yc9h_-qkkp*\j?O5SWAAnB7Kuu@`r1E!sE"Q?kV<jJ7*o[VAorc
%_ZNSqF@'et#B2Gen`eH"I5;@TNp`r-d/1lX<?UM],Q'#$o^4G_'aK'b.)-/o]mlPZKnA/Gd]Yu'miUk^-M+l!4/oaZ>4e't/>XJ<
%"\PnKP&Z$[+QCX3-4]-ViY+a-IZA\2Ak,)/&I*YSM,MZ1/3u+s>LjTA2:bR+8;)jqZ!=k\6#.W,f!*%W@U=EceP`L/jb/iAf2Z=G
%cC7H=Jg^6cbq5'!`k9E[:M3ErCbK,%Oh`E[pn7L[J%Vp*G*.f*gR[ESHFoY'/b_>a(mQUWojV+-9sWQmLQF0H"H]6*Z;bS!a0[<a
%-<4/+a&sXlG<1T6qNHFKaD@j:)0)`d+nR&5V/mnHA'u3%-/U0H<0"=]#gE%,"t4l?:0rcCSk>?Sl6^0c<IL3&Z)0Z1":+:;<jkWo
%l2lS?l^b+s$VC'7X7-%R0aWBO>.u<N;<:",BBQ,Gm:jkj$[jU/fm[iI<jpc?hnnEdX1L7*Ds'#N:BB?S;.h/"aZ+)b9_>Ne$Sa2P
%)5&fIj9J5!/QE</?9j<]+'-PP=bu@%9Pl[@a2/@NVYWPu^+n.^;%t.]as*;"d=Pg@5X"*m/7.<a3d174A,1.tfeM</21ZeJ=Wh*&
%=]0U!6e2[!OQ]RD.u5)7pL!peUCqb#f_6`eUQ1X0hX>3q2RbbPfY7=P(:nIs_nUZKG[GsXcgK)CIe;;9HaZlLF'F4#Jhf%%QCbsU
%.*Q1XGtajiflWmMKGV`Q<sB4fBUgY]aNC(EL?Pc`9!pcpP7?XhSHM@H^c1VF=A[%1ZIg<7V`'Gi$rf<^rJ;dkJ7ED9:D$g8'9+T3
%\QH2jMl'p]e[mL7p?YQDlBOLVY"'Ka:70k?k1m]!fmL%Th<bndgE$:dg&8Ya^7X5+&6#.)a@:CM"]Xkt%=5ZmW'P-0-%oh-6NSff
%7Eop/$rY2lmI>e8/P+j%[F7DW%i8btd,;r>C*Q3ON,i>fP+,'!ENr]_9^T7USfkQUcoBZ,%PlPKHIh)sXf4<Zg*pgTD]-0LH]aQL
%7,b)5J?$`=5:@?XfH:]Q\'>iQ#6NddZT3lj[[rQ^42>/97DVAOd@-!EG+P<IFo(^i"72f!i=B"E7s==g!3u?b+juP-*[Ikdm9ro=
%D@b7!R=F7V\q!3RYs&hSE?+64'7<hY=CbSn]F<2d7R39`oN,;/H9_b_&s/'W`d2dD]SYPU!E3L,b0"<Zd#)L1c/N?,JYsGVBUjDd
%*&4=^..4,1'Y?L53>.WI&QRs+ZIEb!3DDti-r-*.$.8s:)6/u<q%j5;)gk7=$E(,4dPPs(6"Gj9<&njJEICAb10"G.`U4uk4^,]`
%`QA>g%fjcVoA)c4Jb!-W@aIKkbP67,1O7RYmT8rPpY=9c\XIa+DUcC>>^eN@8p/f/?]R9dNj,$=qdZ^4S*a(=4hEr(3YUnA[-ZBB
%Z2PXcq)@H0/fE5XJ.c%h`"41&k\,[kf,k;;URsa7]3$]F%2LijM:SE6=GSKI']LTK2Xk$A`[ua0?OH.DIOR8n+DrFf*+8[ZOO6%^
%XMZkt17$+)\eVH3enO-lZZB<61*!UVK8S3g?53eWo/<Y1]*cJ-`24O=;GGa.oTMl*>RVJ9EB_'03^m2tgSag-3)#MF.oL'9j%g*X
%Vr8qY6+^k)<58R!QZS=$!2;K+elRd"`ZZ:.qm5;DWR8a"\:V;;%&U6aR,(3:>R^,M;#R13cC&hSB6.#`mg?Pu8mF_/NL_hD/Ds_W
%MtD<n+p,`rCTQYc[7D$RgZW'G!.J+\7BguqZUSlXMVG5]]rkTiU.Ejucu"d8+t9#<R$bAF;TA?#`/mY,>7o^F2g`@eMp;A)`)CRQ
%ll$&2,2!PsQ@YE[`)$*dXS_N=8.b)i;qtOlF>YbJ%9^->Mf].^q3onUQ&;*QFOI;?VK$hnYKA9s7OZGW9->Oc2e!hnr+T35Y*h7R
%*?-8=F9W..%d#5G/<s39&O`,98HaT!$UM$TXgA5r,$e>f]$\&/,tl)'B2KGC=qhRm![Q7rBPc$9#r8[/5tc0(:!K";4SKp@b!P8A
%VNKDW5Y\%f*dJH$Tls)N@\f5#@UdTGbt!Y4TmI+A-j\s4QE4P4>5O6Rj-M;2-cAS-Q>Q5^"m^Z(1cG5/E"1J^JRF@r7f^m3#kVJ'
%_B8nAjrqkeOei0gLidf)9:U?o3#!u<`*s,O/r\[+T/%oLdU.bJO4>h(KHXHtW!5XQUY*p<g^dh^po)>pM/=;m!)?qI#KA[!PXRBU
%)s/89ksG@@mL4-@g+8nkb/b@r=^k%"K_h2#COqFgTUO(5b=4`4LFLp0I"bs?ZBbOA1fh0E1_%%tK$L27i\`m2D]cN[=#8);(mS-?
%Y"j[1VMQbc>fi*ueR@Hj\rMQUgFe"K*t1J)p/<_LZ4'CI=EFj'SaM0%=H)U:[49a\li*sig:&N$:T)d&/?`s\Q'R7ANnoSm&ofe0
%;g1WK0dZp4P3"nQ#:U0M!hk@+AoSOS#k9Ql3MNN#=D!$!q-o=b3i;Eif:+),1.@B1XK!nT`d*fY8ug#(6-=hC<\Tsj%`U)QP#gLt
%rMbliP$)9$IK2()5ZWmPM?u#MdS6eui$cfA8g'9gRutVrC-W.@,B5cparj2$8[jY[*/-G13$@a50KfZiN"9jH>4!6Ub/Qd'99A^4
%T\X-9&mJu`Y+j&/;:5M2lHu)X,6p#U[?Uh&:\P:GjtUqCp0388."9[BVRVX5.-Y+L.iH,2#F5t=X3kJD\>F_qY*1)c%8#=H\.aqH
%A\rOhq@p2s0lBRN'3u1n?AhIUr#fcL<t=i^jEs'0167H+0Y=`ok0XPfA&fUF\/o*qcMfBDP;$Z_p9tZ.)'j/u+!8(XR1[o2VY?:,
%pbHOl/YB\dV3/=R_3`h[cb_)EXkR;%KD^Cu+jX=_d6\eVF3*bR%a5W)32^Aa.110"[\-oV;iU)NmPQ'S@:bQC(b7\EK2@MO7KLor
%bd-`4PSk.;h82g^pL(iYN+/GO19_g/39L$+SX*@t(Dp\gf'8-LV8Wr9e5jTm+KijLD'](W?L+-QOH!ch0[+WK)^fh,,R:2?A*]p:
%l=N3,ZEC?2a,OdqCaDbkrDg&HKLs=$.+R^2Y,t9gcY;1;",hf3UYG:A:(,'F&YK'=h`&kk2i-X*!i,g>UD26aNU-^o-FfrO/CA4a
%X&NNHfj20'3LGsU"+4_]"jSbZ)?Y/CJZ!2V&+@F&jI.rFmSD'@H@@S?#WXNdC$%sja5O)T-VAM![leT!#dNPFP`sBDnX)DGC7kmm
%^atu-(k%QjVCuA@AkW%JdP=4[j/)<h&0spqfb,a_[jA9@pScVAZRnY.kF2l,dohQBBEK-[SbsamAe_!cc-ui/186VkQp\sL@;>mC
%HG,rN-j<\s#'N:=$kLjA$s?GQ%3\\V=6H8^!71/sXMI4L>f)<2=X<8$(:(@j0Utdk&$%*mgJ?B10G508\/0ed$M6"h(+l'=I)r`t
%FR3JBa'1@%5/<D^h.LR\`tm@^@?43,-dp>bV?J[iB/'-4W5;F-doLZ?q+*_ocKNi0&k0%HP"gj=]Q'`W1F@#q9n@KSg-&XV9fmi'
%<[*h/5l>*6RL^tG6q_'8YL>Zh'K!Wca_Z^'e[j9[.qB\"P>laFeH!Km=V)^dG4K2'MR%7QN/)3e8*&1\bacoek?=>!iL6=9.?^\d
%flRaW].")[2nKb;T5,7`\RsD6r16[1!sG?g'0&:2e(i-goF)ShUYR&8o0WKb:6c5mU8nr:6N*MAkiZ+Rp6OSlOI29Pm0oo'3r/<L
%/`GBO4<XkE*9(D<Af.r<EU2aFq3X*J_)a'QhK.e`*\p2a+WH:0P[(spSr5FqcnhuiS%KQ1jm\bb_:.I+BIKY`I&WZ"@)6id"TF;O
%G2[idkZC&3Q"Xfki?Z%6g1iq-F`Nq9/d9n9XEn;F1tNUg*7W*4F[*J,nAp]1N(+IT=j(u%L@<O8XZ1PpSL+m4;&iG;e9Neg[1Cj,
%o^cVZ^*^qT6J9TNO21kMP*0e$2,6H-V9N48(@%VOWoQDbRd75SS33G,CU4^oO>f!KbVc`D=VK:\k;`8ZXoXj!j$@#7<bPf\^;,lJ
%,XU"G%9(jf@/!oiXUROuJ]S?$7W7M]6,YT*;d:]5U#kp(A:lR)&m:[JX4O=OgWks+WuOSRHESp.T$9b5E@"I7;C/Xif3(=<WL>Z7
%9ih3$$\N_No5u[I2osW(X"BNL12bqq4-h:rj!cWWYg"3C;(DS73g=sD@aoVJK9.pR=NMX!39%0#"7]c@nbC,U/TMe%6f_Gfeu3JT
%O$nrXh=hQ+^P#nE3Z#aaX7+_$q/eVH>3fX'D1h$S\/>E]j-J)/rO(<R3l,sK)<O'Jg%/3i.S$d=P+`Tr=G,Z):pr32fcP0Qjs8+q
%g#p-c>2<0&A/^%.'BcT`U8oMZ5b!^JMCNA\_oslW&0"k7/Yre@.J)t2OU,-.4RUMRV'tT^c)6Ra/S\lkRVUT9@MYUl(NajKn/@-9
%`ESm)Q*t?^/R;T3ZX6k;B%6hB^OM5Fi&=?L%5<1KS943ipE/8Q8b\.PIHe>Z^,OjcTXOg`]"tgF?1#+Ll>1shX"GOO^0dEif_;H\
%]=mZ;5?$b>]^).d]^&o@\\c(9?0i'u5'Gf@MO0km\DV"4q^\7]hVa9pSN"(<D<D?LptI+Pp:-mr6_Cu>f_2n_r?K(hI^o!^;gu^[
%c5Sn:^?^Pks1@"BHf4S7]anF6gjA"n`LS+-J%5*gqnqlMnc$G/2dYn?rUKgEJk',L]^M'9SA+a?l\Bo']U%NjB3pI'h`!2g[-aEN
%0&?9J9:KjHkd?uJqrjTFA(OA'0Y-QHl*V\lHg::A]rt`X^p^^YfjFXUH<N"(4SAgdmJH6]`U/$>h$i-5gUeWAla_44I+NT27tGOG
%rGh=OMuR)`i,B7A_uj4eF1So+m/%<3EUA+6DEIT8K73L.:PqjO^RFW&pbeuDSbu)egNW8\#$2fCI^n$Qos=T3B0WkXI<WGLUO@p4
%NX#A5J)?>HSc1AMp>,^'8[]Z>C4G^Kk7@I8J!o?omXLXepAk9mYT!X?oD9Y\s)8bYOJR:?#]TTF.):>B$O6ANm_T#$@6Ym-)r-,M
%,i9(=kSUcN(-#*mY6"h&@66=(BBnmBJ=l,9_ZS=-gAqBMCM\b3V#@`S"L?!*_ZVa5pB(TeRG&,caHYQl(<A,c%i=^>qZ-eejng2'
%2p6Dt#4@u:%3)hU[2h5G$ZJ%Hi$RZ2nDLNph[i!HZ;(:e(YjnWe.VdH<jlQQ1f?tg.S++:N?!pD0VHGXqItOjJn[GU!R'-9+&QS=
%UF\DLJNQK65GsmeOkd.l`gL;#lSctig)aD">?KSh)*nI+AaV,B%S(pforN6[a?7&q=07HDR-mb@DXC5I3"cupHdX[7(/(lPd3@2P
%>BX,ge6pQS']tO,"9"dT2a".+iLI-]-j,U$Lu76cWt8pe"!]Xi7]&"!j7s^so1BTe;-NrFapBE,hb;<%5+9s3ick!p_N6L=,[RBn
%&SO3c#>5/G@iYN+kQ'&hj;B(H@TTpqI-5=`5YB+if"]h![#!IpV^Y7N)&<^l*Q8YQbnH]j%JZiVBgWCY`lfG^V?W7A/kcbh^kM$h
%Umh`*7*0ef;hWEi-OH8LR3q:7.hh"ja%2/`Mc<!,Dc4A[R.F:Y&^4TSpN8479$=S3mIXp!Ih\B%@P28f.n1.Um+@3XbuG3Me/*=L
%amhn[4Jb$[9J8%ZjCf%*f%XgY10^dXE]9?AI+iS\qp565SZ,s$$Wt]d%WsLLm66.PH=ff^?/'h1T&8g].[d>6WrmflBk'E)]t!/I
%He#U'3*VNoRp3bAd>R+ZT=lbC.meU1RnI\6o=3o\[m/GS&,YS0%m.HM9sWYP\A>#5OuCt]X7&j_\mB#)%f0p$\el4Cg)d8.gh&kL
%N"kdOZC`GLfa)MpYA(`cn,PO,Sp,;0bLq+b7N?5,h;"+tHol)6?0j=^Xk14ro&_1qLA0U(l&2pPUkaaEo7CGeT3mFX-7eAiXiU2e
%`j<*[a;r<afm@lVB$2h\-0K,kEQ];hSo2eK0g`CEA^haF+$!Xigh"3/oq(?C2rEY>]`7P$*Jujo2e+`$AulpND?Ei!3&l'NnhSDu
%U/7hdF_M2_>)ZqMdFl*D?pQ`ufG0U7Y*A'HRV"g`7kOh#?HZR/E`*qLU_mcbb65bPTkY!:(HZ`<>:Em9>N';*_MpOM\ua<R=2@<J
%O&H5fWO8>c'8;2k0c&D4d%T$q1/QHXM!L4X"!Gc4CO^R_&-rWY2ie#qb(.Qr22c>1QCrN-k1PUtR^a%X/M$%?2enk38C(&5p_7\G
%*%KL".<2bA$k7Yas.E\g&9(BoqJ>]'+Bs.h*1J![b%@GnE8m9coK?pb@'gODl-%MC;<'QEQ-'SF(16-.\`'U"c\*N7(d+_`LnkH_
%c8]:]V8N'38Qp@`re@3>)p'(TM7MUoX/5NZC&E=m1aZM>9^SOc=u6<2U5Q#`1Q=PE,j2\CA=ps/.'IsXE"_BjP:,k&*Z6tr7(_*[
%dbpC,;GbJ(0ehgOF`::*\)W;\iL*PT=mB:u3pG]m?@E_0NH/&5L*%slABQb'$iD7WCdkBc^1:s%jGqi>bembn(<>W\q).*6Ot[8Z
%`D94gk]*;&k?5nd'MYbPUU(J1T:1M%_\27b01.G:=5_M"MVem7hc+RQG.i/<;p0Zi8G,Cm8#CW#*,tc8*$Wc[Be"X&)F5jFVCp1N
%\aGRJ$IWg'(b=18]m-m.T/t:=*0&ZOXd=>Ra[(`<hrKJ4rV^50rHiBSnJh-QYMId>Cjeb8ncfo;0&'a\]<hUBBO9QRMXKR8Y%V2!
%i/7Nq%BaAP):JCCQoB8j(A<[DU5/DRqjLW8Z`B!A2Z)3q2qZa&R[s<oR5`dMa]b>6>+%>%f?7'1gR?eqko4a9bHou`j4MI]?CfRm
%iurdTTV$jM"fF&^((mW1^#I!G,K(#jSZ_;O375.mf;7PqmE1QseYlRNlN9AP3N'CHMc>d2[[+.dO2ffrA0Ete42cG%c\=ChahYQR
%V%RoCN)?;\VCDt]K:N._aH_?2a.R/mOsK=GT-dE?d(G6`FJ*olF^eY&-S%3AH.IO:10`rKiGd(^`2&C*N7_8l&ccAlh4lo`LD^!!
%1E1Hp4IT9UU0p`"6P<qe^mA^8<(7aX]M,jE72`E4pd_aOjcllaf:NNm<`"a[k9Sqr1FECdN]Dt(Ha;ouA]$N>#-c3:iC%i!AXQ@!
%b/OuaJ#FEr!Y_i-'1af_gr5^_'^73bo2h+f.OCK%L@fjgDk=!>hF6=.J<uWMMlF4fGjAb+`]hM3Tg6aYO"1=+L&ag+i7E[-P#`(Q
%MH]#%]N4iZj(8mLMGhY>h/,M"#68&nl;,hq)*_j(\mr"Vp4/>`h(^99C4T9f#ofj(]_$J-`&bu9\m-'u=2hC:RO9?=kg_%)m4//]
%k>6Q>Fmc^]&QZ8#!lj72#JA9,GkGIjEilNd]HW=a2t?XEPJ>!04o:Wa<.12)p&Jh\L38i!9p&jjgK(Vm?I>LQ9,@*7VAKJM_'1EG
%_XGl]DMBbtJ8#78r9sk0I'Ij>;%4^U/KohRV+1@2D$C9U2[P4k/1&W:?2OPe1RamiNm,L06a"ce?O(a@ONn7\SrIg^?mJlf.9jEt
%!fZ94#(4J#LZkAdi63uV$%U\p9H\SP*4-GLJA>FVa:ZY!W3jn]c\ZMo#nqG&ial<9e[,6.LUbC`*["+-62-e4&KFLJ-[Ei9fTb@E
%7@iXVM9ULEhp!VR!K1J6O*G,s:T;QJGlWb)jA-k7LbgVX0;XsI_2KCBZ:Xf>=q\gI$CH.7_79SQm9Zd2c2[sjf65?FTW,Yu#A5J5
%5CKg2Uj](C!jgX60Lsof<XlkQ)V1L.L(YrWk0PWcV#Z5[8QCk@@;Q"A7NRNId*l[Kg7AO%C<S.Z:^ue#U<TM/<3h"OR;Z&f4a=)E
%\L%@2+u!j__3&"D-DmgTm,"8g";_pG)TY02(>s2WcsI't(K9Fp-J`ZEgh2/H:/1nIF-+tFg]];%2\j;(4ns0Ak;W)S6P)T>GeP'V
%g[cf/4LG(0JGp-oZsscU\ho.U*(hm)kVWJ3,MlPo.@r9+Gk=@.R;$-&T@tGp2R7O-4Dr"]"C9hLo]P51<-38T<,RL6k)k#skcGn.
%lq-Y"RhKsRO7-B7)Fi/hhhTH=/c^V"@L/DI3On)TVM#t(`rSJ41*u?s/-hG'pf&2Pc.IQq5o,@]"abOAWD\QT3LtG3`3sR=K)j=7
%Th=)/3;E[]_[q>l/mrJQ;4?OY1Jb<\U4b^8kG%>(,I"G"eWLr:^`"3ab)gZ-"pcJ4g!`@qEOY'>LisdSioH+*YC`HD);uk?#I6JJ
%\)@-4Uk^=l=kX"^9\hRIG?K#jX6G"V$;//TQGJA5hb;27M:(e%oVp2_CF>K>l_le\5WY#d[r)Fg-.9;R/7sSM`o3u:QY3YY<Pe[k
%P(,d/JeP$Z)rQfpVkH>0P*"8;P-%K8P<BM'-#W"oY1V8[^\j2sEUauWe`R.-1C$[q2^=T^i&<C[oL)jV*ZP<no".#cd7V+J>alBH
%QK$/)e;:+9&]?j]3`+/e5&pKF3MbHG[$XZ5GQLg9qX>Uq3NSp"SeJ1H%$uZ":I`j6!lB68qnUl"[+1-#[e?MF:e_o<HT$GJ[@IXs
%bQ9'j4L!ke(@3m-Lno]uU5msC\2u$S9@4)0i]RVLf$M1nd'1FYG(6eaI,$oje;=@H)gA;.WZqh&>E9N)`14(ZNl2Q>Df%*Waj(2D
%I'&1eK.::`gn_V9"N':+o3nJ57eC.rXF"B]m^>%Kro[*h<DMCa2-*uf.P$>P7+N<2K/@Bu:?`X'#%Ib[o$EZGla9i\3BZZWkHV)-
%cmA*i\>dd<5'TOG[[g20@Um[-l15WUZYZ">_(97/N,I>k;:m4'6#MJ*0b8VrfhKl4UJ9G,RBpidFipeL@C\qqIqK(>*E0(ui9YQd
%I#]K-F<>B)<D++egi9>6j.\\qYUY9`!(F6G'Fdimr3^*uh<Wrq5:Up[?cm+)F^`I*g-g%PB0To;TtgZ8>lmQk&es>2Ma7R3g:3'_
%em?j#2Ghl]YWfC-$+t4?%H%i1G):c;_-m=FpHh1I]<n%"15WhCV\)(u%.jSIi*hJ_,.1G\C^O=1:STb!PQ]ogFfl"jo"t:4+O"qa
%9g-rOCR--]ri=]rhf(lW)hrZ35RndLk/T,F_MmIh/@rZL!hd*Lo\!rB.@7J=4*Vr0aKospI^_[R[F7=ZcRCk8>sCA3L73ckaJfGZ
%SSOK&4:J1,1ZiL4/#56TgKY:l9[b").FW=un[Nn*ZH!iF/tq?C-9!G'*E*_I]3;ojf]YtE2_GhPgqC9tVTg=85[^^bUs28^X9d!U
%LTUu^$_^#4#`$"^eq!-YesaJL.0lEgQZ;'J*c0Ikgnj'1Mdb/K+`$_G;Uo@7Eb8[N9ODqtn#SfI2><h?lB.HN-ksiq7MfVpR;`RL
%akZsGNQk@9o-'id*BJc6%AEO8QPd1s5OsS$[7D7`_8Y4G!KNU;l."m9!ScaM3hD+8=0?bN7Ha0sD''"CcJ4;uYWg8onG!YP\&?*,
%6La^Q,50ps9\S6BE?^4cS;RYjo)l0YP$9W:He%:kn,t]i%C(ZlSDn6Ne8>eXYV<[n&UnH8DSB<JT<VMJe(*-2L]JRIP[r=YZH5!Q
%736borJ,=gE-:9V(KWQJpZ(NCgR_Z$)7P%)Ck'En9*!NXJ$._&q]9%:f_0a)_W1'2Fa8TiIbb+T]'7mZq^]Bd!r4HnGM2tIJ!]Q+
%G^+Ld$U.n*^Z+>i'QW*Wb8X^Vo^W2fI(bF&mWs4C.(na3<U5!mYJ8VYcW<?dH[XEVpO6KJE:<VQ&)4g*NSV&;=7,b\^V%At&$Y3r
%[L\bmYBYVp!VZH,Y.f'B_:$*Q^0p=Nqqb_W<:'I6[0>E6K_<6r:Y:0,o*Xf=HbZe6\G$DI"2FR>H_SQhGF1>!iZE@(AD9Jq)dMkE
%e%E9O-'itgmjI6,/pN9(Ic"5n2q[d=X8TcIfR)Nc*of3+HouKsq[[Ub-N!%<f:D9#ZgCT_)sk/#r<%56b*pcUDIkE"IE/WootG3E
%H=bjA/B,'d?C!A'G;/@(ZL;8RO^m.fX=\eRbq+3MhpLd<L.taU)bf#3AsmK4mUi"LFrekGF)JU[h<;On3r;5(cL'ulpM7gUjS,fi
%\)d"Jc[I:pF[,c8D`aWj\@:jWp&jKd'3b!Oh[P"8TM7q`cM[RBBW6N!B=(Xb^,oM1s1Uj(G5o9L=sigS;jr'l"h->C?ZAc_)VB4-
%X8TbR=uY)X:V.;89b-I_P?+3d'l+J6'b*C`)R&f]-mC2@Z5+=6]')'Qh'"2^<38'N=alK%Fm4l(aL,lbK2+/ce0p'WPRR7CA.:H5
%muL+]FL"Qoe"`E3NfNlff"2FXE0S5/lWrNOZX`_Hkk.jHdR[$Ib3pH6.=nZ(e2^8bIAuj((2_,*GtL/]'#5a`Ho/$C?GUoc0.@e1
%W8g?PG,Tc&-4a[,BITBJZ1F/-Vo)EmO^N%1WkR7s[$@P=jb4$'5f.S]XKT8ar49*[3g*$!e&/m'2]GmN4*_(h!!R@.Uf2;nr9B"/
%pttU>34*_34/<2S's^1+HmeSqiKIA[QHeBdl^"#Ha\Oq&oh":s%Sq"RY[6pGl("`>)J%@@-=4\.q[)-_"c9Ccd&-_?LiGC1EOO`E
%VaBoPeo5`+/5MU,Ja"XIgFhnFRp5-7W&F3d'_R9%_2Jqb.Jo<T,]f;XZPJB,_g6u=7EbZ602gC<+efUD`(YM9&dpUp[VGX]ODL;o
%12U7%^%bb[YruCocTZ8U'2]ak+GOSh)!\nP/u*/F4db-QhfJaD3>TV2fGBd(s6qACE*W;F`UMjHp\Qd1pJ*_FIRQC>2qV+A\A9+a
%">>2(P2O;t<>3%?MPB#<hPr'XB5^cc]_IAqcjdDuLAL%,.YH&nUXJY.YcTg2:@BZmn%6;?fHgD@dK7bi+Ap]./QdBSLF*LIGXd96
%'KD(%3A?a7.BlE"W!DT4b(5ko1(8MJJF+&K:$hF&G*1Ad:r[)!iXLi:/H.=YW';sO/^e9hlbLB-`&uF\J&A7sH3_ZC`L<"5@MFJ"
%@-][[AB1p<5&D"A7\gUYo/4"=P*qmi,:i8H6*DCPf0Hg0&LSETVP5e+1c"^@jG0,]14EgYm5&<Y:(;T0,R\8VR++0J@1ECraOSXV
%,tQ6q2]9"5A`QSK$ShP)RY*;N;AdiEXbV_&n`=lg2A!bm'<L.qVl-W)Ula^4JB=a!Xu5^nOsb=D,WiM0H,DrX2o+bh&itA]a(ueT
%PRNlIFWqK@f6L+W^]nC@-=B/@EP/X?aGVW&-<WJrS0:,<Ge.Mm/[a-r0r-VuIZ*gun`_=W7BcI0`KP;cN#IOS'CM&sB7F@c^tF<a
%mou.)D3FYRq2HIKc#DOt_Am4c/$kb<G%$uKrKWer)f3iC[(\BOq=lK3SN"&6j4/eZF'_AbmkX!cc!mP[ZWNt--?Yit#Kjb[&^!Ao
%.VJD=R1=!/--L65iiNl8T(+,"`'hm+AT3$9SQ@lM9Lu%4AWBJQS#aXTkt`HQoK5uO<$2S.a@/VEgW%eepZ+.6F)L##.%hpI[Z.F/
%8jJ(iV/4RN5#6til<5_V=RreT$;F0L%QHWnh(kn/0-'j+7L@YCMHV/t1;J,_9-oSh]?*;l,0NdX8&C<N:r*8(<dXGTaT`X\#&F`$
%;_qT"*phc1bB+jm2T`Z5=eHuQ:C0>OUMH#:Z8hcbOo7b4]k3V.0_jn*:/L85W3&3F>JQ\7PQ@eW/6)YlL56nN-OE\+*X\K3cjE=N
%U@)2%hJ_>'AV=fKad5j9aAU8>Q,%)c9!efqas&1:"%gqQA0!2#b.<Qli]u'4=bP`EqER5l.H8Ep.?J/=O@-IBFuH+`V-bXW'*]*B
%ZO@/'de7)rHUFnE5,L3+^OrD$Z8WltnTBSQqYB7Xf7>n<.Te6:'&`IT:08/5JAc[<.%W@*?&!D<KiQ5sNCkKggaeIQcss1\Haq)-
%oOs4rb@6K+[k@/r>`oqF'#NX\@^O[@0FO@_*&T^`=QMs-'8S[K]>`hj[)Rq[TVX`*&_e:u3?uG(/`\aaL$02+)ljiAeg?^doQI]*
%+r[&L;jVKR:;K5nEb\#Ic8gHFh%E#0_M85h18I&h0O!$IL_n?ZFET@?_oSl8FWNt,c!V5[!U9EdRLei9OJ88)[8,44p`A!1_^\mR
%PiE]u]30MUbt#$MNmKhJ!;Q1sP/?KNOFY7"f6o$W-sjP"S-,mUZpQO_1e]fj4W5HS&.bU)-@X]/(ocMkN*ZsgUQu[s>.H+Cn4EJ^
%&e>@i-3lE9,>4"mQFNA,X75UFQ:AuO\ueAU5TG?g2/So_8V(hLa?$#GlOuN\16:RMA`.fI07)&-`2S#mP`0qj50]Z/!/5q"-p])B
%aM-HF_o%!1A<j68ONm'/3JL)dYbU=.o^)t>"ts7(gjKK.Bm\T4J8XmE5XeY41F@[)KQ^Hd0gM0s.'(/;6JVD#fnQSS'hO8jPq*1K
%V51;b9s%P#bP07jZ@oae-Z>!#$H:E)B[3:j"pY"p5$SELh'\pJc[,7DGSEpVKBU_laHY1?T>(!oWs<I[p>rN$\:rkkE?cA1\MQ0>
%6jGo[/\Yf9rr`>fRP8<rNdk`ck_F"jL@$YH1MD9WU1*qIRmrIr[qbj<GO6<_^_P%I2n38MYl,=&L,ZVOhs_n4_89XXI2b]$pT5FK
%s0eK9p@jl5`;?tQO&oDa*PT@m]u+Q(`T#:`gp_QRK.Bu`DQn!P*(t@rnr[P:[sb'@p8oG$ep[G9Dm4'Zkm%#COSWAB$K;Ngm3"QA
%h\+?A[;?:sqd!u.+0]YonHN&GU9?S&hJEh7QY2P&cs<gk@Mg5<,S9Ub"("?:`nJ.W;+U#R!mh>".G5:A..\#U2Op&6q8bNu.SDjN
%ej27tIDknb>$K5n.:ifIMmI!id3u"H,n%j5q'9K%s0H5aB+j%R%CA$g8AP0Hs+&7?Z5upLF:-DLmV[S*]*"eZqK]FYQ$ZO:OGA]A
%dmi;mX;S*&G@Eik)'!_:O7k8Di&g>M39bbcl5.D%^jAUK*b9heYWHM+O5he6=L.!TDp6MeMZV%T$.KpHT"/3IFpo%HQdB%"S[<n]
%K6WJahV.AUn1d,S6!^KRUKA\TB16EGDt]&<@l1==[b4b@[6p(]Qrj_%s'XPJekcU.iHjL%rR/+1N_h8,9"cEm%iH(C0j;",N\gn7
%+"/K$$K?V41DtD9hGC(bHLl%Cc>$TibqkZ/OVj\B57/0';&5SZL8qNf_ld(Z>rumh7WC0?BttjVUanC7&nX(tc(ors%i/58e<Q5=
%')Gq&JS-bK`d!B]2^QF1&V@F:BA%>pp_n0*.I3C^m!p:P+eR#Il8G$uaHmu"-u@II.1B8kBpth<'#;@B*n3s<p:^j&C<;P^^g3u`
%>7rTrL(`$3kq'k#f3o+sb%O[PkG9)#[cu!mL7n>LFW8J\"hN']BaVi43pbF4bpU93Z0iI]>=W,@kb2-QpNJpjLuu#\kc1=aM'XV!
%C<TTdnS'f6WjY^XCt8mh!liYB[>M?+=g`bbh\-1ECXi4LJWE+1D'-1*Wq/'Xb?E#p/MeqMY-uHHm#jfVWhH4d3a/<>OI=>9S/Csm
%ao"QE#Xk*.Kc'/O<:LR!ZS[Rd`RH\j*En7i!+^Z!W+\Y99er#<4IgZ'Wd%Gh4Mi]\_#Og5pnBZ7gqqVl8k#*75/;u>&PYsR@#ZGq
%@V<,n&&`o\d,j."hZ?2]Jr0QO4joM*<W?1M0H42u7+h57V_c8d$&(`o-0.&Qm/ni*I?mL4$?R<M4"Fqf%_Bb=FIf9A#OiYZe8Ci:
%l%(hD/Fd*S)U.RY<CZAD5^<1p9qsoP9r%[fNJ\F]+I-X9.1Pcd<nr5,1Dq&DKU(Jp:kO*W;6Se4,#2YaqI<]T2O.<t`u'Z2Z1C/b
%9KW;^ZU(Ks4Rm(e?PWQPkBIb$iY%\[\mc,/5C=[F@Rpa.I]IQU]$UPnJ%Q&:rgp+j_+1\cE=k;0)QnZiN`t!GL0Zt#.YW#=3jP>o
%f4$X!]+Z(Iljb9Ln=YU%52B4DOa%VI)6Hs%[gqEPLGb[B!)ZQ7]uakk-P0!ReAI9b/@U@5?oGLZRiSC.jG37SOUE#(YN_?`E,^!`
%9VVCs:j5f"UNOjo+5VG@\,<@Qa(67'H.601>9ERF?k_9X%?/i&^*Z>86>to_0D5(k:35mkmPAB,bkX1JO:bc-fZFCh7b$Z2eT"a'
%&q-$rrno.YDjc#Wm+B%lUkb[!.G/BOp7jU_[,Y:4L`^s^MicYCAqN/(bat^qAKj^qAj;;l:"q4)LM5KMRHnuE*UFfF?>4(D+@Ta#
%Q#1'Nkr&C^5,'3Rb-hN?>[&T3]T9f(e(<.#qaQ1Q\e$1qoAR@+*.HTso-cr9Zn*_.L35%@&$&PcB#rWI!4.XL8)`Pca[C(J9nr4A
%gEt?YfY+BOc$dWoW#aDQNula;@N0=H^.0Z,Y/*]R!Nl",Ejd/$%"9\`$TeG.1aITF=u(UJBbiVXEMI>RlK[YVe08SHn.=s'Tbo1t
%Y[0JcQ>O+^_;&u'+9#bMe"_BS&,SLac#BM_WS/us2IGB7J,^)12!X2.C)DP6m)i=+OkK>/X//MeL^(Z(^3*7jTH8g?3loZX2/m@j
%*?]BpR]R3\NPg<mZ!$+Ra/Z#Z\s.odOtNt(X?!R5#n][]LVgq0.c+/dO'5@P*I"cQeGG'\=DOF)9l8i7a&=J?QKF9%B3CYal-YiI
%=1.^o4rZ@/.;l@OAu#`\QB@:kc$Up9f"o/r2C8GlEsI.^!#8,3X.h9NR'#[d6aoH^L_<?bj's#YjOibV8u^:@Iog%6_I++=\7?,Q
%[bY#8eWYs^aYOX2f-Inbn26W(9=uXPGZ%#DZOIR>'cqbq=$-8V5\t%Z1V3"X5JiRPF_s4[US>mlKuql&I!Hds3[qJt6&BcV_VmHl
%W"Cr6eB+i0@q0/-Juj#BYuqKdWoR?j?J;.+6+WG+K,j(5OGaD-!KXah5;R-I70(kuP$g^m3n1B-#Wpg9!PD<<7L/527LPt,j%6P1
%7UO[DGQ6%GiaFe;LFXCiki@H#Q6j6#fntgXG5)#L3u6e.A=FM6CO23Ge5rNs1C/\lghMQ+"nX5-g$mtJ4>+!N*VEdY+bJZdE-0H\
%1rs0Xf"'-PLb<;fC1eHoKBM2s)T)XYOYJS8TVhOM&6"I,at::A9l9S@r9Q%(!.2FR_[GC)`,qOSrZ+&-mQ^[-U++8EVp7eF!;#Ve
%TEm"q%M3?-kjaY@nKB&kF<S(_oHEgs!(!m.K3Os?eV,Mp'H8,RF6MZ%R"=nUB#/If^rhO`r2>I>(.,-[Ld8eZC&i?FAr;XP*ln&;
%rXYb^,M*j=gg'3*`(':]d>.a(jn,LD*KdV[do6cXqO5"[8oO;10(elK2.cf6,^7-rL:AiW*##gRg#u2kH9'd5(+fug2B5Be/#/Rd
%#:f`\CO@Nj)Q%qFbMKb]:hY9!]+ei%MIam1.?^NH*i;jhI]<-;NRNYAXMN=6Om$NY^Bt@t]rk'e$5''S7)n_NYps`KAY*81n9^BN
%%emOE@js5hl_<o"=nJ#hbbI9`qXSPXOnZBsO!X?ug7KK:nErs-H2[*h:*@q,;JPF&(28E\-(F^]P1AVLfl3i0Hk\:C$Y@FA4MR:/
%"F(Q#KO>$5)Q-j;H*2&Gr+*%0<d?hHR/Y_k,UhWh8)e\%)7FU%%\N5e(WK"<5:MrCd7a7#H$],I5Id`pRl%T=l8?S\Xp,/pg;Gs,
%m)*#i;&_^sB#iWtgL/F/bXHRd*f14CXD'Mm=(c.i/3/`Xe-T9QPlhr6TI:u&j94]mo'i5'AC?+NWnGH@oOrXc`h</VPB4!#b_RCV
%L30E)@o2d/&-$&YrJe1'cOGB"?M).LK&I14<=G@(;)5f#'fDa3g[@'P+$SQLa+*FK06R0D2WT('#96rgHc:g1:t>FRgWH*H\=i9O
%g=o^(]YP>Js.cLjhtm:ErVlh1hET_<rJ/Xg=1uA`pT","G@.enZN'pn=oYs;J(X'OGg:f$g*5SfO?O.XXY[?2e'+N>EGR5K"S]lS
%3,:F-LAAOO!35Ij-mcKI33jod+n[W8'-lF6-3ZAL*LL^'U%q<F-<S1o>u(Lr-DJVT=);D4!D%?dbG7-8nn]mka6o/jUk%+,GBgU`
%G4PAb+_GMmH?KGY8<>eiMiWCA=+iN3>AAU@`tDs[l@8mleMQ/+H'3rRe:YISF?,qO&VK&khuYLUj8_kuf462*#a=q&n%,m7_jC%j
%dsmb4/=4H6&50`%a?g$r%Pq2@Q%;ugEdO`R6EiW*U/BPamdI,,:9?3f[)-DF]eA]+9_&He8nE>$!f<)O=Y#WAmss&R`.?rTP>fsR
%<i\>0VX65KT7t'b:<!mWc(m\o%:4gc%1fIMP!6c7adG]m!6UG(%4)Ns2M&u6ks?Asg?$S<'rW_/Y6i`t+NSF9IT!]^baB=cC*NiM
%]MT1blK!c-3WQ'O$psP%Ml6]A>3WibY34/Y^j%G:%89CTpu!>Qln%[El/.YMfH4aeb&<=t'uZBB()C\8Zs?%8O1/*,mYLlS%<7,k
%$tZr_eMsea@0&k#jt'LnD:b.?2'aka78dRQ5Nn6\!0qjAT7T\=Fr13V)^p%s9,u3/%SjKD7U/H:8NDpXYc?Vt%k`duH#o3Y8]J#i
%'?m[2NGXGl-?b6OdOlIOR_3JE9s^$CF$mHkW>&,ir_Ie4rG4q/"Q@!,rd&WL9Ou<9d;<_oS<YXP68UB,"q/BfX_*(Qp=n_DS<95@
%GYi'_ZE'r7_g$lINRuYsNXo@#Ii\F=):]r<JKlN>.l$cd"f+8d?WY5AJkMS1h>ur*RVg$?Au3M1Aae$.I3YogDF?!f9XIKnF]Me+
%QW"+!@E[H8rQ'/S^'rKa"cO:sFGmC#83lrt8<`TNk%md3<J&E87o!2Fj?JWlFP)JQ7k'WGF>FO>Lu:X\J^G;d6\fJJh)P3N$NjrR
%PWFm8TH']V3IppY+JO]2ZT'Xo`j#tBX.=eJP?I(+(QukQo,Nr6L,6E>',(_a=DMI"Q6QciWJP",%Sb'h9S3TnInZ$$lLE^2[_Eu*
%W2>3*$<_JSK4a8:q%f(5g`5SjJ3Aa@Y33lE>UEYCk!^,;0FE.dH<(6kN/i#\4EP[jms8^M>8PI^A$SXt:Cd[-LMh^)VUm!KSRAa#
%\#1'%dJZYVjqjm4g[@op^&@q0isi.b2MYf2::D=O",H>[UIXH4i`hLbh@:;n!7L))/uo4UM:QSidS)tKo`<u'KC5"^mElRkZ=g(7
%bUXq%K4-P>3G'iY_i<A]"XSplh\6)GjKn1+BR(WNpus`='<1/4LG<upi1++G5>mBipJ_gX&B+PN/5S,Z,DnVqUOn.7ejon'V[j:)
%ZK-mSK=,BjgLk)HjcLSS'.c^+W?N>OE4q]WQUTQPr)-5QB48\5l6@180j)"o70*gF;ePV9VY`+.)DWr=B:8^TQ#\#0YV=:nH5:I<
%Zm<FdZEke6X[(o2$\=F5em/ANgu4RPmoV%qfoT]LW\,5?'krJY=nJ+rn;s)rANUh=OU6\3Tc$G#r@j7lK1E"iIh$hMkY)["(#6+k
%]aGJ[F2X%L1,.-76-_d?Jp$`E1r<dU[8VECJlu^5;0+@C,T%s#*.O9=-.A5H$sq\\"m$9G8]W%j+s%&N"q0j,LX[k-['d\uF7;&l
%#Ue.-nFS:#6a1Oh-e7F;P*)?ZABSPd$i`n6=_^@c4t2$ga<Ai(n@TT.jS`P9rh5h8,Mg-W/nbKu^Ru[EP]o!<B@>T"#l\d3976MZ
%;,7JO\?@?'@,0?K_@LL!$V*JLl3eW#pGI[:<80IOB?+ei+o.\cq!dgBk4$?oXZNm.pU/$Pob)WoibX/GN]d*e>B1+EPj0CQ/a>k;
%AY^Vm6%I^UKngPLn'u)b#:<M40OIs66!sae"p5_/U&g^?hLu^n`ZGD"-Nrq2*V>VVRMO$'a/-agIo$qN^k,*e)k!\9os8caq`Mfr
%=AnQJmE]*4`k%h-btu?D4B9SKEkhHIo>6)BPmgP9aWg<.AL3Hj,o=bPpn[m/7P+_P,6<dc=h[)*GJdg-(SCu:+rNUCpI&B\VjIZ4
%]Esl\BQQJS)PTtOAW^:8O;#m6$44"(N.qVfaWk#IEAAk"0R;Sp7MS_=/lEX^5`IoF99j$LRD(l!-.nH?/ks6`2W0"1FD@c>rJ"b`
%;fkCC;Q0[L%n9-s[Y\T%&VLRIe#8tp5C(+[AUe+4@Ji(kX3*\XGoGeB+<+R6_m3t2)[*0io$jn$nPi7^j8j8iW0.kPCrL)afC4h?
%n61d5<;e4r)6,@k`k'A>*/ce^Js&[PR&K7oYfu+'a9/W"jSr=6/F,kkI7!HYDSnH5!bf(+3T^+u<!k/m9!a?V5HN?718bS='C6"G
%f3\oU"Vd%.btiq+`/N_<U!=QKV6fVB>_GakE:0\rjb`gAA=);/mDUFd$L:ILN+ZB,oV=CGa>#GC'!cle?-FN<HTZOES$do"(K[<m
%Y'+L_lMtLe.CGBXh0-X)FJqQ(WL#K,TTpuD2(\]uW<L@e0<F;kr;B$"&S)aj->QB)!mu(qWYstDk`"koh3'frZlp44TSG./@Z&\U
%^.uG-M$><5lqpIF>$]^$VP(F(-Wdd!i3$f.Pd0@,AM*]sNI8B$8q<'QYnWG-lSe1e34TEW`=0L+%N`5mWAIu%#d-mASZE!uZ5Lp>
%h?u<t<#d+n;QbQ`XrM;"n&=1sqJpL[SRJ+=b"/AE9`sGkcYC1+XG`!FY@&bt\T<77.`0SmBF=\B=MHfHlG/TS:InX_IOd6f=Xp1C
%)e3nJ)`?/L[hhJX`)Ia_%$\R/)l41L9H7RcY<.ld26-K#(trD=Z2S.9a_K'nZtTf2fZo.q(AajeTF@PXh*qJ6KPhE\E,Z-!4FVJ8
%B,b/cSO=pp&1')T#KkQ`d#@)KdAcB-"nfZ*Au%4bIk5BZ2^a(ZA-l8BrSai/a=HMoJuG1,^k8"0`,<c4qmUm(m`r2QC^HA=HQ-[>
%CoLQ5hO,8=neqEpQh6eP'bVRW28Z'R)`@a\DOWPEHJCAqe:-;fd0K"W39o7H'1ZuFC#jLDCn!F,5$g'f5(("Vl8[\=[]q&:f"S[>
%#iWM6UGpgaH$g7;2L6Y+2g]Lr98:cJNu(N_%j*GC5J"\Fq84.V0n;H8]P%B2#5^lODQn$`IJA'+&5qhB;b/k"2hlF,I<.r*DVlT-
%X_QT9P+LDcMHimDRRR5ND8Sn'fJ\`E<nK9i^-T($525;(PYOK3H$FIo=j%6W>%p=R1]D;F,'oV-A$@)q2'-?nUPPK.Amd_'WoC?M
%'#Q9&=B%n[Zol53D:cgDgB!NeLo\*,KP:QWR.Z!Ok7FJd\7Chh6:X";(7<t(5#1XDiL+\#U.;!$$V8Yj/O%8>CDRdY+#F0mMgVbt
%JTm&/Q^AnA%`*I'4*4_kJ>J+;`d0OtaNn?n&ZTU<6PJ.J=[f9(Za,[g74`(B/9Fb6NTM,Q,^AHmN))Wh_31tl$*pA,B;=m8Zmq&F
%/SF7%RCR(=<UT5PYaJ(saao8Q8_.ASC.5CLXL0orKoSG0D?.2r$oh-,%R[Gm>."K*kf9SX.iJb3e]@CmS6ITq8%(fPSrr$(jiH_<
%-q%e6a^#u&=P]iN7sm\CaCZn/H^@J:b*lfa)F=Zd13Gk;".AUCW7"XfCe]JVO?]/5+=jF_F=c,1E$8ObMYKRDbK$@h=gNptjuc(@
%qW%lpNI&<>n:->a0,m26as.TZfg91_[6c30pICAD5oO`4P)n!QUtu.,HlLJ%f,6G,+[fr^7(MV5CM?c!q4*6BF]J;?`.7>&)%XrC
%%cpg&CX+oUqk,N:^6PES-Cg@fb:>Y!VjiQlkTck2#!_r(Jl(M^FN`'el[kJpmF-9]'^[<]2ff+)1-7'=E\.eLb9AAl5nP-l6R)gd
%=]?h;4MkmVF^oe$H,oE#2[S"]#h8'oF%jQTB!o#A"EHPaAJsB!#=HE]H&C".Tdjj-Pt%O'SG*UaeLE0ln<p='Wc0?qIMbok?98jt
%]?b/r]<D4R5[7q)6BOCZV%)L36b3IucQ&L'KIiPd<^mkH9bE?b(N^H=]#8_+N-qe8f-!lF[:a4@@MNZ_1IAii(%t2,JW@jtTS,k+
%"Z)(Q>jUE,Mb(#4WUQW!93X7p;'4n;Lk"2:OCUH_ls.Y=-kMmDi7#Hpg[D!CEqJVI*WY@h1dpLfR39:i/-$(66F5=G=l7d;3QOLa
%>!r//G5-c^o>(Y.BIeP9CHpP/^LRTmg1M0[k"8P&6OHuh+>*Qtbs0Y$<M'alH]Y`_%r_cSOL^AtlbM"$Nnpg6636_)pl$,k-ie$q
%MJaV@&Y"`"0>prN'AAQ2+\]Gn8OYe`=rh%j>*0#d+$G`nRWWBe%@PJ=TE!r?&-(TQf8ot,VgnR=QiH[CT7?]O#sS:=?iKQ\J,Agj
%s5T0TrqZ$_mLOgCj^3LcqW1M&_G'h!J$,E8rp])Xs73r(jj1\*rT0[OjaTXL7Rr(A+9(fFr27=0]Di9,C$L!~>
%AI9_PrivateDataEnd
